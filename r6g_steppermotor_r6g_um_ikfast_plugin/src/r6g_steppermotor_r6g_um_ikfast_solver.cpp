/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2020-11-01 05:30:49.506950
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[1]);
x4=IKsin(j[2]);
x5=IKcos(j[3]);
x6=IKsin(j[0]);
x7=IKsin(j[3]);
x8=IKcos(j[5]);
x9=IKsin(j[5]);
x10=IKsin(j[4]);
x11=IKcos(j[4]);
x12=((0.00024939)*x4);
x13=((1.0)*x10);
x14=((0.00055081)*x2);
x15=((0.00055081)*x4);
x16=((1.0)*x11);
x17=((1.0)*x7);
x18=((4.799e-5)*x4);
x19=((4.799e-5)*x6);
x20=((0.1165)*x2);
x21=((0.064)*x2);
x22=((0.1165)*x4);
x23=((0.064)*x4);
x24=((1.0)*x2);
x25=((1.0)*x4);
x26=((0.026048)*x4);
x27=((1.0)*x6);
x28=((0.064)*x6);
x29=(x0*x1);
x30=(x11*x5);
x31=(x0*x7);
x32=(x1*x4);
x33=(x0*x3);
x34=(x1*x2);
x35=(x1*x6);
x36=(x3*x6);
x37=(x0*x5);
x38=(x10*x5);
x39=(x27*x5);
x40=(x17*x6);
x41=(x25*x3);
x42=(x2*x36);
x43=((((-1.0)*x41))+x34);
x44=((((-1.0)*x1*x24))+x41);
x45=((((-1.0)*x1*x25))+(((-1.0)*x24*x3)));
x46=(((x29*x4))+((x2*x33)));
x47=((((-1.0)*x25*x33))+((x2*x29)));
x48=(((x34*x6))+(((-1.0)*x25*x36)));
x49=(((x32*x6))+x42);
x50=((((-1.0)*x25*x29))+(((-1.0)*x24*x33)));
x51=((((-1.0)*x25*x35))+(((-1.0)*x24*x36)));
x52=(x46*x5);
x53=(x49*x5);
x54=(((x16*((x40+(((-1.0)*x52))))))+(((-1.0)*x13*x47)));
x55=(((x16*(((((-1.0)*x31))+(((-1.0)*x53))))))+(((-1.0)*x13*x48)));
eerot[0]=(((x9*((x39+(((-1.0)*x17*x50))))))+((x54*x8)));
eerot[1]=(((x54*x9))+((x8*(((((-1.0)*x39))+((x50*x7)))))));
eerot[2]=(((x11*x47))+((x10*((x40+(((-1.0)*x52)))))));
IkReal x56=((1.0)*x33);
IkReal x57=(x2*x33);
IkReal x58=((1.0)*x29);
eetrans[0]=((((0.11)*x33))+((x5*(((((-4.799e-5)*x57))+(((-1.0)*x18*x58))))))+((x10*(((((-0.064)*x52))+((x28*x7))))))+((x7*(((((-1.0)*x12*x58))+(((-0.00024939)*x57))))))+(((-0.00024939)*x5*x6))+((x19*x7))+(((0.047)*x0))+((x11*((((x21*x29))+(((-1.0)*x23*x56))))))+((x10*(((((-1.0)*x15*x56))+((x14*x29))))))+((x11*(((((0.00055081)*x52))+(((-0.00055081)*x6*x7))))))+(((-8.1e-7)*x29))+(((0.026048)*x57))+(((-1.0)*x22*x56))+((x26*x29))+(((5.0e-5)*x6))+((x20*x29)));
eerot[3]=(((x9*(((((-1.0)*x37))+(((-1.0)*x17*x51))))))+((x55*x8)));
eerot[4]=(((x8*((((x51*x7))+x37))))+((x55*x9)));
eerot[5]=(((x11*x48))+((x10*(((((-1.0)*x0*x17))+(((-1.0)*x53)))))));
IkReal x59=((1.0)*x35);
IkReal x60=((1.0)*x36);
eetrans[1]=((((0.11)*x36))+((x10*(((((-1.0)*x15*x60))+((x14*x35))))))+((x20*x35))+((x10*(((((-0.064)*x31))+(((-0.064)*x53))))))+((x11*((((x21*x35))+(((-1.0)*x23*x60))))))+(((-4.799e-5)*x31))+((x26*x35))+((x7*(((((-1.0)*x12*x59))+(((-0.00024939)*x42))))))+(((-5.0e-5)*x0))+(((0.047)*x6))+((x5*(((((-1.0)*x19*x2*x3))+(((-1.0)*x18*x59))))))+(((0.00024939)*x37))+(((-1.0)*x22*x60))+(((0.026048)*x42))+((x11*(((((0.00055081)*x53))+(((0.00055081)*x31))))))+(((-8.1e-7)*x35)));
eerot[6]=(((x8*(((((-1.0)*x30*x43))+(((-1.0)*x10*x45))))))+((x43*x7*x9)));
eerot[7]=(((x9*(((((-1.0)*x16*x43*x5))+(((-1.0)*x13*x45))))))+((x44*x7*x8)));
eerot[8]=(((x11*x45))+((x38*x44)));
IkReal x61=((1.0)*x3);
IkReal x62=((1.0)*x1);
eetrans[2]=((0.1325)+((x7*(((((-0.00024939)*x34))+((x12*x3))))))+((x30*(((((-1.0)*x15*x61))+((x1*x14))))))+((x5*((((x18*x3))+(((-4.799e-5)*x34))))))+(((-1.0)*x26*x61))+(((-1.0)*x20*x61))+((x11*(((((-1.0)*x21*x61))+(((-1.0)*x23*x62))))))+((x10*(((((-1.0)*x14*x61))+(((-1.0)*x15*x62))))))+(((0.026048)*x34))+(((-1.0)*x22*x62))+(((0.11)*x1))+(((8.1e-7)*x3))+((x38*((((x23*x3))+(((-1.0)*x21*x62)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((-1.0)*r00);
new_r01=r01;
new_r02=((-1.0)*r02);
new_px=((((-0.064)*r02))+px);
new_r10=((-1.0)*r10);
new_r11=r11;
new_r12=((-1.0)*r12);
new_py=((((-0.064)*r12))+py);
new_r20=((-1.0)*r20);
new_r21=r21;
new_r22=((-1.0)*r22);
new_pz=((-0.1325)+(((-0.064)*r22))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x63=((1.0)*px);
IkReal x64=((1.0)*pz);
IkReal x65=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x65))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x64)));
rxp0_2=((((-1.0)*r10*x63))+((py*r00)));
rxp1_0=((((-1.0)*r21*x65))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x64)));
rxp1_2=((((-1.0)*r11*x63))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x65)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x64)));
rxp2_2=((((-1.0)*r12*x63))+((py*r02)));
IkReal op[72], zeror[48];
int numroots;;
IkReal x66=((0.00024939)*r20);
IkReal x67=((5.0e-5)*r02);
IkReal x68=((1.0)*rxp2_2);
IkReal x69=((0.00050282)*r21);
IkReal x70=((0.010951)*r02);
IkReal x71=((0.094)*px);
IkReal x72=((2.344266e-5)*r01);
IkReal x73=((4.726508e-5)*r00);
IkReal x74=((2.619491072e-5)*r11);
IkReal x75=((0.052096)*rxp2_1);
IkReal x76=((0.00049878)*npy);
IkReal x77=((0.00100564)*npx);
IkReal x78=((0.233)*npz);
IkReal x79=((0.002448512)*r22);
IkReal x80=((1.0)*pp);
IkReal x81=((1.299222144e-5)*r10);
IkReal x82=((2.344266e-5)*r11);
IkReal x83=((0.094)*py);
IkReal x84=((0.010951)*r12);
IkReal x85=((4.726508e-5)*r10);
IkReal x86=((1.299222144e-5)*r00);
IkReal x87=((2.6048e-6)*r22);
IkReal x88=((2.619491072e-5)*r01);
IkReal x89=((0.052096)*rxp2_0);
IkReal x90=((0.00099756)*npx);
IkReal x91=((2.598444288e-5)*r11);
IkReal x92=((5.238982144e-5)*r10);
IkReal x93=((4.688532e-5)*r00);
IkReal x94=((0.00201128)*npy);
IkReal x95=((9.453016e-5)*r01);
IkReal x96=((0.00049878)*r22);
IkReal x97=((0.0001)*r00);
IkReal x98=((2.0)*rxp0_2);
IkReal x99=((0.0001)*r10);
IkReal x100=((0.0002)*r01);
IkReal x101=((4.0)*rxp1_2);
IkReal x102=((0.104192)*rxp0_1);
IkReal x103=((2.598444288e-5)*r12);
IkReal x104=((0.021902)*r00);
IkReal x105=((9.02212e-6)*r02);
IkReal x106=((0.00019196)*npz);
IkReal x107=((0.466)*npx);
IkReal x108=((0.004897024)*r20);
IkReal x109=((0.021902)*r10);
IkReal x110=((9.02212e-6)*r12);
IkReal x111=((2.598444288e-5)*r02);
IkReal x112=((0.104192)*rxp0_0);
IkReal x113=((5.2096e-6)*r20);
IkReal x114=((1.04192e-5)*r21);
IkReal x115=((0.043804)*r11);
IkReal x116=((0.208384)*rxp1_0);
IkReal x117=((0.932)*npy);
IkReal x118=((0.043804)*r01);
IkReal x119=((0.009794048)*r21);
IkReal x120=((0.208384)*rxp1_1);
IkReal x121=((0.00049878)*r21);
IkReal x122=((0.0005988)*r21);
IkReal x123=((5.0e-5)*r12);
IkReal x124=((4.688532e-5)*r10);
IkReal x125=((2.598444288e-5)*r01);
IkReal x126=((5.62872e-5)*r00);
IkReal x127=((3.11950848e-5)*r11);
IkReal x128=((0.0011976)*npx);
IkReal x129=((5.62872e-5)*r10);
IkReal x130=((3.11950848e-5)*r01);
IkReal x131=((0.0023952)*npy);
IkReal x132=((6.23901696e-5)*r10);
IkReal x133=((0.0001125744)*r01);
IkReal x134=((-5.0e-5)*r12);
IkReal x135=((-0.0002)*r11);
IkReal x136=((-0.0001)*r10);
IkReal x137=((-0.0043600608266684)+x71);
IkReal x138=((4.7e-6)+x83);
IkReal x139=((-4.7e-6)+x83);
IkReal x140=((((0.00100564)*r20))+x121);
IkReal x141=((((-0.0011976)*r20))+(((-1.0)*x121)));
IkReal x142=(x66+x67);
IkReal x143=(x79+x78);
IkReal x144=(x89+x86);
IkReal x145=(x82+x85);
IkReal x146=(x75+x70);
IkReal x147=(x83+x87);
IkReal x148=(x111+x109);
IkReal x149=(x112+x110);
IkReal x150=(x108+x107);
IkReal x151=(x68+x69);
IkReal x152=(x97+x96);
IkReal x153=(x71+x80);
IkReal x154=(x90+x93);
IkReal x155=(x112+x111);
IkReal x156=(x88+x84);
IkReal x157=(x86+x84);
IkReal x158=(x105+x103);
IkReal x159=(x120+x118);
IkReal x160=(x128+x76);
IkReal x161=(x122+x67);
IkReal x162=(x104+x102);
IkReal x163=(x91+x92);
IkReal x164=(x77+x76);
IkReal x165=(x88+x89);
IkReal x166=(x117+x119);
IkReal x167=(x110+x109);
IkReal x168=((-0.004360166560156)+x160);
IkReal x169=(x74+x73+x72);
IkReal x170=(x126+x72+x81);
IkReal x171=(x130+x129+x82);
IkReal x172=(x133+x132+x91);
IkReal x173=((((9.453016e-5)*r11))+(((-1.0)*x124))+x125+(((5.238982144e-5)*r00)));
IkReal x174=((((-6.23901696e-5)*r00))+(((-1.0)*x125))+(((-1.0)*x124))+(((0.0001125744)*r11)));
op[0]=((((-1.0)*x142))+x69+(((-1.0)*x68)));
op[1]=x134;
op[2]=x140;
op[3]=0;
op[4]=((((-1.0)*x151))+x66+(((-1.0)*x67)));
op[5]=x134;
op[6]=x134;
op[7]=(x67+x69+(((-1.0)*x68))+(((-1.0)*x66)));
op[8]=0;
op[9]=x140;
op[10]=x134;
op[11]=((((-1.0)*x151))+x142);
op[12]=((((-1.0)*x143))+(((-1.0)*x169))+x164+x146+x137+x81+(((-1.0)*x80)));
op[13]=((((-1.0)*x144))+(((-1.0)*x145))+x156+x139+(((-1.0)*x87)));
op[14]=((((-1.0)*x163))+x90+x95+(((-1.0)*x93))+(((-1.0)*x94)));
op[15]=x173;
op[16]=((((-1.0)*x143))+(((-1.0)*x164))+x169+x146+x137+(((-1.0)*x81))+(((-1.0)*x80)));
op[17]=((((-1.0)*x165))+x157+x145+x139+(((-1.0)*x87)));
op[18]=((((-1.0)*x144))+(((-1.0)*x145))+x156+x138+x87);
op[19]=((-0.0043600608266684)+(((-1.0)*x143))+(((-1.0)*x146))+(((-1.0)*x153))+x169+x164+(((-1.0)*x81)));
op[20]=x173;
op[21]=(x163+x154+(((-1.0)*x94))+(((-1.0)*x95)));
op[22]=((((-1.0)*x165))+x157+x145+x138+x87);
op[23]=((-0.0043600608266684)+(((-1.0)*x143))+(((-1.0)*x146))+(((-1.0)*x153))+(((-1.0)*x169))+(((-1.0)*x164))+x81);
op[24]=(x98+x97+(((-1.0)*x96)));
op[25]=x99;
op[26]=((((-1.0)*x101))+(((-1.0)*x100)));
op[27]=x135;
op[28]=((((-1.0)*x152))+(((-1.0)*x98)));
op[29]=x136;
op[30]=x99;
op[31]=((((-1.0)*x152))+x98);
op[32]=x135;
op[33]=((((-1.0)*x101))+x100);
op[34]=x136;
op[35]=(x97+(((-1.0)*x96))+(((-1.0)*x98)));
op[36]=((-0.00025667746)+(((-1.0)*x162))+(((-1.0)*x106))+x150+x158);
op[37]=((((-1.0)*x148))+x149+x113);
op[38]=((((-1.0)*x166))+x159);
op[39]=((((-1.0)*x114))+(((-1.0)*x116))+x115);
op[40]=((-0.00025667746)+(((-1.0)*x150))+(((-1.0)*x106))+x162+x158);
op[41]=((((-1.0)*x155))+(((-1.0)*x113))+x167);
op[42]=((((-1.0)*x148))+(((-1.0)*x113))+x149);
op[43]=((-0.00025667746)+(((-1.0)*x158))+(((-1.0)*x106))+x162+x150);
op[44]=((((-1.0)*x116))+x115+x114);
op[45]=((((-1.0)*x159))+(((-1.0)*x166)));
op[46]=((((-1.0)*x155))+x167+x113);
op[47]=((-0.00025667746)+(((-1.0)*x150))+(((-1.0)*x158))+(((-1.0)*x162))+(((-1.0)*x106)));
op[48]=(rxp2_2+(((-1.0)*x122))+x142);
op[49]=x123;
op[50]=x141;
op[51]=0;
op[52]=(rxp2_2+x161+(((-1.0)*x66)));
op[53]=x123;
op[54]=x123;
op[55]=((((-1.0)*x161))+rxp2_2+x66);
op[56]=0;
op[57]=x141;
op[58]=x123;
op[59]=((((-1.0)*x142))+rxp2_2+x122);
op[60]=((((-1.0)*x146))+(((-1.0)*x170))+x168+x143+x127+x71+(((-1.0)*x80)));
op[61]=((((-1.0)*x171))+x144+x139+x87+(((-1.0)*x84)));
op[62]=(x172+(((-1.0)*x131))+x90+(((-1.0)*x93)));
op[63]=x174;
op[64]=((-0.004360166560156)+(((-1.0)*x146))+(((-1.0)*x160))+(((-1.0)*x127))+x170+x143+x71+(((-1.0)*x80)));
op[65]=((((-1.0)*x157))+x171+x139+x89+x87);
op[66]=((((-1.0)*x171))+x144+x138+(((-1.0)*x84))+(((-1.0)*x87)));
op[67]=((((-1.0)*x153))+(((-1.0)*x127))+x170+x168+x143+x146);
op[68]=x174;
op[69]=((((-1.0)*x172))+x154+(((-1.0)*x131)));
op[70]=((((-1.0)*x157))+x171+x138+x89+(((-1.0)*x87)));
op[71]=((-0.004360166560156)+(((-1.0)*x153))+(((-1.0)*x160))+(((-1.0)*x170))+x143+x146+x127);
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j4array[16], cj4array[16], sj4array[16], j5array[16], cj5array[16], sj5array[16], j0array[16], cj0array[16], sj0array[16];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ij4 += 3)
{
IkReal htj4 = zeror[ij4+0], htj5 = zeror[ij4+1], htj0 = zeror[ij4+2];
if(isnan(htj4)||isnan(htj5)||isnan(htj0)){
continue;
}
j4array[numsolutions]=((2.0)*(atan(htj4)));
j5array[numsolutions]=((2.0)*(atan(htj5)));
j0array[numsolutions]=((2.0)*(atan(htj0)));
if(isinf(htj4)){
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
}
else{
IkReal x175=htj4*htj4;
CheckValue<IkReal> x176=IKPowWithIntegerCheck(((1.0)+x175),-1);
if(!x176.valid){
continue;
}
cj4array[numsolutions]=((x176.value)*(((1.0)+(((-1.0)*x175)))));
CheckValue<IkReal> x177=IKPowWithIntegerCheck(((1.0)+(htj4*htj4)),-1);
if(!x177.valid){
continue;
}
sj4array[numsolutions]=((2.0)*htj4*(x177.value));
}
if(isinf(htj5)){
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
}
else{
IkReal x178=htj5*htj5;
CheckValue<IkReal> x179=IKPowWithIntegerCheck(((1.0)+x178),-1);
if(!x179.valid){
continue;
}
cj5array[numsolutions]=((x179.value)*(((1.0)+(((-1.0)*x178)))));
CheckValue<IkReal> x180=IKPowWithIntegerCheck(((1.0)+(htj5*htj5)),-1);
if(!x180.valid){
continue;
}
sj5array[numsolutions]=((2.0)*htj5*(x180.value));
}
if(isinf(htj0)){
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
}
else{
IkReal x181=htj0*htj0;
CheckValue<IkReal> x182=IKPowWithIntegerCheck(((1.0)+x181),-1);
if(!x182.valid){
continue;
}
cj0array[numsolutions]=((x182.value)*(((1.0)+(((-1.0)*x181)))));
CheckValue<IkReal> x183=IKPowWithIntegerCheck(((1.0)+(htj0*htj0)),-1);
if(!x183.valid){
continue;
}
sj0array[numsolutions]=((2.0)*htj0*(x183.value));
}
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j4valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj4 = 16;
_nj5 = 1;
_nj0 = 1;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
_ij5[0] = 0; _ij5[1] = -1;
_ij0[0] = 0; _ij0[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( !j4valid[iij4] ) { continue; }
if( IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(cj5array[ij4]-cj5array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij4]-sj5array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(cj0array[ij4]-cj0array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij4]-sj0array[iij4]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j4valid[iij4]=false; _ij4[1] = iij4; _ij5[1] = 0; _ij0[1] = 0;  break; 
}
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

    j5 = j5array[ij4]; cj5 = cj5array[ij4]; sj5 = sj5array[ij4];

    j0 = j0array[ij4]; cj0 = cj0array[ij4]; sj0 = sj0array[ij4];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j3eval[3];
IkReal x184=((1.0)*cj0);
IkReal x185=((((-1.0)*cj4*r02))+((cj5*r00*sj4))+(((-1.0)*r01*sj4*sj5)));
j3eval[0]=x185;
j3eval[1]=IKsign(x185);
j3eval[2]=((IKabs(((((-1.0)*cj5*r21*x184))+(((-1.0)*r20*sj5*x184)))))+(IKabs((((cj0*cj4*cj5*r20))+((cj0*r22*sj4))+(((-1.0)*cj4*r21*sj5*x184))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
IkReal x186=((1.0)*sj5);
IkReal x187=(r20*sj0);
IkReal x188=((1.0)*r21*sj0);
IkReal x189=(((cj5*r10*sj4))+(((-1.0)*cj4*r12))+(((-1.0)*r11*sj4*x186)));
j3eval[0]=x189;
j3eval[1]=((IKabs(((((-1.0)*cj4*r21*sj0*x186))+((cj4*cj5*x187))+((r22*sj0*sj4)))))+(IKabs(((((-1.0)*x186*x187))+(((-1.0)*cj5*x188))))));
j3eval[2]=IKsign(x189);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
IkReal x190=(((r21*sj4*sj5))+((cj4*r22))+(((-1.0)*cj5*r20*sj4)));
j3eval[0]=x190;
j3eval[1]=IKsign(x190);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x191=((1.0)*cj5);
IkReal x192=((1.0)*sj5);
IkReal x193=(((r21*sj4*sj5))+((cj4*r22))+(((-1.0)*r20*sj4*x191)));
j3eval[0]=x193;
j3eval[1]=((IKabs(((((-1.0)*r00*x192))+(((-1.0)*r01*x191)))))+(IKabs(((((-1.0)*cj4*r01*x192))+((r02*sj4))+((cj4*cj5*r00))))));
j3eval[2]=IKsign(x193);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x194=((1.0)*sj5);
IkReal x195=((((-1.0)*cj4*r02))+((cj5*r00*sj4))+(((-1.0)*r01*sj4*x194)));
j3eval[0]=x195;
j3eval[1]=((IKabs((((r22*sj4))+(((-1.0)*cj4*r21*x194))+((cj4*cj5*r20)))))+(IKabs(((((-1.0)*cj5*r21))+(((-1.0)*r20*x194))))));
j3eval[2]=IKsign(x195);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x196=cj4*cj4;
IkReal x197=cj5*cj5;
IkReal x198=r10*r10;
IkReal x199=r11*r11;
IkReal x200=r12*r12;
IkReal x201=(r11*sj5);
IkReal x202=((1.0)*r10);
IkReal x203=(r12*sj4);
IkReal x204=((1.0)*x198);
IkReal x205=((2.0)*cj5*r10);
IkReal x206=(x197*x199);
IkReal x207=((((-1.0)*x201*x205))+((x196*x200))+((x196*x206))+(((-1.0)*x196*x199))+(((-1.0)*x196*x197*x204))+(((-1.0)*x204))+((x196*x201*x205))+(((2.0)*cj4*x201*x203))+(((-1.0)*cj4*x203*x205))+((x197*x198))+(((-1.0)*x200))+(((-1.0)*x206)));
j3eval[0]=x207;
j3eval[1]=IKsign(x207);
j3eval[2]=((IKabs(((((-1.0)*cj4*cj5*x202))+((cj4*x201))+(((-1.0)*x203)))))+(IKabs(((((-1.0)*cj5*r11))+(((-1.0)*sj5*x202))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x208=cj4*cj4;
IkReal x209=cj5*cj5;
IkReal x210=r10*r10;
IkReal x211=r11*r11;
IkReal x212=r12*r12;
IkReal x213=(r11*sj5);
IkReal x214=((1.0)*cj5);
IkReal x215=(r12*sj4);
IkReal x216=((1.0)*x210);
IkReal x217=((2.0)*cj5*r10);
IkReal x218=(x209*x211);
CheckValue<IkReal> x219 = IKatan2WithCheck(IkReal((((cj4*x213))+(((-1.0)*cj4*r10*x214))+(((-1.0)*x215)))),IkReal(((((-1.0)*r10*sj5))+(((-1.0)*r11*x214)))),IKFAST_ATAN2_MAGTHRESH);
if(!x219.valid){
continue;
}
CheckValue<IkReal> x220=IKPowWithIntegerCheck(IKsign((((x208*x213*x217))+((x208*x218))+((x208*x212))+((x209*x210))+(((-1.0)*cj4*x215*x217))+(((2.0)*cj4*x213*x215))+(((-1.0)*x208*x209*x216))+(((-1.0)*x218))+(((-1.0)*x212))+(((-1.0)*x213*x217))+(((-1.0)*x208*x211))+(((-1.0)*x216)))),-1);
if(!x220.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x219.value)+(((1.5707963267949)*(x220.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x221=IKsin(j3);
IkReal x222=IKcos(j3);
IkReal x223=(r10*sj5);
IkReal x224=(cj4*sj5);
IkReal x225=(cj5*r11);
IkReal x226=(cj4*cj5);
IkReal x227=(r12*sj4);
IkReal x228=((1.0)*x222);
IkReal x229=((1.0)*x221);
evalcond[0]=((((-1.0)*x227*x228))+(((-1.0)*r10*x226*x228))+((x221*x223))+((x221*x225))+((r11*x222*x224)));
evalcond[1]=((((-1.0)*cj5*r21*x228))+(((-1.0)*r20*sj5*x228))+(((-1.0)*r22*sj4*x229))+(((-1.0)*r20*x226*x229))+((r21*x221*x224)));
evalcond[2]=((((-1.0)*r02*sj4*x229))+(((-1.0)*r00*sj5*x228))+((r01*x221*x224))+(((-1.0)*r00*x226*x229))+(((-1.0)*cj5*r01*x228)));
evalcond[3]=((1.0)+(((-1.0)*x227*x229))+(((-1.0)*x225*x228))+(((-1.0)*r10*x226*x229))+(((-1.0)*x223*x228))+((r11*x221*x224)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=0;
cj0=1.0;
j0=0;
IkReal x230=((12.0)*px);
IkReal x231=((12.0)*pz);
IkReal x232=((0.00057588)*cj4);
IkReal x233=(cj5*r00);
IkReal x234=(r21*sj5);
IkReal x235=(cj4*r02);
IkReal x236=(r01*sj5);
IkReal x237=((1.398)*sj4);
IkReal x238=((0.00099756)*cj5);
IkReal x239=((0.466)*sj4);
IkReal x240=((0.104192)*sj4);
IkReal x241=((0.00019196)*sj4);
IkReal x242=((0.312576)*sj4);
IkReal x243=((0.00299268)*cj5);
IkReal x244=(cj5*r20);
IkReal x245=((0.00019196)*cj4);
IkReal x246=(r20*sj5);
IkReal x247=(cj4*r22);
IkReal x248=(r00*sj5);
IkReal x249=((0.00057588)*sj4);
IkReal x250=(r02*x249);
IkReal x251=((0.00660972)*x236);
IkReal x252=((1.398)*x235);
IkReal x253=(r22*x249);
IkReal x254=((1.398)*x247);
IkReal x255=((0.00660972)*x234);
IkReal x256=((0.312576)*x235);
IkReal x257=(x232*x233);
IkReal x258=(x242*x244);
IkReal x259=(x236*x237);
IkReal x260=(x232*x244);
IkReal x261=(x236*x242);
IkReal x262=(x234*x237);
IkReal x263=((((0.00299268)*x246))+((x233*x242))+((x232*x234))+((x237*x244))+((r21*x243))+(((0.00660972)*x244)));
IkReal x264=(x258+x259+x257+x250+x251+x252+x230);
IkReal x265=((((0.00299268)*x248))+((x232*x236))+((x234*x242))+((x233*x237))+(((0.312576)*x247))+(((0.00660972)*x233))+((r01*x243)));
IkReal x266=(x254+x255+x256+x253+x231+x261+x260+x262);
j1eval[0]=((3.52002592)+(IKabs(((-0.56400324)+x264+(((-1.0)*x265)))))+(IKabs(((0.44)+((x234*x239))+(((0.466)*x247))+(((4.0)*pz))+(((0.00220324)*x234))+((r22*x241))+((x236*x240))+(((-1.0)*x234*x245))+((x244*x245))+(((-1.0)*x233*x240))+(((-0.00220324)*x244))+(((-1.0)*r21*x238))+(((0.104192)*x235))+(((-1.0)*x239*x244))+(((-0.00099756)*x246)))))+(IKabs(((-0.56399676)+x264+(((-1.0)*x265)))))+(IKabs(((-0.18800324)+(((-1.0)*x233*x239))+((x240*x244))+((x233*x245))+(((0.466)*x235))+((r02*x241))+(((4.0)*px))+(((0.00220324)*x236))+(((-1.0)*x234*x240))+(((-0.104192)*x247))+(((-1.0)*x236*x245))+(((-0.00220324)*x233))+(((-1.0)*r01*x238))+((x236*x239))+(((-0.00099756)*x248)))))+(IKabs(((0.44)+x266+(((-1.0)*x263)))))+(IKabs(((-0.44)+x266+(((-1.0)*x263))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x267=((12.0)*pz);
IkReal x268=((4.0)*pz);
IkReal x269=(r21*sj5);
IkReal x270=((0.00057588)*cj4);
IkReal x271=((1.398)*sj4);
IkReal x272=(cj4*r22);
IkReal x273=(r22*sj4);
IkReal x274=(cj5*r21);
IkReal x275=(cj5*sj4);
IkReal x276=(cj5*r20);
IkReal x277=(cj4*r02);
IkReal x278=(r20*sj5);
IkReal x279=((0.00019196)*cj4);
IkReal x280=((0.00057588)*x273);
IkReal x281=((1.398)*x272);
IkReal x282=((0.00660972)*x269);
IkReal x283=((0.312576)*x277);
IkReal x284=((0.00220324)*x269);
IkReal x285=((0.104192)*x277);
IkReal x286=((0.466)*x272);
IkReal x287=((0.00019196)*x273);
IkReal x288=(r01*sj4*sj5);
IkReal x289=(x270*x276);
IkReal x290=((0.312576)*x288);
IkReal x291=(x269*x271);
IkReal x292=((0.466)*sj4*x269);
IkReal x293=(x276*x279);
IkReal x294=((0.104192)*x288);
IkReal x295=((((0.00299268)*x274))+(((0.00299268)*x278))+((x271*x276))+(((0.312576)*r00*x275))+((x269*x270))+(((0.00660972)*x276)));
IkReal x296=((((0.466)*r20*x275))+((x269*x279))+(((0.00220324)*x276))+(((0.104192)*r00*x275))+(((0.00099756)*x278))+(((0.00099756)*x274)));
IkReal x297=(x290+x291+x267+x289+x283+x282+x281+x280);
IkReal x298=(x292+x293+x294+x268+x287+x286+x285+x284);
op[0]=((0.44)+(((-1.0)*x296))+x298);
op[1]=-6.48e-6;
op[2]=((0.44)+(((-1.0)*x295))+x297);
op[3]=-1.296e-5;
op[4]=((-0.44)+(((-1.0)*x295))+x297);
op[5]=-6.48e-6;
op[6]=((-0.44)+(((-1.0)*x296))+x298);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x299=((4.0)*px);
IkReal x300=((12.0)*px);
IkReal x301=(cj4*r02);
IkReal x302=(r01*sj5);
IkReal x303=(cj5*r01);
IkReal x304=(r02*sj4);
IkReal x305=(cj5*r00);
IkReal x306=((0.00057588)*cj4);
IkReal x307=((0.466)*sj4);
IkReal x308=((0.312576)*sj4);
IkReal x309=(r21*sj5);
IkReal x310=((1.398)*sj4);
IkReal x311=((0.00019196)*cj4);
IkReal x312=(cj5*r20);
IkReal x313=((0.104192)*sj4);
IkReal x314=(cj4*r22);
IkReal x315=(r00*sj5);
IkReal x316=((0.466)*x301);
IkReal x317=((0.00019196)*x304);
IkReal x318=((0.00220324)*x302);
IkReal x319=((0.00057588)*x304);
IkReal x320=((0.00660972)*x302);
IkReal x321=((1.398)*x301);
IkReal x322=((0.00220324)*x305);
IkReal x323=((0.00099756)*x315);
IkReal x324=((0.00099756)*x303);
IkReal x325=((0.104192)*x314);
IkReal x326=(x305*x311);
IkReal x327=(x302*x307);
IkReal x328=(x312*x313);
IkReal x329=(x305*x306);
IkReal x330=(x308*x312);
IkReal x331=(x302*x310);
IkReal x332=(x305*x307);
IkReal x333=(x302*x311);
IkReal x334=(x309*x313);
IkReal x335=(x300+x331+x330+x320+x321+x329+x319);
IkReal x336=(x326+x327+x328+x318+x317+x316+x299);
IkReal x337=(((x305*x310))+(((0.00299268)*x303))+((x308*x309))+((x302*x306))+(((0.00299268)*x315))+(((0.312576)*x314))+(((0.00660972)*x305)));
IkReal x338=(x333+x332+x334+x324+x325+x322+x323);
j1evalpoly[0]=((-0.18799676)+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((-0.18800324)+x336+(((-1.0)*x338))))))+(((-0.88)*htj1))+(((htj1*htj1*htj1*htj1)*(((-0.56400324)+x335+(((-1.0)*x337))))))+x336+(((-1.76)*(htj1*htj1*htj1)))+(((-1.0)*x338))+(((-0.88)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1)*(((-0.56399676)+x335+(((-1.0)*x337)))))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x339=(cj4*sj1);
IkReal x340=((1.0)*cj1);
IkReal x341=(sj1*sj4);
IkReal x342=((1.0)*cj5);
IkReal x343=(r21*sj5);
IkReal x344=(cj1*sj4);
IkReal x345=(r01*sj4*sj5);
if( IKabs((((cj1*cj4*r22))+((r02*x339))+(((-1.0)*r00*x341*x342))+(((-1.0)*cj5*r20*sj4*x340))+((r01*sj5*x341))+((x343*x344)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x339))+(((-1.0)*cj4*r02*x340))+(((-1.0)*r20*x341*x342))+((cj5*r00*x344))+(((-1.0)*x340*x345))+((x341*x343)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*cj4*r22))+((r02*x339))+(((-1.0)*r00*x341*x342))+(((-1.0)*cj5*r20*sj4*x340))+((r01*sj5*x341))+((x343*x344))))+IKsqr((((r22*x339))+(((-1.0)*cj4*r02*x340))+(((-1.0)*r20*x341*x342))+((cj5*r00*x344))+(((-1.0)*x340*x345))+((x341*x343))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*cj4*r22))+((r02*x339))+(((-1.0)*r00*x341*x342))+(((-1.0)*cj5*r20*sj4*x340))+((r01*sj5*x341))+((x343*x344))), (((r22*x339))+(((-1.0)*cj4*r02*x340))+(((-1.0)*r20*x341*x342))+((cj5*r00*x344))+(((-1.0)*x340*x345))+((x341*x343))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x346=IKsin(j2);
IkReal x347=IKcos(j2);
IkReal x348=((0.00024939)*cj5);
IkReal x349=((0.1165)*sj1);
IkReal x350=((1.0)*cj3);
IkReal x351=(r02*sj4);
IkReal x352=(r21*sj5);
IkReal x353=(cj3*cj4);
IkReal x354=(cj5*r00);
IkReal x355=(r01*sj5);
IkReal x356=((1.0)*sj4);
IkReal x357=((4.799e-5)*cj4);
IkReal x358=(cj5*sj3);
IkReal x359=(cj5*r20);
IkReal x360=((0.00024939)*sj5);
IkReal x361=(sj3*sj5);
IkReal x362=((1.0)*cj4);
IkReal x363=(r22*sj4);
IkReal x364=(sj1*x347);
IkReal x365=(cj1*x346);
IkReal x366=(cj1*x347);
IkReal x367=(sj1*x346);
IkReal x368=(x364+x365);
evalcond[0]=(((sj4*x359))+x368+(((-1.0)*r22*x362))+(((-1.0)*x352*x356)));
evalcond[1]=(((sj4*x354))+(((-1.0)*x366))+(((-1.0)*r02*x362))+x367+(((-1.0)*x355*x356)));
evalcond[2]=(((r01*x358))+((r00*x361))+(((-1.0)*cj4*x350*x354))+((x353*x355))+x368+(((-1.0)*x350*x351)));
evalcond[3]=(((r20*x361))+(((-1.0)*x367))+((r21*x358))+(((-1.0)*x350*x363))+(((-1.0)*cj4*x350*x359))+((x352*x353))+x366);
evalcond[4]=(((r20*x360))+((r21*x348))+(((0.00055081)*x359))+(((-0.1165)*x365))+(((8.1e-7)*sj1))+(((0.026048)*x366))+(((-1.0)*x357*x359))+((x352*x357))+(((0.11)*cj1))+(((-1.0)*pz))+(((-0.00055081)*x352))+(((-1.0)*x347*x349))+(((-4.799e-5)*x363))+(((-0.026048)*x367)));
evalcond[5]=((0.047)+((r01*x348))+(((-4.799e-5)*x351))+(((0.00055081)*x354))+(((0.026048)*x364))+(((0.026048)*x365))+((r00*x360))+((x355*x357))+(((0.1165)*x366))+(((-1.0)*px))+(((-8.1e-7)*cj1))+(((0.11)*sj1))+(((-0.00055081)*x355))+(((-1.0)*x346*x349))+(((-1.0)*x354*x357)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x369=((1.0)*sj5);
CheckValue<IkReal> x370=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*r02))+((cj5*r00*sj4))+(((-1.0)*r01*sj4*x369)))),-1);
if(!x370.valid){
continue;
}
CheckValue<IkReal> x371 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x369))+(((-1.0)*cj5*r21)))),IkReal((((r22*sj4))+(((-1.0)*cj4*r21*x369))+((cj4*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x371.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x370.value)))+(x371.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x372=IKsin(j3);
IkReal x373=IKcos(j3);
IkReal x374=(r10*sj5);
IkReal x375=(cj4*sj5);
IkReal x376=(cj5*r11);
IkReal x377=(cj4*cj5);
IkReal x378=(r12*sj4);
IkReal x379=((1.0)*x373);
IkReal x380=((1.0)*x372);
evalcond[0]=(((r11*x373*x375))+(((-1.0)*x378*x379))+(((-1.0)*r10*x377*x379))+((x372*x376))+((x372*x374)));
evalcond[1]=((((-1.0)*r22*sj4*x380))+(((-1.0)*r20*x377*x380))+((r21*x372*x375))+(((-1.0)*cj5*r21*x379))+(((-1.0)*r20*sj5*x379)));
evalcond[2]=((((-1.0)*r00*sj5*x379))+(((-1.0)*r00*x377*x380))+((r01*x372*x375))+(((-1.0)*cj5*r01*x379))+(((-1.0)*r02*sj4*x380)));
evalcond[3]=((1.0)+((r11*x372*x375))+(((-1.0)*x374*x379))+(((-1.0)*x376*x379))+(((-1.0)*x378*x380))+(((-1.0)*r10*x377*x380)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=0;
cj0=1.0;
j0=0;
IkReal x381=((12.0)*px);
IkReal x382=((12.0)*pz);
IkReal x383=((0.00057588)*cj4);
IkReal x384=(cj5*r00);
IkReal x385=(r21*sj5);
IkReal x386=(cj4*r02);
IkReal x387=(r01*sj5);
IkReal x388=((1.398)*sj4);
IkReal x389=((0.00099756)*cj5);
IkReal x390=((0.466)*sj4);
IkReal x391=((0.104192)*sj4);
IkReal x392=((0.00019196)*sj4);
IkReal x393=((0.312576)*sj4);
IkReal x394=((0.00299268)*cj5);
IkReal x395=(cj5*r20);
IkReal x396=((0.00019196)*cj4);
IkReal x397=(r20*sj5);
IkReal x398=(cj4*r22);
IkReal x399=(r00*sj5);
IkReal x400=((0.00057588)*sj4);
IkReal x401=(r02*x400);
IkReal x402=((0.00660972)*x387);
IkReal x403=((1.398)*x386);
IkReal x404=(r22*x400);
IkReal x405=((1.398)*x398);
IkReal x406=((0.00660972)*x385);
IkReal x407=((0.312576)*x386);
IkReal x408=(x383*x384);
IkReal x409=(x393*x395);
IkReal x410=(x387*x388);
IkReal x411=(x383*x395);
IkReal x412=(x387*x393);
IkReal x413=(x385*x388);
IkReal x414=((((0.00299268)*x397))+(((0.00660972)*x395))+((x383*x385))+((x384*x393))+((r21*x394))+((x388*x395)));
IkReal x415=(x381+x401+x403+x402+x409+x408+x410);
IkReal x416=((((0.00299268)*x399))+((x385*x393))+((x384*x388))+((x383*x387))+((r01*x394))+(((0.312576)*x398))+(((0.00660972)*x384)));
IkReal x417=(x382+x405+x404+x407+x406+x412+x413+x411);
j1eval[0]=((3.52002592)+(IKabs(((-0.44)+x417+(((-1.0)*x414)))))+(IKabs(((-0.18800324)+(((-1.0)*x387*x396))+(((-1.0)*x384*x390))+(((-0.104192)*x398))+(((4.0)*px))+(((-0.00220324)*x384))+(((-1.0)*x385*x391))+(((0.00220324)*x387))+(((-0.00099756)*x399))+((x391*x395))+((x387*x390))+((x384*x396))+(((-1.0)*r01*x389))+(((0.466)*x386))+((r02*x392)))))+(IKabs(((-0.56399676)+x415+(((-1.0)*x416)))))+(IKabs(((0.44)+(((-1.0)*x384*x391))+((x385*x390))+(((4.0)*pz))+(((-1.0)*x385*x396))+((x395*x396))+(((0.00220324)*x385))+(((0.466)*x398))+(((-0.00099756)*x397))+((r22*x392))+(((-1.0)*r21*x389))+(((-0.00220324)*x395))+((x387*x391))+(((-1.0)*x390*x395))+(((0.104192)*x386)))))+(IKabs(((-0.56400324)+x415+(((-1.0)*x416)))))+(IKabs(((0.44)+x417+(((-1.0)*x414))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x418=((12.0)*pz);
IkReal x419=((4.0)*pz);
IkReal x420=(r21*sj5);
IkReal x421=((0.00057588)*cj4);
IkReal x422=((1.398)*sj4);
IkReal x423=(cj4*r22);
IkReal x424=(r22*sj4);
IkReal x425=(cj5*r21);
IkReal x426=(cj5*sj4);
IkReal x427=(cj5*r20);
IkReal x428=(cj4*r02);
IkReal x429=(r20*sj5);
IkReal x430=((0.00019196)*cj4);
IkReal x431=((0.00057588)*x424);
IkReal x432=((1.398)*x423);
IkReal x433=((0.00660972)*x420);
IkReal x434=((0.312576)*x428);
IkReal x435=((0.00220324)*x420);
IkReal x436=((0.104192)*x428);
IkReal x437=((0.466)*x423);
IkReal x438=((0.00019196)*x424);
IkReal x439=(r01*sj4*sj5);
IkReal x440=(x421*x427);
IkReal x441=((0.312576)*x439);
IkReal x442=(x420*x422);
IkReal x443=((0.466)*sj4*x420);
IkReal x444=(x427*x430);
IkReal x445=((0.104192)*x439);
IkReal x446=(((x420*x421))+(((0.00660972)*x427))+(((0.00299268)*x429))+(((0.00299268)*x425))+((x422*x427))+(((0.312576)*r00*x426)));
IkReal x447=((((0.466)*r20*x426))+(((0.104192)*r00*x426))+(((0.00220324)*x427))+(((0.00099756)*x425))+(((0.00099756)*x429))+((x420*x430)));
IkReal x448=(x418+x431+x432+x433+x434+x441+x440+x442);
IkReal x449=(x419+x438+x435+x436+x437+x445+x444+x443);
op[0]=((0.44)+(((-1.0)*x447))+x449);
op[1]=-6.48e-6;
op[2]=((0.44)+(((-1.0)*x446))+x448);
op[3]=-1.296e-5;
op[4]=((-0.44)+(((-1.0)*x446))+x448);
op[5]=-6.48e-6;
op[6]=((-0.44)+(((-1.0)*x447))+x449);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x450=((4.0)*px);
IkReal x451=((12.0)*px);
IkReal x452=(cj4*r02);
IkReal x453=(r01*sj5);
IkReal x454=(cj5*r01);
IkReal x455=(r02*sj4);
IkReal x456=(cj5*r00);
IkReal x457=((0.00057588)*cj4);
IkReal x458=((0.466)*sj4);
IkReal x459=((0.312576)*sj4);
IkReal x460=(r21*sj5);
IkReal x461=((1.398)*sj4);
IkReal x462=((0.00019196)*cj4);
IkReal x463=(cj5*r20);
IkReal x464=((0.104192)*sj4);
IkReal x465=(cj4*r22);
IkReal x466=(r00*sj5);
IkReal x467=((0.466)*x452);
IkReal x468=((0.00019196)*x455);
IkReal x469=((0.00220324)*x453);
IkReal x470=((0.00057588)*x455);
IkReal x471=((0.00660972)*x453);
IkReal x472=((1.398)*x452);
IkReal x473=((0.00220324)*x456);
IkReal x474=((0.00099756)*x466);
IkReal x475=((0.00099756)*x454);
IkReal x476=((0.104192)*x465);
IkReal x477=(x456*x462);
IkReal x478=(x453*x458);
IkReal x479=(x463*x464);
IkReal x480=(x456*x457);
IkReal x481=(x459*x463);
IkReal x482=(x453*x461);
IkReal x483=(x456*x458);
IkReal x484=(x453*x462);
IkReal x485=(x460*x464);
IkReal x486=(x481+x480+x482+x451+x470+x471+x472);
IkReal x487=(x450+x469+x468+x467+x477+x478+x479);
IkReal x488=(((x456*x461))+((x453*x457))+(((0.00299268)*x454))+(((0.00299268)*x466))+(((0.00660972)*x456))+((x459*x460))+(((0.312576)*x465)));
IkReal x489=(x483+x485+x484+x474+x475+x476+x473);
j1evalpoly[0]=((-0.18799676)+(((-1.0)*x489))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((-0.18800324)+(((-1.0)*x489))+x487))))+(((htj1*htj1)*(((-0.56399676)+(((-1.0)*x488))+x486))))+(((-0.88)*htj1))+(((-1.76)*(htj1*htj1*htj1)))+x487+(((htj1*htj1*htj1*htj1)*(((-0.56400324)+(((-1.0)*x488))+x486))))+(((-0.88)*(htj1*htj1*htj1*htj1*htj1))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x490=(cj4*sj1);
IkReal x491=((1.0)*cj1);
IkReal x492=(sj1*sj4);
IkReal x493=((1.0)*cj5);
IkReal x494=(r21*sj5);
IkReal x495=(cj1*sj4);
IkReal x496=(r01*sj4*sj5);
if( IKabs(((((-1.0)*cj5*r20*sj4*x491))+((cj1*cj4*r22))+((r01*sj5*x492))+((r02*x490))+((x494*x495))+(((-1.0)*r00*x492*x493)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x491*x496))+((r22*x490))+(((-1.0)*r20*x492*x493))+(((-1.0)*cj4*r02*x491))+((cj5*r00*x495))+((x492*x494)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj5*r20*sj4*x491))+((cj1*cj4*r22))+((r01*sj5*x492))+((r02*x490))+((x494*x495))+(((-1.0)*r00*x492*x493))))+IKsqr(((((-1.0)*x491*x496))+((r22*x490))+(((-1.0)*r20*x492*x493))+(((-1.0)*cj4*r02*x491))+((cj5*r00*x495))+((x492*x494))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj5*r20*sj4*x491))+((cj1*cj4*r22))+((r01*sj5*x492))+((r02*x490))+((x494*x495))+(((-1.0)*r00*x492*x493))), ((((-1.0)*x491*x496))+((r22*x490))+(((-1.0)*r20*x492*x493))+(((-1.0)*cj4*r02*x491))+((cj5*r00*x495))+((x492*x494))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x497=IKsin(j2);
IkReal x498=IKcos(j2);
IkReal x499=((0.00024939)*cj5);
IkReal x500=((0.1165)*sj1);
IkReal x501=((1.0)*cj3);
IkReal x502=(r02*sj4);
IkReal x503=(r21*sj5);
IkReal x504=(cj3*cj4);
IkReal x505=(cj5*r00);
IkReal x506=(r01*sj5);
IkReal x507=((1.0)*sj4);
IkReal x508=((4.799e-5)*cj4);
IkReal x509=(cj5*sj3);
IkReal x510=(cj5*r20);
IkReal x511=((0.00024939)*sj5);
IkReal x512=(sj3*sj5);
IkReal x513=((1.0)*cj4);
IkReal x514=(r22*sj4);
IkReal x515=(sj1*x498);
IkReal x516=(cj1*x497);
IkReal x517=(cj1*x498);
IkReal x518=(sj1*x497);
IkReal x519=(x516+x515);
evalcond[0]=((((-1.0)*r22*x513))+((sj4*x510))+(((-1.0)*x503*x507))+x519);
evalcond[1]=((((-1.0)*x506*x507))+(((-1.0)*x517))+x518+(((-1.0)*r02*x513))+((sj4*x505)));
evalcond[2]=((((-1.0)*x501*x502))+((r01*x509))+x519+(((-1.0)*cj4*x501*x505))+((x504*x506))+((r00*x512)));
evalcond[3]=((((-1.0)*x501*x514))+((r21*x509))+(((-1.0)*x518))+((r20*x512))+x517+((x503*x504))+(((-1.0)*cj4*x501*x510)));
evalcond[4]=((((0.00055081)*x510))+(((-0.1165)*x516))+(((-0.026048)*x518))+(((8.1e-7)*sj1))+(((-4.799e-5)*x514))+(((0.11)*cj1))+((r20*x511))+(((-1.0)*pz))+(((0.026048)*x517))+((x503*x508))+((r21*x499))+(((-0.00055081)*x503))+(((-1.0)*x498*x500))+(((-1.0)*x508*x510)));
evalcond[5]=((0.047)+(((-1.0)*x505*x508))+(((-1.0)*x497*x500))+((x506*x508))+(((0.00055081)*x505))+(((-1.0)*px))+(((-8.1e-7)*cj1))+(((0.11)*sj1))+(((0.1165)*x517))+(((0.026048)*x516))+(((0.026048)*x515))+(((-4.799e-5)*x502))+(((-0.00055081)*x506))+((r01*x499))+((r00*x511)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x520=((1.0)*r01);
CheckValue<IkReal> x521=IKPowWithIntegerCheck(IKsign((((r21*sj4*sj5))+((cj4*r22))+(((-1.0)*cj5*r20*sj4)))),-1);
if(!x521.valid){
continue;
}
CheckValue<IkReal> x522 = IKatan2WithCheck(IkReal(((((-1.0)*r00*sj5))+(((-1.0)*cj5*x520)))),IkReal((((r02*sj4))+(((-1.0)*cj4*sj5*x520))+((cj4*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x522.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x521.value)))+(x522.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x523=IKsin(j3);
IkReal x524=IKcos(j3);
IkReal x525=(r10*sj5);
IkReal x526=(cj4*sj5);
IkReal x527=(cj5*r11);
IkReal x528=(cj4*cj5);
IkReal x529=(r12*sj4);
IkReal x530=((1.0)*x524);
IkReal x531=((1.0)*x523);
evalcond[0]=(((r11*x524*x526))+(((-1.0)*x529*x530))+(((-1.0)*r10*x528*x530))+((x523*x525))+((x523*x527)));
evalcond[1]=((((-1.0)*r20*sj5*x530))+(((-1.0)*r20*x528*x531))+(((-1.0)*r22*sj4*x531))+((r21*x523*x526))+(((-1.0)*cj5*r21*x530)));
evalcond[2]=(((r01*x523*x526))+(((-1.0)*r00*x528*x531))+(((-1.0)*cj5*r01*x530))+(((-1.0)*r00*sj5*x530))+(((-1.0)*r02*sj4*x531)));
evalcond[3]=((1.0)+(((-1.0)*x525*x530))+((r11*x523*x526))+(((-1.0)*x527*x530))+(((-1.0)*x529*x531))+(((-1.0)*r10*x528*x531)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=0;
cj0=1.0;
j0=0;
IkReal x532=((12.0)*px);
IkReal x533=((12.0)*pz);
IkReal x534=((0.00057588)*cj4);
IkReal x535=(cj5*r00);
IkReal x536=(r21*sj5);
IkReal x537=(cj4*r02);
IkReal x538=(r01*sj5);
IkReal x539=((1.398)*sj4);
IkReal x540=((0.00099756)*cj5);
IkReal x541=((0.466)*sj4);
IkReal x542=((0.104192)*sj4);
IkReal x543=((0.00019196)*sj4);
IkReal x544=((0.312576)*sj4);
IkReal x545=((0.00299268)*cj5);
IkReal x546=(cj5*r20);
IkReal x547=((0.00019196)*cj4);
IkReal x548=(r20*sj5);
IkReal x549=(cj4*r22);
IkReal x550=(r00*sj5);
IkReal x551=((0.00057588)*sj4);
IkReal x552=(r02*x551);
IkReal x553=((0.00660972)*x538);
IkReal x554=((1.398)*x537);
IkReal x555=(r22*x551);
IkReal x556=((1.398)*x549);
IkReal x557=((0.00660972)*x536);
IkReal x558=((0.312576)*x537);
IkReal x559=(x534*x535);
IkReal x560=(x544*x546);
IkReal x561=(x538*x539);
IkReal x562=(x534*x546);
IkReal x563=(x538*x544);
IkReal x564=(x536*x539);
IkReal x565=(((x539*x546))+((r21*x545))+(((0.00660972)*x546))+((x534*x536))+((x535*x544))+(((0.00299268)*x548)));
IkReal x566=(x559+x553+x552+x554+x532+x560+x561);
IkReal x567=((((0.00660972)*x535))+(((0.312576)*x549))+((x536*x544))+((x534*x538))+((x535*x539))+(((0.00299268)*x550))+((r01*x545)));
IkReal x568=(x558+x557+x556+x555+x533+x564+x562+x563);
j1eval[0]=((3.52002592)+(IKabs(((-0.44)+x568+(((-1.0)*x565)))))+(IKabs(((-0.18800324)+(((0.00220324)*x538))+(((-0.00099756)*x550))+((r02*x543))+(((4.0)*px))+(((0.466)*x537))+((x542*x546))+(((-1.0)*x538*x547))+(((-1.0)*r01*x540))+(((-0.00220324)*x535))+(((-1.0)*x535*x541))+((x535*x547))+((x538*x541))+(((-1.0)*x536*x542))+(((-0.104192)*x549)))))+(IKabs(((0.44)+(((-1.0)*x541*x546))+(((0.00220324)*x536))+(((-0.00099756)*x548))+(((0.466)*x549))+(((4.0)*pz))+((x536*x541))+(((-1.0)*r21*x540))+((r22*x543))+(((-0.00220324)*x546))+(((-1.0)*x535*x542))+((x538*x542))+(((-1.0)*x536*x547))+(((0.104192)*x537))+((x546*x547)))))+(IKabs(((-0.56399676)+x566+(((-1.0)*x567)))))+(IKabs(((-0.56400324)+x566+(((-1.0)*x567)))))+(IKabs(((0.44)+x568+(((-1.0)*x565))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x569=((12.0)*pz);
IkReal x570=((4.0)*pz);
IkReal x571=(r21*sj5);
IkReal x572=((0.00057588)*cj4);
IkReal x573=((1.398)*sj4);
IkReal x574=(cj4*r22);
IkReal x575=(r22*sj4);
IkReal x576=(cj5*r21);
IkReal x577=(cj5*sj4);
IkReal x578=(cj5*r20);
IkReal x579=(cj4*r02);
IkReal x580=(r20*sj5);
IkReal x581=((0.00019196)*cj4);
IkReal x582=((0.00057588)*x575);
IkReal x583=((1.398)*x574);
IkReal x584=((0.00660972)*x571);
IkReal x585=((0.312576)*x579);
IkReal x586=((0.00220324)*x571);
IkReal x587=((0.104192)*x579);
IkReal x588=((0.466)*x574);
IkReal x589=((0.00019196)*x575);
IkReal x590=(r01*sj4*sj5);
IkReal x591=(x572*x578);
IkReal x592=((0.312576)*x590);
IkReal x593=(x571*x573);
IkReal x594=((0.466)*sj4*x571);
IkReal x595=(x578*x581);
IkReal x596=((0.104192)*x590);
IkReal x597=(((x571*x572))+(((0.312576)*r00*x577))+(((0.00660972)*x578))+((x573*x578))+(((0.00299268)*x576))+(((0.00299268)*x580)));
IkReal x598=((((0.466)*r20*x577))+(((0.00099756)*x580))+(((0.104192)*r00*x577))+(((0.00099756)*x576))+((x571*x581))+(((0.00220324)*x578)));
IkReal x599=(x569+x582+x583+x584+x585+x593+x592+x591);
IkReal x600=(x570+x586+x587+x588+x589+x596+x595+x594);
op[0]=((0.44)+(((-1.0)*x598))+x600);
op[1]=-6.48e-6;
op[2]=((0.44)+(((-1.0)*x597))+x599);
op[3]=-1.296e-5;
op[4]=((-0.44)+(((-1.0)*x597))+x599);
op[5]=-6.48e-6;
op[6]=((-0.44)+(((-1.0)*x598))+x600);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x601=((4.0)*px);
IkReal x602=((12.0)*px);
IkReal x603=(cj4*r02);
IkReal x604=(r01*sj5);
IkReal x605=(cj5*r01);
IkReal x606=(r02*sj4);
IkReal x607=(cj5*r00);
IkReal x608=((0.00057588)*cj4);
IkReal x609=((0.466)*sj4);
IkReal x610=((0.312576)*sj4);
IkReal x611=(r21*sj5);
IkReal x612=((1.398)*sj4);
IkReal x613=((0.00019196)*cj4);
IkReal x614=(cj5*r20);
IkReal x615=((0.104192)*sj4);
IkReal x616=(cj4*r22);
IkReal x617=(r00*sj5);
IkReal x618=((0.466)*x603);
IkReal x619=((0.00019196)*x606);
IkReal x620=((0.00220324)*x604);
IkReal x621=((0.00057588)*x606);
IkReal x622=((0.00660972)*x604);
IkReal x623=((1.398)*x603);
IkReal x624=((0.00220324)*x607);
IkReal x625=((0.00099756)*x617);
IkReal x626=((0.00099756)*x605);
IkReal x627=((0.104192)*x616);
IkReal x628=(x607*x613);
IkReal x629=(x604*x609);
IkReal x630=(x614*x615);
IkReal x631=(x607*x608);
IkReal x632=(x610*x614);
IkReal x633=(x604*x612);
IkReal x634=(x607*x609);
IkReal x635=(x604*x613);
IkReal x636=(x611*x615);
IkReal x637=(x602+x621+x623+x622+x632+x633+x631);
IkReal x638=(x601+x618+x619+x620+x629+x628+x630);
IkReal x639=((((0.00660972)*x607))+((x604*x608))+((x607*x612))+((x610*x611))+(((0.312576)*x616))+(((0.00299268)*x605))+(((0.00299268)*x617)));
IkReal x640=(x625+x624+x627+x626+x636+x634+x635);
j1evalpoly[0]=((-0.18799676)+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((-0.18800324)+(((-1.0)*x640))+x638))))+(((-0.88)*htj1))+(((htj1*htj1)*(((-0.56399676)+(((-1.0)*x639))+x637))))+(((-1.0)*x640))+(((-1.76)*(htj1*htj1*htj1)))+x638+(((htj1*htj1*htj1*htj1)*(((-0.56400324)+(((-1.0)*x639))+x637))))+(((-0.88)*(htj1*htj1*htj1*htj1*htj1))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x641=(cj4*sj1);
IkReal x642=((1.0)*cj1);
IkReal x643=(sj1*sj4);
IkReal x644=((1.0)*cj5);
IkReal x645=(r21*sj5);
IkReal x646=(cj1*sj4);
IkReal x647=(r01*sj4*sj5);
if( IKabs((((cj1*cj4*r22))+(((-1.0)*r00*x643*x644))+((r02*x641))+((x645*x646))+((r01*sj5*x643))+(((-1.0)*cj5*r20*sj4*x642)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x642*x647))+((x643*x645))+(((-1.0)*cj4*r02*x642))+((cj5*r00*x646))+((r22*x641))+(((-1.0)*r20*x643*x644)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*cj4*r22))+(((-1.0)*r00*x643*x644))+((r02*x641))+((x645*x646))+((r01*sj5*x643))+(((-1.0)*cj5*r20*sj4*x642))))+IKsqr(((((-1.0)*x642*x647))+((x643*x645))+(((-1.0)*cj4*r02*x642))+((cj5*r00*x646))+((r22*x641))+(((-1.0)*r20*x643*x644))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*cj4*r22))+(((-1.0)*r00*x643*x644))+((r02*x641))+((x645*x646))+((r01*sj5*x643))+(((-1.0)*cj5*r20*sj4*x642))), ((((-1.0)*x642*x647))+((x643*x645))+(((-1.0)*cj4*r02*x642))+((cj5*r00*x646))+((r22*x641))+(((-1.0)*r20*x643*x644))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x648=IKsin(j2);
IkReal x649=IKcos(j2);
IkReal x650=((0.00024939)*cj5);
IkReal x651=((0.1165)*sj1);
IkReal x652=((1.0)*cj3);
IkReal x653=(r02*sj4);
IkReal x654=(r21*sj5);
IkReal x655=(cj3*cj4);
IkReal x656=(cj5*r00);
IkReal x657=(r01*sj5);
IkReal x658=((1.0)*sj4);
IkReal x659=((4.799e-5)*cj4);
IkReal x660=(cj5*sj3);
IkReal x661=(cj5*r20);
IkReal x662=((0.00024939)*sj5);
IkReal x663=(sj3*sj5);
IkReal x664=((1.0)*cj4);
IkReal x665=(r22*sj4);
IkReal x666=(sj1*x649);
IkReal x667=(cj1*x648);
IkReal x668=(cj1*x649);
IkReal x669=(sj1*x648);
IkReal x670=(x667+x666);
evalcond[0]=((((-1.0)*r22*x664))+((sj4*x661))+x670+(((-1.0)*x654*x658)));
evalcond[1]=(((sj4*x656))+(((-1.0)*x657*x658))+(((-1.0)*x668))+x669+(((-1.0)*r02*x664)));
evalcond[2]=(((r01*x660))+((r00*x663))+(((-1.0)*cj4*x652*x656))+x670+((x655*x657))+(((-1.0)*x652*x653)));
evalcond[3]=(((r20*x663))+((x654*x655))+((r21*x660))+(((-1.0)*cj4*x652*x661))+(((-1.0)*x669))+x668+(((-1.0)*x652*x665)));
evalcond[4]=(((r20*x662))+(((0.00055081)*x661))+(((-0.00055081)*x654))+(((8.1e-7)*sj1))+(((-1.0)*x659*x661))+(((-0.1165)*x667))+(((0.11)*cj1))+((x654*x659))+(((0.026048)*x668))+(((-1.0)*pz))+(((-4.799e-5)*x665))+(((-1.0)*x649*x651))+((r21*x650))+(((-0.026048)*x669)));
evalcond[5]=((0.047)+(((-0.00055081)*x657))+((r00*x662))+(((-4.799e-5)*x653))+(((0.00055081)*x656))+(((-1.0)*x656*x659))+(((0.026048)*x667))+(((0.026048)*x666))+(((-1.0)*px))+(((-8.1e-7)*cj1))+(((0.11)*sj1))+((x657*x659))+(((-1.0)*x648*x651))+((r01*x650))+(((0.1165)*x668)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x671=((1.0)*sj5);
IkReal x672=((1.0)*cj5);
IkReal x673=(((r01*sj4*sj5))+(((-1.0)*r00*sj4*x672))+((cj4*r02)));
j3eval[0]=x673;
j3eval[1]=IKsign(x673);
j3eval[2]=((IKabs((((r22*sj4))+((cj4*cj5*r20))+(((-1.0)*cj4*r21*x671)))))+(IKabs(((((-1.0)*r21*x672))+(((-1.0)*r20*x671))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x674=((1.0)*r01);
IkReal x675=((1.0)*sj5);
IkReal x676=(((cj5*r20*sj4))+(((-1.0)*cj4*r22))+(((-1.0)*r21*sj4*x675)));
j3eval[0]=x676;
j3eval[1]=((IKabs(((((-1.0)*cj4*sj5*x674))+((r02*sj4))+((cj4*cj5*r00)))))+(IKabs(((((-1.0)*cj5*x674))+(((-1.0)*r00*x675))))));
j3eval[2]=IKsign(x676);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x677=cj4*cj4;
IkReal x678=r10*r10;
IkReal x679=cj5*cj5;
IkReal x680=r11*r11;
IkReal x681=r12*r12;
IkReal x682=(r11*sj5);
IkReal x683=((1.0)*r10);
IkReal x684=(r12*sj4);
IkReal x685=((1.0)*x677);
IkReal x686=((2.0)*cj5*r10);
IkReal x687=(x679*x680);
IkReal x688=(x678*x679);
IkReal x689=((((-1.0)*x685*x687))+(((-1.0)*x681*x685))+(((-1.0)*x677*x682*x686))+((x682*x686))+((x677*x688))+((x677*x680))+((cj4*x684*x686))+x678+x681+x687+(((-2.0)*cj4*x682*x684))+(((-1.0)*x688)));
j3eval[0]=x689;
j3eval[1]=IKsign(x689);
j3eval[2]=((IKabs((((cj4*x682))+(((-1.0)*cj4*cj5*x683))+(((-1.0)*x684)))))+(IKabs(((((-1.0)*cj5*r11))+(((-1.0)*sj5*x683))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x690=cj4*cj4;
IkReal x691=r10*r10;
IkReal x692=cj5*cj5;
IkReal x693=r11*r11;
IkReal x694=r12*r12;
IkReal x695=(r11*sj5);
IkReal x696=((1.0)*cj5);
IkReal x697=(r12*sj4);
IkReal x698=((1.0)*x690);
IkReal x699=((2.0)*cj5*r10);
IkReal x700=(x692*x693);
IkReal x701=(x691*x692);
CheckValue<IkReal> x702 = IKatan2WithCheck(IkReal((((cj4*x695))+(((-1.0)*cj4*r10*x696))+(((-1.0)*x697)))),IkReal(((((-1.0)*r10*sj5))+(((-1.0)*r11*x696)))),IKFAST_ATAN2_MAGTHRESH);
if(!x702.valid){
continue;
}
CheckValue<IkReal> x703=IKPowWithIntegerCheck(IKsign((((x695*x699))+((x690*x693))+((x690*x701))+(((-1.0)*x701))+(((-1.0)*x690*x695*x699))+x694+x691+(((-1.0)*x694*x698))+x700+(((-1.0)*x698*x700))+(((-2.0)*cj4*x695*x697))+((cj4*x697*x699)))),-1);
if(!x703.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x702.value)+(((1.5707963267949)*(x703.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x704=IKsin(j3);
IkReal x705=IKcos(j3);
IkReal x706=(r10*sj5);
IkReal x707=(cj4*sj5);
IkReal x708=(cj5*r11);
IkReal x709=(cj4*cj5);
IkReal x710=(r12*sj4);
IkReal x711=((1.0)*x705);
IkReal x712=((1.0)*x704);
evalcond[0]=((((-1.0)*x710*x711))+((r11*x705*x707))+((x704*x708))+((x704*x706))+(((-1.0)*r10*x709*x711)));
evalcond[1]=((((-1.0)*cj5*r21*x711))+((r21*x704*x707))+(((-1.0)*r22*sj4*x712))+(((-1.0)*r20*x709*x712))+(((-1.0)*r20*sj5*x711)));
evalcond[2]=((((-1.0)*r00*sj5*x711))+(((-1.0)*r00*x709*x712))+(((-1.0)*r02*sj4*x712))+(((-1.0)*cj5*r01*x711))+((r01*x704*x707)));
evalcond[3]=((-1.0)+(((-1.0)*x706*x711))+(((-1.0)*x710*x712))+((r11*x704*x707))+(((-1.0)*x708*x711))+(((-1.0)*r10*x709*x712)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
j1eval[0]=((1.0)+(((19290.1234567901)*(IKabs(((-0.44)+(((0.466)*cj5*r20*sj4))+(((0.00019196)*cj4*r21*sj5))+(((0.104192)*cj4*r02))+(((-0.00220324)*r21*sj5))+(((-0.104192)*cj5*r00*sj4))+(((-0.00019196)*cj4*cj5*r20))+(((0.00220324)*cj5*r20))+(((-0.466)*cj4*r22))+(((-0.466)*r21*sj4*sj5))+(((-4.0)*pz))+(((0.104192)*r01*sj4*sj5))+(((0.00099756)*cj5*r21))+(((0.00099756)*r20*sj5))+(((-0.00019196)*r22*sj4)))))))+(((19290.1234567901)*(IKabs(((-0.44)+(((-0.312576)*cj5*r00*sj4))+(((-1.398)*r21*sj4*sj5))+(((-1.398)*cj4*r22))+(((-12.0)*pz))+(((0.312576)*r01*sj4*sj5))+(((-0.00660972)*r21*sj5))+(((-0.00057588)*r22*sj4))+(((-0.00057588)*cj4*cj5*r20))+(((0.00299268)*r20*sj5))+(((0.00299268)*cj5*r21))+(((1.398)*cj5*r20*sj4))+(((0.00057588)*cj4*r21*sj5))+(((0.00660972)*cj5*r20))+(((0.312576)*cj4*r02)))))))+(((19290.1234567901)*(IKabs(((-0.44)+(((0.00057588)*cj4*cj5*r20))+(((-1.398)*cj5*r20*sj4))+(((-0.00299268)*cj5*r21))+(((12.0)*pz))+(((-0.00660972)*cj5*r20))+(((-0.00057588)*cj4*r21*sj5))+(((0.312576)*r20*sj3*sj5))+(((0.312576)*cj5*r21*sj3))+(((-0.312576)*cj3*cj4*cj5*r20))+(((0.00057588)*r22*sj4))+(((1.398)*cj4*r22))+(((-0.00299268)*r20*sj5))+(((0.312576)*cj3*cj4*r21*sj5))+(((0.00660972)*r21*sj5))+(((1.398)*r21*sj4*sj5))+(((-0.312576)*cj3*r22*sj4)))))))+(((19290.1234567901)*(IKabs(((0.44)+(((0.00220324)*r21*sj5))+(((-0.00220324)*cj5*r20))+(((4.0)*pz))+(((0.104192)*cj3*cj4*r21*sj5))+(((-0.00099756)*r20*sj5))+(((0.466)*cj4*r22))+(((0.104192)*cj5*r21*sj3))+(((0.466)*r21*sj4*sj5))+(((-0.104192)*cj3*r22*sj4))+(((-0.00099756)*cj5*r21))+(((-0.466)*cj5*r20*sj4))+(((0.00019196)*cj4*cj5*r20))+(((-0.00019196)*cj4*r21*sj5))+(((0.00019196)*r22*sj4))+(((0.104192)*r20*sj3*sj5))+(((-0.104192)*cj3*cj4*cj5*r20)))))))+(((19290.1234567901)*(IKabs(((0.44)+(((-0.312576)*cj5*r00*sj4))+(((-1.398)*r21*sj4*sj5))+(((-1.398)*cj4*r22))+(((-12.0)*pz))+(((0.312576)*r01*sj4*sj5))+(((-0.00660972)*r21*sj5))+(((-0.00057588)*r22*sj4))+(((-0.00057588)*cj4*cj5*r20))+(((0.00299268)*r20*sj5))+(((0.00299268)*cj5*r21))+(((1.398)*cj5*r20*sj4))+(((0.00057588)*cj4*r21*sj5))+(((0.00660972)*cj5*r20))+(((0.312576)*cj4*r02)))))))+(((19290.1234567901)*(IKabs(((0.44)+(((0.00057588)*cj4*cj5*r20))+(((-1.398)*cj5*r20*sj4))+(((-0.00299268)*cj5*r21))+(((12.0)*pz))+(((-0.00660972)*cj5*r20))+(((-0.00057588)*cj4*r21*sj5))+(((0.312576)*r20*sj3*sj5))+(((0.312576)*cj5*r21*sj3))+(((-0.312576)*cj3*cj4*cj5*r20))+(((0.00057588)*r22*sj4))+(((1.398)*cj4*r22))+(((-0.00299268)*r20*sj5))+(((0.312576)*cj3*cj4*r21*sj5))+(((0.00660972)*r21*sj5))+(((1.398)*r21*sj4*sj5))+(((-0.312576)*cj3*r22*sj4))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x713=(r21*sj5);
IkReal x714=((0.00057588)*cj4);
IkReal x715=((1.398)*sj4);
IkReal x716=(cj4*r02);
IkReal x717=(r22*sj4);
IkReal x718=(cj5*r21);
IkReal x719=(cj5*sj4);
IkReal x720=(cj5*r20);
IkReal x721=((0.00019196)*cj4);
IkReal x722=(r20*sj5);
IkReal x723=(cj4*r22);
IkReal x724=((0.00299268)*x722);
IkReal x725=((0.00299268)*x718);
IkReal x726=((0.00660972)*x720);
IkReal x727=((0.312576)*x716);
IkReal x728=((0.104192)*x716);
IkReal x729=((0.00220324)*x720);
IkReal x730=((0.00099756)*x718);
IkReal x731=((0.00099756)*x722);
IkReal x732=(r01*sj4*sj5);
IkReal x733=((0.312576)*x732);
IkReal x734=(x715*x720);
IkReal x735=(x713*x714);
IkReal x736=((0.466)*r20*x719);
IkReal x737=(x713*x721);
IkReal x738=((0.104192)*x732);
IkReal x739=((((12.0)*pz))+(((0.312576)*r00*x719))+(((1.398)*x723))+(((0.00057588)*x717))+(((0.00660972)*x713))+((x713*x715))+((x714*x720)));
IkReal x740=((((0.00019196)*x717))+((x720*x721))+(((4.0)*pz))+(((0.104192)*r00*x719))+(((0.466)*x723))+(((0.466)*sj4*x713))+(((0.00220324)*x713)));
IkReal x741=(x735+x734+x733+x724+x725+x726+x727);
IkReal x742=(x737+x736+x731+x730+x738+x728+x729);
op[0]=((-0.44)+x742+(((-1.0)*x740)));
op[1]=6.48e-6;
op[2]=((-0.44)+(((-1.0)*x739))+x741);
op[3]=1.296e-5;
op[4]=((0.44)+(((-1.0)*x739))+x741);
op[5]=6.48e-6;
op[6]=((0.44)+x742+(((-1.0)*x740)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x743=((4.0)*pz);
IkReal x744=((12.0)*pz);
IkReal x745=(r21*sj5);
IkReal x746=((0.00057588)*cj4);
IkReal x747=((0.312576)*cj5);
IkReal x748=(cj3*cj4);
IkReal x749=((1.398)*sj4);
IkReal x750=(cj5*r21);
IkReal x751=(r22*sj4);
IkReal x752=(cj5*r20);
IkReal x753=((0.466)*sj4);
IkReal x754=(r20*sj5);
IkReal x755=(cj4*r22);
IkReal x756=((0.00019196)*cj4);
IkReal x757=((0.104192)*sj3);
IkReal x758=((0.00220324)*x745);
IkReal x759=((0.466)*x755);
IkReal x760=((0.00019196)*x751);
IkReal x761=((0.00057588)*x751);
IkReal x762=((1.398)*x755);
IkReal x763=((0.00660972)*x745);
IkReal x764=((0.00220324)*x752);
IkReal x765=((0.00099756)*x750);
IkReal x766=((0.00099756)*x754);
IkReal x767=(x750*x757);
IkReal x768=(x745*x753);
IkReal x769=(x752*x756);
IkReal x770=(x746*x752);
IkReal x771=((0.312576)*sj3*x754);
IkReal x772=(r21*sj3*x747);
IkReal x773=(x745*x749);
IkReal x774=(x754*x757);
IkReal x775=(x752*x753);
IkReal x776=(x745*x756);
IkReal x777=((0.104192)*cj3*x751);
IkReal x778=((0.104192)*x745*x748);
IkReal x779=((0.312576)*x745*x748);
IkReal x780=((0.104192)*x748*x752);
IkReal x781=((((0.00660972)*x752))+((r20*x747*x748))+((x745*x746))+(((0.00299268)*x750))+(((0.00299268)*x754))+(((0.312576)*cj3*x751))+((x749*x752)));
IkReal x782=(x777+x776+x775+x764+x765+x766+x780);
IkReal x783=(x744+x773+x772+x771+x770+x779+x761+x762+x763);
IkReal x784=(x759+x758+x743+x774+x778+x768+x769+x767+x760);
j1evalpoly[0]=((-0.44)+(((-6.48e-6)*htj1))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.44)+(((-1.0)*x782))+x784))))+(((-1.0)*x782))+(((htj1*htj1*htj1*htj1)*(((0.44)+(((-1.0)*x781))+x783))))+(((-6.48e-6)*(htj1*htj1*htj1*htj1*htj1)))+(((-1.296e-5)*(htj1*htj1*htj1)))+x784+(((htj1*htj1)*(((-0.44)+(((-1.0)*x781))+x783)))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x785=(cj4*r22);
IkReal x786=(sj4*sj5);
IkReal x787=((1.0)*r20);
IkReal x788=(cj4*r02);
IkReal x789=((1.0)*sj1);
IkReal x790=(cj5*sj1*sj4);
IkReal x791=(cj1*cj5*sj4);
if( IKabs((((r00*x790))+((cj1*r21*x786))+(((-1.0)*r01*x786*x789))+((cj1*x785))+(((-1.0)*x788*x789))+(((-1.0)*x787*x791)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r01*x786))+((cj1*x788))+(((-1.0)*r00*x791))+((sj1*x785))+(((-1.0)*x787*x790))+((r21*sj1*x786)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x790))+((cj1*r21*x786))+(((-1.0)*r01*x786*x789))+((cj1*x785))+(((-1.0)*x788*x789))+(((-1.0)*x787*x791))))+IKsqr((((cj1*r01*x786))+((cj1*x788))+(((-1.0)*r00*x791))+((sj1*x785))+(((-1.0)*x787*x790))+((r21*sj1*x786))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r00*x790))+((cj1*r21*x786))+(((-1.0)*r01*x786*x789))+((cj1*x785))+(((-1.0)*x788*x789))+(((-1.0)*x787*x791))), (((cj1*r01*x786))+((cj1*x788))+(((-1.0)*r00*x791))+((sj1*x785))+(((-1.0)*x787*x790))+((r21*sj1*x786))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x792=IKcos(j2);
IkReal x793=IKsin(j2);
IkReal x794=((0.00024939)*cj5);
IkReal x795=((1.0)*cj3);
IkReal x796=(r02*sj4);
IkReal x797=(r21*sj5);
IkReal x798=(cj3*cj4);
IkReal x799=(cj5*r00);
IkReal x800=(r01*sj5);
IkReal x801=((1.0)*sj4);
IkReal x802=((4.799e-5)*cj4);
IkReal x803=(cj5*sj3);
IkReal x804=(cj5*r20);
IkReal x805=((0.00024939)*sj5);
IkReal x806=(sj3*sj5);
IkReal x807=((1.0)*cj4);
IkReal x808=(r22*sj4);
IkReal x809=(cj1*x792);
IkReal x810=(cj1*x793);
IkReal x811=(sj1*x792);
IkReal x812=(sj1*x793);
IkReal x813=((1.0)*x812);
evalcond[0]=((((-1.0)*x797*x801))+(((-1.0)*r22*x807))+((sj4*x804))+x810+x811);
evalcond[1]=((((-1.0)*r02*x807))+(((-1.0)*x813))+((sj4*x799))+(((-1.0)*x800*x801))+x809);
evalcond[2]=((((-1.0)*cj4*x795*x804))+((r21*x803))+(((-1.0)*x813))+(((-1.0)*x795*x808))+((r20*x806))+x809+((x797*x798)));
evalcond[3]=((((-1.0)*x795*x796))+(((-1.0)*x810))+(((-1.0)*x811))+((x798*x800))+((r01*x803))+((r00*x806))+(((-1.0)*cj4*x795*x799)));
evalcond[4]=((((-0.00055081)*x797))+(((8.1e-7)*sj1))+(((0.00055081)*x804))+(((0.11)*cj1))+((x797*x802))+((r21*x794))+(((-1.0)*pz))+(((-4.799e-5)*x808))+(((-0.1165)*x811))+(((-0.1165)*x810))+((r20*x805))+(((-0.026048)*x812))+(((0.026048)*x809))+(((-1.0)*x802*x804)));
evalcond[5]=((-0.047)+((r01*x794))+(((-0.1165)*x809))+(((-0.11)*sj1))+(((0.00055081)*x799))+(((8.1e-7)*cj1))+(((-1.0)*x799*x802))+((x800*x802))+(((-1.0)*px))+(((-0.00055081)*x800))+(((-0.026048)*x811))+(((-0.026048)*x810))+(((0.1165)*x812))+((r00*x805))+(((-4.799e-5)*x796)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x814=((1.0)*r01);
IkReal x815=((1.0)*sj5);
CheckValue<IkReal> x816 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x814))+(((-1.0)*r00*x815)))),IkReal((((r02*sj4))+((cj4*cj5*r00))+(((-1.0)*cj4*sj5*x814)))),IKFAST_ATAN2_MAGTHRESH);
if(!x816.valid){
continue;
}
CheckValue<IkReal> x817=IKPowWithIntegerCheck(IKsign((((cj5*r20*sj4))+(((-1.0)*cj4*r22))+(((-1.0)*r21*sj4*x815)))),-1);
if(!x817.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x816.value)+(((1.5707963267949)*(x817.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x818=IKsin(j3);
IkReal x819=IKcos(j3);
IkReal x820=(r10*sj5);
IkReal x821=(cj4*sj5);
IkReal x822=(cj5*r11);
IkReal x823=(cj4*cj5);
IkReal x824=(r12*sj4);
IkReal x825=((1.0)*x819);
IkReal x826=((1.0)*x818);
evalcond[0]=(((r11*x819*x821))+(((-1.0)*r10*x823*x825))+(((-1.0)*x824*x825))+((x818*x820))+((x818*x822)));
evalcond[1]=((((-1.0)*r22*sj4*x826))+(((-1.0)*r20*x823*x826))+((r21*x818*x821))+(((-1.0)*cj5*r21*x825))+(((-1.0)*r20*sj5*x825)));
evalcond[2]=((((-1.0)*r00*x823*x826))+(((-1.0)*r00*sj5*x825))+(((-1.0)*cj5*r01*x825))+((r01*x818*x821))+(((-1.0)*r02*sj4*x826)));
evalcond[3]=((-1.0)+(((-1.0)*x822*x825))+((r11*x818*x821))+(((-1.0)*r10*x823*x826))+(((-1.0)*x824*x826))+(((-1.0)*x820*x825)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
j1eval[0]=((1.0)+(((19290.1234567901)*(IKabs(((-0.44)+(((0.466)*cj5*r20*sj4))+(((0.00019196)*cj4*r21*sj5))+(((0.104192)*cj4*r02))+(((-0.00220324)*r21*sj5))+(((-0.104192)*cj5*r00*sj4))+(((-0.00019196)*cj4*cj5*r20))+(((0.00220324)*cj5*r20))+(((-0.466)*cj4*r22))+(((-0.466)*r21*sj4*sj5))+(((-4.0)*pz))+(((0.104192)*r01*sj4*sj5))+(((0.00099756)*cj5*r21))+(((0.00099756)*r20*sj5))+(((-0.00019196)*r22*sj4)))))))+(((19290.1234567901)*(IKabs(((-0.44)+(((-0.312576)*cj5*r00*sj4))+(((-1.398)*r21*sj4*sj5))+(((-1.398)*cj4*r22))+(((-12.0)*pz))+(((0.312576)*r01*sj4*sj5))+(((-0.00660972)*r21*sj5))+(((-0.00057588)*r22*sj4))+(((-0.00057588)*cj4*cj5*r20))+(((0.00299268)*r20*sj5))+(((0.00299268)*cj5*r21))+(((1.398)*cj5*r20*sj4))+(((0.00057588)*cj4*r21*sj5))+(((0.00660972)*cj5*r20))+(((0.312576)*cj4*r02)))))))+(((19290.1234567901)*(IKabs(((-0.44)+(((0.00057588)*cj4*cj5*r20))+(((-1.398)*cj5*r20*sj4))+(((-0.00299268)*cj5*r21))+(((12.0)*pz))+(((-0.00660972)*cj5*r20))+(((-0.00057588)*cj4*r21*sj5))+(((0.312576)*r20*sj3*sj5))+(((0.312576)*cj5*r21*sj3))+(((-0.312576)*cj3*cj4*cj5*r20))+(((0.00057588)*r22*sj4))+(((1.398)*cj4*r22))+(((-0.00299268)*r20*sj5))+(((0.312576)*cj3*cj4*r21*sj5))+(((0.00660972)*r21*sj5))+(((1.398)*r21*sj4*sj5))+(((-0.312576)*cj3*r22*sj4)))))))+(((19290.1234567901)*(IKabs(((0.44)+(((0.00220324)*r21*sj5))+(((-0.00220324)*cj5*r20))+(((4.0)*pz))+(((0.104192)*cj3*cj4*r21*sj5))+(((-0.00099756)*r20*sj5))+(((0.466)*cj4*r22))+(((0.104192)*cj5*r21*sj3))+(((0.466)*r21*sj4*sj5))+(((-0.104192)*cj3*r22*sj4))+(((-0.00099756)*cj5*r21))+(((-0.466)*cj5*r20*sj4))+(((0.00019196)*cj4*cj5*r20))+(((-0.00019196)*cj4*r21*sj5))+(((0.00019196)*r22*sj4))+(((0.104192)*r20*sj3*sj5))+(((-0.104192)*cj3*cj4*cj5*r20)))))))+(((19290.1234567901)*(IKabs(((0.44)+(((-0.312576)*cj5*r00*sj4))+(((-1.398)*r21*sj4*sj5))+(((-1.398)*cj4*r22))+(((-12.0)*pz))+(((0.312576)*r01*sj4*sj5))+(((-0.00660972)*r21*sj5))+(((-0.00057588)*r22*sj4))+(((-0.00057588)*cj4*cj5*r20))+(((0.00299268)*r20*sj5))+(((0.00299268)*cj5*r21))+(((1.398)*cj5*r20*sj4))+(((0.00057588)*cj4*r21*sj5))+(((0.00660972)*cj5*r20))+(((0.312576)*cj4*r02)))))))+(((19290.1234567901)*(IKabs(((0.44)+(((0.00057588)*cj4*cj5*r20))+(((-1.398)*cj5*r20*sj4))+(((-0.00299268)*cj5*r21))+(((12.0)*pz))+(((-0.00660972)*cj5*r20))+(((-0.00057588)*cj4*r21*sj5))+(((0.312576)*r20*sj3*sj5))+(((0.312576)*cj5*r21*sj3))+(((-0.312576)*cj3*cj4*cj5*r20))+(((0.00057588)*r22*sj4))+(((1.398)*cj4*r22))+(((-0.00299268)*r20*sj5))+(((0.312576)*cj3*cj4*r21*sj5))+(((0.00660972)*r21*sj5))+(((1.398)*r21*sj4*sj5))+(((-0.312576)*cj3*r22*sj4))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x827=(r21*sj5);
IkReal x828=((0.00057588)*cj4);
IkReal x829=((1.398)*sj4);
IkReal x830=(cj4*r02);
IkReal x831=(r22*sj4);
IkReal x832=(cj5*r21);
IkReal x833=(cj5*sj4);
IkReal x834=(cj5*r20);
IkReal x835=((0.00019196)*cj4);
IkReal x836=(r20*sj5);
IkReal x837=(cj4*r22);
IkReal x838=((0.00299268)*x836);
IkReal x839=((0.00299268)*x832);
IkReal x840=((0.00660972)*x834);
IkReal x841=((0.312576)*x830);
IkReal x842=((0.104192)*x830);
IkReal x843=((0.00220324)*x834);
IkReal x844=((0.00099756)*x832);
IkReal x845=((0.00099756)*x836);
IkReal x846=(r01*sj4*sj5);
IkReal x847=((0.312576)*x846);
IkReal x848=(x829*x834);
IkReal x849=(x827*x828);
IkReal x850=((0.466)*r20*x833);
IkReal x851=(x827*x835);
IkReal x852=((0.104192)*x846);
IkReal x853=((((12.0)*pz))+(((0.00660972)*x827))+(((0.312576)*r00*x833))+(((1.398)*x837))+(((0.00057588)*x831))+((x828*x834))+((x827*x829)));
IkReal x854=((((4.0)*pz))+(((0.466)*sj4*x827))+(((0.00019196)*x831))+(((0.00220324)*x827))+((x834*x835))+(((0.466)*x837))+(((0.104192)*r00*x833)));
IkReal x855=(x838+x839+x841+x840+x847+x849+x848);
IkReal x856=(x852+x850+x851+x843+x842+x845+x844);
op[0]=((-0.44)+(((-1.0)*x854))+x856);
op[1]=6.48e-6;
op[2]=((-0.44)+(((-1.0)*x853))+x855);
op[3]=1.296e-5;
op[4]=((0.44)+(((-1.0)*x853))+x855);
op[5]=6.48e-6;
op[6]=((0.44)+(((-1.0)*x854))+x856);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x857=((4.0)*pz);
IkReal x858=((12.0)*pz);
IkReal x859=(r21*sj5);
IkReal x860=((0.00057588)*cj4);
IkReal x861=((0.312576)*cj5);
IkReal x862=(cj3*cj4);
IkReal x863=((1.398)*sj4);
IkReal x864=(cj5*r21);
IkReal x865=(r22*sj4);
IkReal x866=(cj5*r20);
IkReal x867=((0.466)*sj4);
IkReal x868=(r20*sj5);
IkReal x869=(cj4*r22);
IkReal x870=((0.00019196)*cj4);
IkReal x871=((0.104192)*sj3);
IkReal x872=((0.00220324)*x859);
IkReal x873=((0.466)*x869);
IkReal x874=((0.00019196)*x865);
IkReal x875=((0.00057588)*x865);
IkReal x876=((1.398)*x869);
IkReal x877=((0.00660972)*x859);
IkReal x878=((0.00220324)*x866);
IkReal x879=((0.00099756)*x864);
IkReal x880=((0.00099756)*x868);
IkReal x881=(x864*x871);
IkReal x882=(x859*x867);
IkReal x883=(x866*x870);
IkReal x884=(x860*x866);
IkReal x885=((0.312576)*sj3*x868);
IkReal x886=(r21*sj3*x861);
IkReal x887=(x859*x863);
IkReal x888=(x868*x871);
IkReal x889=(x866*x867);
IkReal x890=(x859*x870);
IkReal x891=((0.104192)*cj3*x865);
IkReal x892=((0.104192)*x859*x862);
IkReal x893=((0.312576)*x859*x862);
IkReal x894=((0.104192)*x862*x866);
IkReal x895=(((r20*x861*x862))+(((0.00660972)*x866))+((x863*x866))+((x859*x860))+(((0.312576)*cj3*x865))+(((0.00299268)*x864))+(((0.00299268)*x868)));
IkReal x896=(x878+x879+x880+x889+x894+x890+x891);
IkReal x897=(x858+x875+x876+x877+x885+x884+x887+x886+x893);
IkReal x898=(x857+x872+x873+x874+x881+x883+x882+x888+x892);
j1evalpoly[0]=((-0.44)+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.44)+(((-1.0)*x896))+x898))))+(((-6.48e-6)*htj1))+(((-6.48e-6)*(htj1*htj1*htj1*htj1*htj1)))+(((-1.0)*x896))+(((-1.296e-5)*(htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1)*(((0.44)+(((-1.0)*x895))+x897))))+x898+(((htj1*htj1)*(((-0.44)+(((-1.0)*x895))+x897)))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x899=(cj4*r22);
IkReal x900=(sj4*sj5);
IkReal x901=((1.0)*r20);
IkReal x902=(cj4*r02);
IkReal x903=((1.0)*sj1);
IkReal x904=(cj5*sj1*sj4);
IkReal x905=(cj1*cj5*sj4);
if( IKabs((((r00*x904))+(((-1.0)*x902*x903))+(((-1.0)*r01*x900*x903))+((cj1*r21*x900))+(((-1.0)*x901*x905))+((cj1*x899)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x902))+((sj1*x899))+(((-1.0)*r00*x905))+((cj1*r01*x900))+((r21*sj1*x900))+(((-1.0)*x901*x904)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x904))+(((-1.0)*x902*x903))+(((-1.0)*r01*x900*x903))+((cj1*r21*x900))+(((-1.0)*x901*x905))+((cj1*x899))))+IKsqr((((cj1*x902))+((sj1*x899))+(((-1.0)*r00*x905))+((cj1*r01*x900))+((r21*sj1*x900))+(((-1.0)*x901*x904))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r00*x904))+(((-1.0)*x902*x903))+(((-1.0)*r01*x900*x903))+((cj1*r21*x900))+(((-1.0)*x901*x905))+((cj1*x899))), (((cj1*x902))+((sj1*x899))+(((-1.0)*r00*x905))+((cj1*r01*x900))+((r21*sj1*x900))+(((-1.0)*x901*x904))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x906=IKcos(j2);
IkReal x907=IKsin(j2);
IkReal x908=((0.00024939)*cj5);
IkReal x909=((1.0)*cj3);
IkReal x910=(r02*sj4);
IkReal x911=(r21*sj5);
IkReal x912=(cj3*cj4);
IkReal x913=(cj5*r00);
IkReal x914=(r01*sj5);
IkReal x915=((1.0)*sj4);
IkReal x916=((4.799e-5)*cj4);
IkReal x917=(cj5*sj3);
IkReal x918=(cj5*r20);
IkReal x919=((0.00024939)*sj5);
IkReal x920=(sj3*sj5);
IkReal x921=((1.0)*cj4);
IkReal x922=(r22*sj4);
IkReal x923=(cj1*x906);
IkReal x924=(cj1*x907);
IkReal x925=(sj1*x906);
IkReal x926=(sj1*x907);
IkReal x927=((1.0)*x926);
evalcond[0]=((((-1.0)*r22*x921))+x924+x925+(((-1.0)*x911*x915))+((sj4*x918)));
evalcond[1]=((((-1.0)*x927))+(((-1.0)*r02*x921))+(((-1.0)*x914*x915))+x923+((sj4*x913)));
evalcond[2]=((((-1.0)*x927))+((x911*x912))+(((-1.0)*x909*x922))+((r20*x920))+((r21*x917))+(((-1.0)*cj4*x909*x918))+x923);
evalcond[3]=((((-1.0)*x925))+(((-1.0)*x924))+((x912*x914))+((r00*x920))+(((-1.0)*cj4*x909*x913))+((r01*x917))+(((-1.0)*x909*x910)));
evalcond[4]=(((r21*x908))+(((-4.799e-5)*x922))+(((8.1e-7)*sj1))+((r20*x919))+(((0.026048)*x923))+(((0.11)*cj1))+((x911*x916))+(((-1.0)*pz))+(((-0.1165)*x924))+(((-0.1165)*x925))+(((-0.00055081)*x911))+(((0.00055081)*x918))+(((-0.026048)*x926))+(((-1.0)*x916*x918)));
evalcond[5]=((-0.047)+(((-1.0)*x913*x916))+((r01*x908))+(((-0.11)*sj1))+(((8.1e-7)*cj1))+((x914*x916))+(((-1.0)*px))+(((-4.799e-5)*x910))+(((-0.1165)*x923))+(((0.1165)*x926))+(((-0.00055081)*x914))+(((0.00055081)*x913))+(((-0.026048)*x925))+(((-0.026048)*x924))+((r00*x919)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x928=((1.0)*cj5);
IkReal x929=((1.0)*sj5);
CheckValue<IkReal> x930 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x928))+(((-1.0)*r20*x929)))),IkReal((((r22*sj4))+((cj4*cj5*r20))+(((-1.0)*cj4*r21*x929)))),IKFAST_ATAN2_MAGTHRESH);
if(!x930.valid){
continue;
}
CheckValue<IkReal> x931=IKPowWithIntegerCheck(IKsign((((r01*sj4*sj5))+(((-1.0)*r00*sj4*x928))+((cj4*r02)))),-1);
if(!x931.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x930.value)+(((1.5707963267949)*(x931.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x932=IKsin(j3);
IkReal x933=IKcos(j3);
IkReal x934=(r10*sj5);
IkReal x935=(cj4*sj5);
IkReal x936=(cj5*r11);
IkReal x937=(cj4*cj5);
IkReal x938=(r12*sj4);
IkReal x939=((1.0)*x933);
IkReal x940=((1.0)*x932);
evalcond[0]=((((-1.0)*r10*x937*x939))+((r11*x933*x935))+(((-1.0)*x938*x939))+((x932*x936))+((x932*x934)));
evalcond[1]=((((-1.0)*r22*sj4*x940))+(((-1.0)*cj5*r21*x939))+((r21*x932*x935))+(((-1.0)*r20*sj5*x939))+(((-1.0)*r20*x937*x940)));
evalcond[2]=((((-1.0)*r00*sj5*x939))+(((-1.0)*cj5*r01*x939))+((r01*x932*x935))+(((-1.0)*r02*sj4*x940))+(((-1.0)*r00*x937*x940)));
evalcond[3]=((-1.0)+(((-1.0)*x938*x940))+(((-1.0)*r10*x937*x940))+(((-1.0)*x934*x939))+((r11*x932*x935))+(((-1.0)*x936*x939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
j1eval[0]=((1.0)+(((19290.1234567901)*(IKabs(((-0.44)+(((0.466)*cj5*r20*sj4))+(((0.00019196)*cj4*r21*sj5))+(((0.104192)*cj4*r02))+(((-0.00220324)*r21*sj5))+(((-0.104192)*cj5*r00*sj4))+(((-0.00019196)*cj4*cj5*r20))+(((0.00220324)*cj5*r20))+(((-0.466)*cj4*r22))+(((-0.466)*r21*sj4*sj5))+(((-4.0)*pz))+(((0.104192)*r01*sj4*sj5))+(((0.00099756)*cj5*r21))+(((0.00099756)*r20*sj5))+(((-0.00019196)*r22*sj4)))))))+(((19290.1234567901)*(IKabs(((-0.44)+(((-0.312576)*cj5*r00*sj4))+(((-1.398)*r21*sj4*sj5))+(((-1.398)*cj4*r22))+(((-12.0)*pz))+(((0.312576)*r01*sj4*sj5))+(((-0.00660972)*r21*sj5))+(((-0.00057588)*r22*sj4))+(((-0.00057588)*cj4*cj5*r20))+(((0.00299268)*r20*sj5))+(((0.00299268)*cj5*r21))+(((1.398)*cj5*r20*sj4))+(((0.00057588)*cj4*r21*sj5))+(((0.00660972)*cj5*r20))+(((0.312576)*cj4*r02)))))))+(((19290.1234567901)*(IKabs(((-0.44)+(((0.00057588)*cj4*cj5*r20))+(((-1.398)*cj5*r20*sj4))+(((-0.00299268)*cj5*r21))+(((12.0)*pz))+(((-0.00660972)*cj5*r20))+(((-0.00057588)*cj4*r21*sj5))+(((0.312576)*r20*sj3*sj5))+(((0.312576)*cj5*r21*sj3))+(((-0.312576)*cj3*cj4*cj5*r20))+(((0.00057588)*r22*sj4))+(((1.398)*cj4*r22))+(((-0.00299268)*r20*sj5))+(((0.312576)*cj3*cj4*r21*sj5))+(((0.00660972)*r21*sj5))+(((1.398)*r21*sj4*sj5))+(((-0.312576)*cj3*r22*sj4)))))))+(((19290.1234567901)*(IKabs(((0.44)+(((0.00220324)*r21*sj5))+(((-0.00220324)*cj5*r20))+(((4.0)*pz))+(((0.104192)*cj3*cj4*r21*sj5))+(((-0.00099756)*r20*sj5))+(((0.466)*cj4*r22))+(((0.104192)*cj5*r21*sj3))+(((0.466)*r21*sj4*sj5))+(((-0.104192)*cj3*r22*sj4))+(((-0.00099756)*cj5*r21))+(((-0.466)*cj5*r20*sj4))+(((0.00019196)*cj4*cj5*r20))+(((-0.00019196)*cj4*r21*sj5))+(((0.00019196)*r22*sj4))+(((0.104192)*r20*sj3*sj5))+(((-0.104192)*cj3*cj4*cj5*r20)))))))+(((19290.1234567901)*(IKabs(((0.44)+(((-0.312576)*cj5*r00*sj4))+(((-1.398)*r21*sj4*sj5))+(((-1.398)*cj4*r22))+(((-12.0)*pz))+(((0.312576)*r01*sj4*sj5))+(((-0.00660972)*r21*sj5))+(((-0.00057588)*r22*sj4))+(((-0.00057588)*cj4*cj5*r20))+(((0.00299268)*r20*sj5))+(((0.00299268)*cj5*r21))+(((1.398)*cj5*r20*sj4))+(((0.00057588)*cj4*r21*sj5))+(((0.00660972)*cj5*r20))+(((0.312576)*cj4*r02)))))))+(((19290.1234567901)*(IKabs(((0.44)+(((0.00057588)*cj4*cj5*r20))+(((-1.398)*cj5*r20*sj4))+(((-0.00299268)*cj5*r21))+(((12.0)*pz))+(((-0.00660972)*cj5*r20))+(((-0.00057588)*cj4*r21*sj5))+(((0.312576)*r20*sj3*sj5))+(((0.312576)*cj5*r21*sj3))+(((-0.312576)*cj3*cj4*cj5*r20))+(((0.00057588)*r22*sj4))+(((1.398)*cj4*r22))+(((-0.00299268)*r20*sj5))+(((0.312576)*cj3*cj4*r21*sj5))+(((0.00660972)*r21*sj5))+(((1.398)*r21*sj4*sj5))+(((-0.312576)*cj3*r22*sj4))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x941=(r21*sj5);
IkReal x942=((0.00057588)*cj4);
IkReal x943=((1.398)*sj4);
IkReal x944=(cj4*r02);
IkReal x945=(r22*sj4);
IkReal x946=(cj5*r21);
IkReal x947=(cj5*sj4);
IkReal x948=(cj5*r20);
IkReal x949=((0.00019196)*cj4);
IkReal x950=(r20*sj5);
IkReal x951=(cj4*r22);
IkReal x952=((0.00299268)*x950);
IkReal x953=((0.00299268)*x946);
IkReal x954=((0.00660972)*x948);
IkReal x955=((0.312576)*x944);
IkReal x956=((0.104192)*x944);
IkReal x957=((0.00220324)*x948);
IkReal x958=((0.00099756)*x946);
IkReal x959=((0.00099756)*x950);
IkReal x960=(r01*sj4*sj5);
IkReal x961=((0.312576)*x960);
IkReal x962=(x943*x948);
IkReal x963=(x941*x942);
IkReal x964=((0.466)*r20*x947);
IkReal x965=(x941*x949);
IkReal x966=((0.104192)*x960);
IkReal x967=((((0.00057588)*x945))+(((12.0)*pz))+(((0.00660972)*x941))+((x941*x943))+((x942*x948))+(((1.398)*x951))+(((0.312576)*r00*x947)));
IkReal x968=((((0.00220324)*x941))+((x948*x949))+(((4.0)*pz))+(((0.104192)*r00*x947))+(((0.466)*x951))+(((0.00019196)*x945))+(((0.466)*sj4*x941)));
IkReal x969=(x962+x963+x961+x955+x954+x953+x952);
IkReal x970=(x966+x964+x965+x959+x958+x957+x956);
op[0]=((-0.44)+x970+(((-1.0)*x968)));
op[1]=6.48e-6;
op[2]=((-0.44)+x969+(((-1.0)*x967)));
op[3]=1.296e-5;
op[4]=((0.44)+x969+(((-1.0)*x967)));
op[5]=6.48e-6;
op[6]=((0.44)+x970+(((-1.0)*x968)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x971=((4.0)*pz);
IkReal x972=((12.0)*pz);
IkReal x973=(r21*sj5);
IkReal x974=((0.00057588)*cj4);
IkReal x975=((0.312576)*cj5);
IkReal x976=(cj3*cj4);
IkReal x977=((1.398)*sj4);
IkReal x978=(cj5*r21);
IkReal x979=(r22*sj4);
IkReal x980=(cj5*r20);
IkReal x981=((0.466)*sj4);
IkReal x982=(r20*sj5);
IkReal x983=(cj4*r22);
IkReal x984=((0.00019196)*cj4);
IkReal x985=((0.104192)*sj3);
IkReal x986=((0.00220324)*x973);
IkReal x987=((0.466)*x983);
IkReal x988=((0.00019196)*x979);
IkReal x989=((0.00057588)*x979);
IkReal x990=((1.398)*x983);
IkReal x991=((0.00660972)*x973);
IkReal x992=((0.00220324)*x980);
IkReal x993=((0.00099756)*x978);
IkReal x994=((0.00099756)*x982);
IkReal x995=(x978*x985);
IkReal x996=(x973*x981);
IkReal x997=(x980*x984);
IkReal x998=(x974*x980);
IkReal x999=((0.312576)*sj3*x982);
IkReal x1000=(r21*sj3*x975);
IkReal x1001=(x973*x977);
IkReal x1002=(x982*x985);
IkReal x1003=(x980*x981);
IkReal x1004=(x973*x984);
IkReal x1005=((0.104192)*cj3*x979);
IkReal x1006=((0.104192)*x973*x976);
IkReal x1007=((0.312576)*x973*x976);
IkReal x1008=((0.104192)*x976*x980);
IkReal x1009=((((0.00660972)*x980))+(((0.00299268)*x982))+(((0.00299268)*x978))+((x977*x980))+((x973*x974))+((r20*x975*x976))+(((0.312576)*cj3*x979)));
IkReal x1010=(x1008+x1005+x1004+x1003+x993+x992+x994);
IkReal x1011=(x1007+x1001+x1000+x991+x990+x999+x998+x989+x972);
IkReal x1012=(x1006+x1002+x997+x996+x995+x988+x986+x987+x971);
j1evalpoly[0]=((-0.44)+(((-6.48e-6)*htj1))+x1012+(((htj1*htj1*htj1*htj1)*(((0.44)+x1011+(((-1.0)*x1009))))))+(((-1.0)*x1010))+(((-6.48e-6)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.44)+x1012+(((-1.0)*x1010))))))+(((-1.296e-5)*(htj1*htj1*htj1)))+(((htj1*htj1)*(((-0.44)+x1011+(((-1.0)*x1009)))))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1013=(cj4*r22);
IkReal x1014=(sj4*sj5);
IkReal x1015=((1.0)*r20);
IkReal x1016=(cj4*r02);
IkReal x1017=((1.0)*sj1);
IkReal x1018=(cj5*sj1*sj4);
IkReal x1019=(cj1*cj5*sj4);
if( IKabs(((((-1.0)*x1015*x1019))+(((-1.0)*x1016*x1017))+((cj1*x1013))+((cj1*r21*x1014))+((r00*x1018))+(((-1.0)*r01*x1014*x1017)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*sj1*x1014))+(((-1.0)*r00*x1019))+((cj1*r01*x1014))+((sj1*x1013))+(((-1.0)*x1015*x1018))+((cj1*x1016)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1015*x1019))+(((-1.0)*x1016*x1017))+((cj1*x1013))+((cj1*r21*x1014))+((r00*x1018))+(((-1.0)*r01*x1014*x1017))))+IKsqr((((r21*sj1*x1014))+(((-1.0)*r00*x1019))+((cj1*r01*x1014))+((sj1*x1013))+(((-1.0)*x1015*x1018))+((cj1*x1016))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1015*x1019))+(((-1.0)*x1016*x1017))+((cj1*x1013))+((cj1*r21*x1014))+((r00*x1018))+(((-1.0)*r01*x1014*x1017))), (((r21*sj1*x1014))+(((-1.0)*r00*x1019))+((cj1*r01*x1014))+((sj1*x1013))+(((-1.0)*x1015*x1018))+((cj1*x1016))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1020=IKcos(j2);
IkReal x1021=IKsin(j2);
IkReal x1022=((0.00024939)*cj5);
IkReal x1023=((1.0)*cj3);
IkReal x1024=(r02*sj4);
IkReal x1025=(r21*sj5);
IkReal x1026=(cj3*cj4);
IkReal x1027=(cj5*r00);
IkReal x1028=(r01*sj5);
IkReal x1029=((1.0)*sj4);
IkReal x1030=((4.799e-5)*cj4);
IkReal x1031=(cj5*sj3);
IkReal x1032=(cj5*r20);
IkReal x1033=((0.00024939)*sj5);
IkReal x1034=(sj3*sj5);
IkReal x1035=((1.0)*cj4);
IkReal x1036=(r22*sj4);
IkReal x1037=(cj1*x1020);
IkReal x1038=(cj1*x1021);
IkReal x1039=(sj1*x1020);
IkReal x1040=(sj1*x1021);
IkReal x1041=((1.0)*x1040);
evalcond[0]=(((sj4*x1032))+x1038+x1039+(((-1.0)*x1025*x1029))+(((-1.0)*r22*x1035)));
evalcond[1]=((((-1.0)*x1028*x1029))+x1037+((sj4*x1027))+(((-1.0)*r02*x1035))+(((-1.0)*x1041)));
evalcond[2]=(x1037+(((-1.0)*x1023*x1036))+((r21*x1031))+((r20*x1034))+((x1025*x1026))+(((-1.0)*cj4*x1023*x1032))+(((-1.0)*x1041)));
evalcond[3]=(((r00*x1034))+(((-1.0)*x1038))+(((-1.0)*x1039))+(((-1.0)*x1023*x1024))+(((-1.0)*cj4*x1023*x1027))+((x1026*x1028))+((r01*x1031)));
evalcond[4]=((((0.00055081)*x1032))+(((-0.026048)*x1040))+((r21*x1022))+(((8.1e-7)*sj1))+(((-0.1165)*x1039))+(((-0.1165)*x1038))+(((0.11)*cj1))+(((-1.0)*pz))+(((-0.00055081)*x1025))+((r20*x1033))+(((0.026048)*x1037))+(((-1.0)*x1030*x1032))+((x1025*x1030))+(((-4.799e-5)*x1036)));
evalcond[5]=((-0.047)+(((-1.0)*x1027*x1030))+((r01*x1022))+((r00*x1033))+(((-0.11)*sj1))+(((-0.1165)*x1037))+(((0.00055081)*x1027))+(((8.1e-7)*cj1))+(((-4.799e-5)*x1024))+(((-0.026048)*x1039))+(((-0.026048)*x1038))+(((-1.0)*px))+((x1028*x1030))+(((-0.00055081)*x1028))+(((0.1165)*x1040)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x1042=((1.0)*r11);
IkReal x1043=(((r21*sj4*sj5))+((cj4*r22))+(((-1.0)*cj5*r20*sj4)));
j3eval[0]=x1043;
j3eval[1]=IKsign(x1043);
j3eval[2]=((IKabs(((((-1.0)*cj4*sj5*x1042))+((cj4*cj5*r10))+((r12*sj4)))))+(IKabs(((((-1.0)*r10*sj5))+(((-1.0)*cj5*x1042))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x1044=((1.0)*sj5);
IkReal x1045=((((-1.0)*r11*sj4*x1044))+((cj5*r10*sj4))+(((-1.0)*cj4*r12)));
j3eval[0]=x1045;
j3eval[1]=((IKabs(((((-1.0)*cj5*r21))+(((-1.0)*r20*x1044)))))+(IKabs((((r22*sj4))+(((-1.0)*cj4*r21*x1044))+((cj4*cj5*r20))))));
j3eval[2]=IKsign(x1045);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x1046=r00*r00;
IkReal x1047=cj5*cj5;
IkReal x1048=cj4*cj4;
IkReal x1049=r01*r01;
IkReal x1050=r02*r02;
IkReal x1051=(cj5*r00);
IkReal x1052=(r02*sj4);
IkReal x1053=((2.0)*r01*sj5);
IkReal x1054=((1.0)*x1048);
IkReal x1055=(x1046*x1047);
IkReal x1056=(x1047*x1049);
IkReal x1057=((((-1.0)*x1048*x1051*x1053))+x1050+x1056+x1046+(((-1.0)*cj4*x1052*x1053))+((x1048*x1055))+(((2.0)*cj4*x1051*x1052))+((x1048*x1049))+(((-1.0)*x1054*x1056))+((x1051*x1053))+(((-1.0)*x1055))+(((-1.0)*x1050*x1054)));
j3eval[0]=x1057;
j3eval[1]=((IKabs(((((-1.0)*cj4*x1051))+(((-1.0)*x1052))+((cj4*r01*sj5)))))+(IKabs(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01))))));
j3eval[2]=IKsign(x1057);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1058=r00*r00;
IkReal x1059=cj5*cj5;
IkReal x1060=cj4*cj4;
IkReal x1061=r01*r01;
IkReal x1062=r02*r02;
IkReal x1063=(cj5*r00);
IkReal x1064=(r02*sj4);
IkReal x1065=((2.0)*r01*sj5);
IkReal x1066=((1.0)*x1060);
IkReal x1067=(x1058*x1059);
IkReal x1068=(x1059*x1061);
CheckValue<IkReal> x1069 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*x1063))+((cj4*r01*sj5))+(((-1.0)*x1064)))),IkReal(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1069.valid){
continue;
}
CheckValue<IkReal> x1070=IKPowWithIntegerCheck(IKsign((x1058+x1068+x1062+((x1060*x1061))+((x1060*x1067))+(((-1.0)*x1062*x1066))+(((-1.0)*x1066*x1068))+(((-1.0)*cj4*x1064*x1065))+(((-1.0)*x1060*x1063*x1065))+((x1063*x1065))+(((2.0)*cj4*x1063*x1064))+(((-1.0)*x1067)))),-1);
if(!x1070.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1069.value)+(((1.5707963267949)*(x1070.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x1071=IKsin(j3);
IkReal x1072=IKcos(j3);
IkReal x1073=(r02*sj4);
IkReal x1074=(cj4*cj5);
IkReal x1075=(cj4*sj5);
IkReal x1076=(cj5*r01);
IkReal x1077=(r00*sj5);
IkReal x1078=((1.0)*x1072);
IkReal x1079=((1.0)*x1071);
evalcond[0]=((((-1.0)*x1073*x1078))+(((-1.0)*r00*x1074*x1078))+((x1071*x1077))+((x1071*x1076))+((r01*x1072*x1075)));
evalcond[1]=((((-1.0)*cj5*r21*x1078))+(((-1.0)*r20*sj5*x1078))+(((-1.0)*r22*sj4*x1079))+(((-1.0)*r20*x1074*x1079))+((r21*x1071*x1075)));
evalcond[2]=((((-1.0)*r12*sj4*x1079))+((r11*x1071*x1075))+(((-1.0)*r10*x1074*x1079))+(((-1.0)*cj5*r11*x1078))+(((-1.0)*r10*sj5*x1078)));
evalcond[3]=((-1.0)+((r01*x1071*x1075))+(((-1.0)*x1077*x1078))+(((-1.0)*x1073*x1079))+(((-1.0)*r00*x1074*x1079))+(((-1.0)*x1076*x1078)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x1080=((12.0)*py);
IkReal x1081=((12.0)*pz);
IkReal x1082=(cj4*r12);
IkReal x1083=(cj4*sj5);
IkReal x1084=(cj5*r20);
IkReal x1085=((0.312576)*sj4);
IkReal x1086=(cj5*r10);
IkReal x1087=(r20*sj5);
IkReal x1088=(cj4*r22);
IkReal x1089=(r10*sj5);
IkReal x1090=(r11*sj5);
IkReal x1091=((0.00019196)*sj4);
IkReal x1092=(cj5*r21);
IkReal x1093=((0.466)*sj4);
IkReal x1094=((0.104192)*sj4);
IkReal x1095=(r21*sj5);
IkReal x1096=(cj5*r11);
IkReal x1097=((0.00057588)*cj4);
IkReal x1098=((0.00057588)*sj4);
IkReal x1099=((0.00019196)*cj4);
IkReal x1100=((1.398)*sj4);
IkReal x1101=(r12*x1098);
IkReal x1102=((0.00660972)*x1090);
IkReal x1103=((1.398)*x1082);
IkReal x1104=((0.312576)*x1082);
IkReal x1105=(r22*x1098);
IkReal x1106=((1.398)*x1088);
IkReal x1107=((0.00660972)*x1095);
IkReal x1108=(sj5*x1100);
IkReal x1109=(x1084*x1085);
IkReal x1110=(x1086*x1097);
IkReal x1111=(x1090*x1100);
IkReal x1112=(x1084*x1097);
IkReal x1113=(x1085*x1090);
IkReal x1114=(x1095*x1100);
IkReal x1115=((((0.00660972)*x1084))+(((0.00057588)*r21*x1083))+(((0.00299268)*x1092))+((x1084*x1100))+((x1085*x1086))+(((0.00299268)*x1087)));
IkReal x1116=(x1102+x1103+x1101+x1109+x1111+x1110+x1080);
IkReal x1117=((((0.00660972)*x1086))+((x1085*x1095))+(((0.00299268)*x1096))+(((0.312576)*x1088))+((x1086*x1100))+(((0.00057588)*r11*x1083))+(((0.00299268)*x1089)));
IkReal x1118=(x1106+x1107+x1104+x1105+x1113+x1112+x1114+x1081);
j1eval[0]=((3.52002592)+(IKabs(((-0.56400324)+x1116+(((-1.0)*x1117)))))+(IKabs(((-0.18800324)+(((-1.0)*x1086*x1093))+(((0.00220324)*x1090))+((x1084*x1094))+(((4.0)*py))+((x1086*x1099))+(((-0.104192)*x1088))+(((-0.00099756)*x1089))+(((-1.0)*x1094*x1095))+(((-0.00220324)*x1086))+((r12*x1091))+(((0.466)*x1082))+((x1090*x1093))+(((-0.00099756)*x1096))+(((-0.00019196)*r11*x1083)))))+(IKabs(((-0.56399676)+x1116+(((-1.0)*x1117)))))+(IKabs(((0.44)+(((-1.0)*x1086*x1094))+(((0.00220324)*x1095))+((x1084*x1099))+(((4.0)*pz))+((r22*x1091))+(((0.104192)*x1082))+(((-1.0)*x1084*x1093))+(((-0.00099756)*x1087))+(((-0.00019196)*r21*x1083))+(((-0.00220324)*x1084))+((x1093*x1095))+(((0.466)*x1088))+((x1090*x1094))+(((-0.00099756)*x1092)))))+(IKabs(((-0.44)+x1118+(((-1.0)*x1115)))))+(IKabs(((0.44)+x1118+(((-1.0)*x1115))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x1119=((12.0)*pz);
IkReal x1120=((4.0)*pz);
IkReal x1121=(r21*sj5);
IkReal x1122=((0.00057588)*cj4);
IkReal x1123=((0.312576)*sj4);
IkReal x1124=(cj5*r10);
IkReal x1125=((1.398)*sj4);
IkReal x1126=(r11*sj5);
IkReal x1127=(cj4*r22);
IkReal x1128=(r22*sj4);
IkReal x1129=(cj5*r21);
IkReal x1130=((0.466)*sj4);
IkReal x1131=(cj5*r20);
IkReal x1132=(r20*sj5);
IkReal x1133=((0.00019196)*cj4);
IkReal x1134=((0.104192)*sj4);
IkReal x1135=(cj4*r12);
IkReal x1136=((0.312576)*x1135);
IkReal x1137=((0.00057588)*x1128);
IkReal x1138=((1.398)*x1127);
IkReal x1139=((0.00660972)*x1121);
IkReal x1140=((0.00220324)*x1121);
IkReal x1141=((0.104192)*x1135);
IkReal x1142=((0.466)*x1127);
IkReal x1143=((0.00019196)*x1128);
IkReal x1144=(x1122*x1131);
IkReal x1145=(x1123*x1126);
IkReal x1146=(x1121*x1125);
IkReal x1147=(x1126*x1134);
IkReal x1148=(x1121*x1130);
IkReal x1149=(x1131*x1133);
IkReal x1150=((((0.00660972)*x1131))+((x1121*x1122))+(((0.00299268)*x1129))+((x1125*x1131))+(((0.00299268)*x1132))+((x1123*x1124)));
IkReal x1151=(((x1130*x1131))+((x1121*x1133))+((x1124*x1134))+(((0.00099756)*x1129))+(((0.00099756)*x1132))+(((0.00220324)*x1131)));
IkReal x1152=(x1119+x1146+x1144+x1145+x1139+x1138+x1137+x1136);
IkReal x1153=(x1142+x1143+x1140+x1141+x1147+x1148+x1149+x1120);
op[0]=((0.44)+x1153+(((-1.0)*x1151)));
op[1]=-6.48e-6;
op[2]=((0.44)+x1152+(((-1.0)*x1150)));
op[3]=-1.296e-5;
op[4]=((-0.44)+x1152+(((-1.0)*x1150)));
op[5]=-6.48e-6;
op[6]=((-0.44)+x1153+(((-1.0)*x1151)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1154=((4.0)*py);
IkReal x1155=((12.0)*py);
IkReal x1156=(r12*sj4);
IkReal x1157=(r10*sj5);
IkReal x1158=(cj5*r10);
IkReal x1159=(sj4*sj5);
IkReal x1160=(cj4*r12);
IkReal x1161=(cj4*r22);
IkReal x1162=(r11*sj5);
IkReal x1163=(cj5*r11);
IkReal x1164=((0.466)*x1160);
IkReal x1165=((0.00057588)*x1156);
IkReal x1166=((0.00660972)*x1162);
IkReal x1167=((1.398)*x1160);
IkReal x1168=((0.00019196)*x1156);
IkReal x1169=((0.00220324)*x1162);
IkReal x1170=((0.00220324)*x1158);
IkReal x1171=((0.00099756)*x1157);
IkReal x1172=((0.00099756)*x1163);
IkReal x1173=((0.104192)*x1161);
IkReal x1174=(cj4*x1162);
IkReal x1175=(cj5*r20*sj4);
IkReal x1176=((0.00019196)*cj4*x1158);
IkReal x1177=((0.466)*r11*x1159);
IkReal x1178=((0.312576)*x1175);
IkReal x1179=((0.00057588)*cj4*x1158);
IkReal x1180=((1.398)*r11*x1159);
IkReal x1181=((0.104192)*x1175);
IkReal x1182=((0.466)*sj4*x1158);
IkReal x1183=((0.00019196)*x1174);
IkReal x1184=((0.104192)*r21*x1159);
IkReal x1185=(x1154+x1181+x1164+x1168+x1169+x1177+x1176);
IkReal x1186=(x1155+x1180+x1165+x1166+x1167+x1179+x1178);
IkReal x1187=((((1.398)*sj4*x1158))+(((0.00299268)*x1163))+(((0.312576)*x1161))+(((0.00660972)*x1158))+(((0.312576)*r21*x1159))+(((0.00299268)*x1157))+(((0.00057588)*x1174)));
IkReal x1188=(x1184+x1182+x1183+x1173+x1172+x1171+x1170);
j1evalpoly[0]=((-0.18799676)+x1185+(((-0.88)*htj1))+(((-1.0)*x1188))+(((-1.76)*(htj1*htj1*htj1)))+(((htj1*htj1)*(((-0.56399676)+x1186+(((-1.0)*x1187))))))+(((-0.88)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((-0.18800324)+x1185+(((-1.0)*x1188))))))+(((htj1*htj1*htj1*htj1)*(((-0.56400324)+x1186+(((-1.0)*x1187)))))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1189=(cj4*sj1);
IkReal x1190=(cj1*cj4);
IkReal x1191=((1.0)*sj4);
IkReal x1192=(cj1*sj5);
IkReal x1193=(cj5*sj1);
IkReal x1194=(cj1*cj5);
IkReal x1195=(sj1*sj4*sj5);
if( IKabs(((((-1.0)*r10*x1191*x1193))+((r21*sj4*x1192))+((r22*x1190))+((r11*x1195))+(((-1.0)*r20*x1191*x1194))+((r12*x1189)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r12*x1190))+((r22*x1189))+((r10*sj4*x1194))+((r21*x1195))+(((-1.0)*r20*x1191*x1193))+(((-1.0)*r11*x1191*x1192)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x1191*x1193))+((r21*sj4*x1192))+((r22*x1190))+((r11*x1195))+(((-1.0)*r20*x1191*x1194))+((r12*x1189))))+IKsqr(((((-1.0)*r12*x1190))+((r22*x1189))+((r10*sj4*x1194))+((r21*x1195))+(((-1.0)*r20*x1191*x1193))+(((-1.0)*r11*x1191*x1192))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r10*x1191*x1193))+((r21*sj4*x1192))+((r22*x1190))+((r11*x1195))+(((-1.0)*r20*x1191*x1194))+((r12*x1189))), ((((-1.0)*r12*x1190))+((r22*x1189))+((r10*sj4*x1194))+((r21*x1195))+(((-1.0)*r20*x1191*x1193))+(((-1.0)*r11*x1191*x1192))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1196=IKsin(j2);
IkReal x1197=IKcos(j2);
IkReal x1198=((0.1165)*sj1);
IkReal x1199=(cj4*sj5);
IkReal x1200=((1.0)*cj3);
IkReal x1201=(r12*sj4);
IkReal x1202=(cj4*cj5);
IkReal x1203=((0.00055081)*sj5);
IkReal x1204=((0.00024939)*sj5);
IkReal x1205=(cj5*r11);
IkReal x1206=(cj5*r21);
IkReal x1207=(cj5*sj4);
IkReal x1208=((1.0)*cj4);
IkReal x1209=((0.00055081)*cj5);
IkReal x1210=(sj3*sj5);
IkReal x1211=(r22*sj4);
IkReal x1212=(sj1*x1197);
IkReal x1213=(cj1*x1196);
IkReal x1214=(cj1*x1197);
IkReal x1215=(sj1*x1196);
IkReal x1216=((1.0)*sj4*sj5);
IkReal x1217=(x1212+x1213);
evalcond[0]=(x1217+(((-1.0)*r22*x1208))+((r20*x1207))+(((-1.0)*r21*x1216)));
evalcond[1]=(x1215+((r10*x1207))+(((-1.0)*r12*x1208))+(((-1.0)*r11*x1216))+(((-1.0)*x1214)));
evalcond[2]=(x1217+((cj3*r11*x1199))+((r10*x1210))+(((-1.0)*x1200*x1201))+((sj3*x1205))+(((-1.0)*r10*x1200*x1202)));
evalcond[3]=(x1214+((cj3*r21*x1199))+(((-1.0)*x1200*x1211))+((sj3*x1206))+((r20*x1210))+(((-1.0)*r20*x1200*x1202))+(((-1.0)*x1215)));
evalcond[4]=((((-0.1165)*x1213))+(((8.1e-7)*sj1))+(((-4.799e-5)*x1211))+(((-1.0)*x1197*x1198))+(((0.11)*cj1))+(((0.00024939)*x1206))+(((4.799e-5)*r21*x1199))+(((-1.0)*pz))+((r20*x1204))+((r20*x1209))+(((-0.026048)*x1215))+(((0.026048)*x1214))+(((-1.0)*r21*x1203))+(((-4.799e-5)*r20*x1202)));
evalcond[5]=((0.047)+((r10*x1204))+((r10*x1209))+(((-4.799e-5)*r10*x1202))+(((0.00024939)*x1205))+(((-1.0)*py))+(((-8.1e-7)*cj1))+(((0.11)*sj1))+(((-1.0)*x1196*x1198))+(((4.799e-5)*r11*x1199))+(((0.026048)*x1212))+(((0.026048)*x1213))+(((-4.799e-5)*x1201))+(((-1.0)*r11*x1203))+(((0.1165)*x1214)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1218=((1.0)*sj5);
CheckValue<IkReal> x1219=IKPowWithIntegerCheck(IKsign((((cj5*r10*sj4))+(((-1.0)*r11*sj4*x1218))+(((-1.0)*cj4*r12)))),-1);
if(!x1219.valid){
continue;
}
CheckValue<IkReal> x1220 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x1218))+(((-1.0)*cj5*r21)))),IkReal((((r22*sj4))+((cj4*cj5*r20))+(((-1.0)*cj4*r21*x1218)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1220.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1219.value)))+(x1220.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x1221=IKsin(j3);
IkReal x1222=IKcos(j3);
IkReal x1223=(r02*sj4);
IkReal x1224=(cj4*cj5);
IkReal x1225=(cj4*sj5);
IkReal x1226=(cj5*r01);
IkReal x1227=(r00*sj5);
IkReal x1228=((1.0)*x1222);
IkReal x1229=((1.0)*x1221);
evalcond[0]=((((-1.0)*r00*x1224*x1228))+((x1221*x1227))+((x1221*x1226))+((r01*x1222*x1225))+(((-1.0)*x1223*x1228)));
evalcond[1]=((((-1.0)*r22*sj4*x1229))+(((-1.0)*r20*sj5*x1228))+(((-1.0)*cj5*r21*x1228))+(((-1.0)*r20*x1224*x1229))+((r21*x1221*x1225)));
evalcond[2]=((((-1.0)*r10*x1224*x1229))+((r11*x1221*x1225))+(((-1.0)*r12*sj4*x1229))+(((-1.0)*cj5*r11*x1228))+(((-1.0)*r10*sj5*x1228)));
evalcond[3]=((-1.0)+(((-1.0)*x1226*x1228))+(((-1.0)*r00*x1224*x1229))+(((-1.0)*x1227*x1228))+((r01*x1221*x1225))+(((-1.0)*x1223*x1229)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x1230=((12.0)*py);
IkReal x1231=((12.0)*pz);
IkReal x1232=(cj4*r12);
IkReal x1233=(cj4*sj5);
IkReal x1234=(cj5*r20);
IkReal x1235=((0.312576)*sj4);
IkReal x1236=(cj5*r10);
IkReal x1237=(r20*sj5);
IkReal x1238=(cj4*r22);
IkReal x1239=(r10*sj5);
IkReal x1240=(r11*sj5);
IkReal x1241=((0.00019196)*sj4);
IkReal x1242=(cj5*r21);
IkReal x1243=((0.466)*sj4);
IkReal x1244=((0.104192)*sj4);
IkReal x1245=(r21*sj5);
IkReal x1246=(cj5*r11);
IkReal x1247=((0.00057588)*cj4);
IkReal x1248=((0.00057588)*sj4);
IkReal x1249=((0.00019196)*cj4);
IkReal x1250=((1.398)*sj4);
IkReal x1251=(r12*x1248);
IkReal x1252=((0.00660972)*x1240);
IkReal x1253=((1.398)*x1232);
IkReal x1254=((0.312576)*x1232);
IkReal x1255=(r22*x1248);
IkReal x1256=((1.398)*x1238);
IkReal x1257=((0.00660972)*x1245);
IkReal x1258=(sj5*x1250);
IkReal x1259=(x1234*x1235);
IkReal x1260=(x1236*x1247);
IkReal x1261=(x1240*x1250);
IkReal x1262=(x1234*x1247);
IkReal x1263=(x1235*x1240);
IkReal x1264=(x1245*x1250);
IkReal x1265=((((0.00299268)*x1242))+(((0.00299268)*x1237))+((x1235*x1236))+(((0.00660972)*x1234))+((x1234*x1250))+(((0.00057588)*r21*x1233)));
IkReal x1266=(x1261+x1260+x1252+x1253+x1251+x1259+x1230);
IkReal x1267=((((0.00299268)*x1246))+(((0.00057588)*r11*x1233))+(((0.00299268)*x1239))+(((0.00660972)*x1236))+(((0.312576)*x1238))+((x1236*x1250))+((x1235*x1245)));
IkReal x1268=(x1263+x1262+x1264+x1256+x1257+x1254+x1255+x1231);
j1eval[0]=((3.52002592)+(IKabs(((-0.44)+x1268+(((-1.0)*x1265)))))+(IKabs(((0.44)+(((-0.00019196)*r21*x1233))+(((-0.00099756)*x1242))+(((4.0)*pz))+((x1240*x1244))+(((0.00220324)*x1245))+(((-1.0)*x1236*x1244))+(((0.466)*x1238))+(((0.104192)*x1232))+((x1243*x1245))+((r22*x1241))+(((-0.00220324)*x1234))+((x1234*x1249))+(((-1.0)*x1234*x1243))+(((-0.00099756)*x1237)))))+(IKabs(((-0.56400324)+x1266+(((-1.0)*x1267)))))+(IKabs(((-0.18800324)+(((-0.00019196)*r11*x1233))+(((-1.0)*x1244*x1245))+((x1236*x1249))+(((-0.00099756)*x1246))+(((4.0)*py))+((x1240*x1243))+(((0.00220324)*x1240))+(((-1.0)*x1236*x1243))+(((0.466)*x1232))+(((-0.104192)*x1238))+((r12*x1241))+(((-0.00220324)*x1236))+((x1234*x1244))+(((-0.00099756)*x1239)))))+(IKabs(((-0.56399676)+x1266+(((-1.0)*x1267)))))+(IKabs(((0.44)+x1268+(((-1.0)*x1265))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x1269=((12.0)*pz);
IkReal x1270=((4.0)*pz);
IkReal x1271=(r21*sj5);
IkReal x1272=((0.00057588)*cj4);
IkReal x1273=((0.312576)*sj4);
IkReal x1274=(cj5*r10);
IkReal x1275=((1.398)*sj4);
IkReal x1276=(r11*sj5);
IkReal x1277=(cj4*r22);
IkReal x1278=(r22*sj4);
IkReal x1279=(cj5*r21);
IkReal x1280=((0.466)*sj4);
IkReal x1281=(cj5*r20);
IkReal x1282=(r20*sj5);
IkReal x1283=((0.00019196)*cj4);
IkReal x1284=((0.104192)*sj4);
IkReal x1285=(cj4*r12);
IkReal x1286=((0.312576)*x1285);
IkReal x1287=((0.00057588)*x1278);
IkReal x1288=((1.398)*x1277);
IkReal x1289=((0.00660972)*x1271);
IkReal x1290=((0.00220324)*x1271);
IkReal x1291=((0.104192)*x1285);
IkReal x1292=((0.466)*x1277);
IkReal x1293=((0.00019196)*x1278);
IkReal x1294=(x1272*x1281);
IkReal x1295=(x1273*x1276);
IkReal x1296=(x1271*x1275);
IkReal x1297=(x1276*x1284);
IkReal x1298=(x1271*x1280);
IkReal x1299=(x1281*x1283);
IkReal x1300=((((0.00660972)*x1281))+(((0.00299268)*x1279))+((x1273*x1274))+((x1275*x1281))+((x1271*x1272))+(((0.00299268)*x1282)));
IkReal x1301=((((0.00099756)*x1282))+(((0.00220324)*x1281))+((x1274*x1284))+((x1280*x1281))+(((0.00099756)*x1279))+((x1271*x1283)));
IkReal x1302=(x1269+x1287+x1286+x1289+x1288+x1296+x1294+x1295);
IkReal x1303=(x1270+x1298+x1299+x1292+x1293+x1290+x1291+x1297);
op[0]=((0.44)+x1303+(((-1.0)*x1301)));
op[1]=-6.48e-6;
op[2]=((0.44)+x1302+(((-1.0)*x1300)));
op[3]=-1.296e-5;
op[4]=((-0.44)+x1302+(((-1.0)*x1300)));
op[5]=-6.48e-6;
op[6]=((-0.44)+x1303+(((-1.0)*x1301)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1304=((4.0)*py);
IkReal x1305=((12.0)*py);
IkReal x1306=(r12*sj4);
IkReal x1307=(r10*sj5);
IkReal x1308=(cj5*r10);
IkReal x1309=(sj4*sj5);
IkReal x1310=(cj4*r12);
IkReal x1311=(cj4*r22);
IkReal x1312=(r11*sj5);
IkReal x1313=(cj5*r11);
IkReal x1314=((0.466)*x1310);
IkReal x1315=((0.00057588)*x1306);
IkReal x1316=((0.00660972)*x1312);
IkReal x1317=((1.398)*x1310);
IkReal x1318=((0.00019196)*x1306);
IkReal x1319=((0.00220324)*x1312);
IkReal x1320=((0.00220324)*x1308);
IkReal x1321=((0.00099756)*x1307);
IkReal x1322=((0.00099756)*x1313);
IkReal x1323=((0.104192)*x1311);
IkReal x1324=(cj4*x1312);
IkReal x1325=(cj5*r20*sj4);
IkReal x1326=((0.00019196)*cj4*x1308);
IkReal x1327=((0.466)*r11*x1309);
IkReal x1328=((0.312576)*x1325);
IkReal x1329=((0.00057588)*cj4*x1308);
IkReal x1330=((1.398)*r11*x1309);
IkReal x1331=((0.104192)*x1325);
IkReal x1332=((0.466)*sj4*x1308);
IkReal x1333=((0.00019196)*x1324);
IkReal x1334=((0.104192)*r21*x1309);
IkReal x1335=(x1304+x1314+x1319+x1318+x1326+x1327+x1331);
IkReal x1336=(x1305+x1317+x1316+x1315+x1328+x1329+x1330);
IkReal x1337=((((0.00057588)*x1324))+(((0.312576)*r21*x1309))+(((0.00299268)*x1307))+(((1.398)*sj4*x1308))+(((0.00660972)*x1308))+(((0.00299268)*x1313))+(((0.312576)*x1311)));
IkReal x1338=(x1322+x1323+x1320+x1321+x1334+x1333+x1332);
j1evalpoly[0]=((-0.18799676)+x1335+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((-0.18800324)+x1335+(((-1.0)*x1338))))))+(((-0.88)*htj1))+(((htj1*htj1)*(((-0.56399676)+x1336+(((-1.0)*x1337))))))+(((-1.76)*(htj1*htj1*htj1)))+(((-0.88)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1)*(((-0.56400324)+x1336+(((-1.0)*x1337))))))+(((-1.0)*x1338)));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1339=(cj4*sj1);
IkReal x1340=(cj1*cj4);
IkReal x1341=((1.0)*sj4);
IkReal x1342=(cj1*sj5);
IkReal x1343=(cj5*sj1);
IkReal x1344=(cj1*cj5);
IkReal x1345=(sj1*sj4*sj5);
if( IKabs((((r12*x1339))+(((-1.0)*r10*x1341*x1343))+((r21*sj4*x1342))+((r22*x1340))+(((-1.0)*r20*x1341*x1344))+((r11*x1345)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1341*x1342))+(((-1.0)*r12*x1340))+(((-1.0)*r20*x1341*x1343))+((r22*x1339))+((r10*sj4*x1344))+((r21*x1345)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r12*x1339))+(((-1.0)*r10*x1341*x1343))+((r21*sj4*x1342))+((r22*x1340))+(((-1.0)*r20*x1341*x1344))+((r11*x1345))))+IKsqr(((((-1.0)*r11*x1341*x1342))+(((-1.0)*r12*x1340))+(((-1.0)*r20*x1341*x1343))+((r22*x1339))+((r10*sj4*x1344))+((r21*x1345))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r12*x1339))+(((-1.0)*r10*x1341*x1343))+((r21*sj4*x1342))+((r22*x1340))+(((-1.0)*r20*x1341*x1344))+((r11*x1345))), ((((-1.0)*r11*x1341*x1342))+(((-1.0)*r12*x1340))+(((-1.0)*r20*x1341*x1343))+((r22*x1339))+((r10*sj4*x1344))+((r21*x1345))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1346=IKsin(j2);
IkReal x1347=IKcos(j2);
IkReal x1348=((0.1165)*sj1);
IkReal x1349=(cj4*sj5);
IkReal x1350=((1.0)*cj3);
IkReal x1351=(r12*sj4);
IkReal x1352=(cj4*cj5);
IkReal x1353=((0.00055081)*sj5);
IkReal x1354=((0.00024939)*sj5);
IkReal x1355=(cj5*r11);
IkReal x1356=(cj5*r21);
IkReal x1357=(cj5*sj4);
IkReal x1358=((1.0)*cj4);
IkReal x1359=((0.00055081)*cj5);
IkReal x1360=(sj3*sj5);
IkReal x1361=(r22*sj4);
IkReal x1362=(sj1*x1347);
IkReal x1363=(cj1*x1346);
IkReal x1364=(cj1*x1347);
IkReal x1365=(sj1*x1346);
IkReal x1366=((1.0)*sj4*sj5);
IkReal x1367=(x1362+x1363);
evalcond[0]=(x1367+(((-1.0)*r21*x1366))+(((-1.0)*r22*x1358))+((r20*x1357)));
evalcond[1]=(x1365+(((-1.0)*r12*x1358))+((r10*x1357))+(((-1.0)*x1364))+(((-1.0)*r11*x1366)));
evalcond[2]=(x1367+((r10*x1360))+(((-1.0)*x1350*x1351))+((cj3*r11*x1349))+((sj3*x1355))+(((-1.0)*r10*x1350*x1352)));
evalcond[3]=(x1364+(((-1.0)*x1365))+(((-1.0)*x1350*x1361))+(((-1.0)*r20*x1350*x1352))+((r20*x1360))+((cj3*r21*x1349))+((sj3*x1356)));
evalcond[4]=((((-0.026048)*x1365))+(((4.799e-5)*r21*x1349))+(((8.1e-7)*sj1))+(((-1.0)*x1347*x1348))+(((-1.0)*r21*x1353))+(((-0.1165)*x1363))+(((-4.799e-5)*r20*x1352))+(((0.11)*cj1))+(((-1.0)*pz))+(((-4.799e-5)*x1361))+((r20*x1359))+((r20*x1354))+(((0.00024939)*x1356))+(((0.026048)*x1364)));
evalcond[5]=((0.047)+((r10*x1354))+((r10*x1359))+(((-1.0)*x1346*x1348))+(((-1.0)*r11*x1353))+(((0.1165)*x1364))+(((-4.799e-5)*x1351))+(((4.799e-5)*r11*x1349))+(((-1.0)*py))+(((-8.1e-7)*cj1))+(((0.11)*sj1))+(((0.00024939)*x1355))+(((-4.799e-5)*r10*x1352))+(((0.026048)*x1362))+(((0.026048)*x1363)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1368=((1.0)*r11);
CheckValue<IkReal> x1369 = IKatan2WithCheck(IkReal(((((-1.0)*r10*sj5))+(((-1.0)*cj5*x1368)))),IkReal(((((-1.0)*cj4*sj5*x1368))+((cj4*cj5*r10))+((r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1369.valid){
continue;
}
CheckValue<IkReal> x1370=IKPowWithIntegerCheck(IKsign((((r21*sj4*sj5))+((cj4*r22))+(((-1.0)*cj5*r20*sj4)))),-1);
if(!x1370.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1369.value)+(((1.5707963267949)*(x1370.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x1371=IKsin(j3);
IkReal x1372=IKcos(j3);
IkReal x1373=(r02*sj4);
IkReal x1374=(cj4*cj5);
IkReal x1375=(cj4*sj5);
IkReal x1376=(cj5*r01);
IkReal x1377=(r00*sj5);
IkReal x1378=((1.0)*x1372);
IkReal x1379=((1.0)*x1371);
evalcond[0]=((((-1.0)*r00*x1374*x1378))+((x1371*x1376))+((x1371*x1377))+((r01*x1372*x1375))+(((-1.0)*x1373*x1378)));
evalcond[1]=((((-1.0)*r22*sj4*x1379))+((r21*x1371*x1375))+(((-1.0)*r20*x1374*x1379))+(((-1.0)*r20*sj5*x1378))+(((-1.0)*cj5*r21*x1378)));
evalcond[2]=(((r11*x1371*x1375))+(((-1.0)*cj5*r11*x1378))+(((-1.0)*r10*x1374*x1379))+(((-1.0)*r12*sj4*x1379))+(((-1.0)*r10*sj5*x1378)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x1374*x1379))+(((-1.0)*x1377*x1378))+(((-1.0)*x1376*x1378))+(((-1.0)*x1373*x1379))+((r01*x1371*x1375)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x1380=((12.0)*py);
IkReal x1381=((12.0)*pz);
IkReal x1382=(cj4*r12);
IkReal x1383=(cj4*sj5);
IkReal x1384=(cj5*r20);
IkReal x1385=((0.312576)*sj4);
IkReal x1386=(cj5*r10);
IkReal x1387=(r20*sj5);
IkReal x1388=(cj4*r22);
IkReal x1389=(r10*sj5);
IkReal x1390=(r11*sj5);
IkReal x1391=((0.00019196)*sj4);
IkReal x1392=(cj5*r21);
IkReal x1393=((0.466)*sj4);
IkReal x1394=((0.104192)*sj4);
IkReal x1395=(r21*sj5);
IkReal x1396=(cj5*r11);
IkReal x1397=((0.00057588)*cj4);
IkReal x1398=((0.00057588)*sj4);
IkReal x1399=((0.00019196)*cj4);
IkReal x1400=((1.398)*sj4);
IkReal x1401=(r12*x1398);
IkReal x1402=((0.00660972)*x1390);
IkReal x1403=((1.398)*x1382);
IkReal x1404=((0.312576)*x1382);
IkReal x1405=(r22*x1398);
IkReal x1406=((1.398)*x1388);
IkReal x1407=((0.00660972)*x1395);
IkReal x1408=(sj5*x1400);
IkReal x1409=(x1384*x1385);
IkReal x1410=(x1386*x1397);
IkReal x1411=(x1390*x1400);
IkReal x1412=(x1384*x1397);
IkReal x1413=(x1385*x1390);
IkReal x1414=(x1395*x1400);
IkReal x1415=((((0.00660972)*x1384))+(((0.00299268)*x1387))+(((0.00057588)*r21*x1383))+(((0.00299268)*x1392))+((x1385*x1386))+((x1384*x1400)));
IkReal x1416=(x1380+x1410+x1411+x1409+x1403+x1402+x1401);
IkReal x1417=(((x1386*x1400))+(((0.312576)*x1388))+(((0.00660972)*x1386))+(((0.00057588)*r11*x1383))+(((0.00299268)*x1389))+(((0.00299268)*x1396))+((x1385*x1395)));
IkReal x1418=(x1381+x1412+x1413+x1414+x1407+x1406+x1405+x1404);
j1eval[0]=((3.52002592)+(IKabs(((0.44)+(((-1.0)*x1415))+x1418)))+(IKabs(((0.44)+(((-1.0)*x1384*x1393))+((x1393*x1395))+(((-0.00019196)*r21*x1383))+(((4.0)*pz))+((x1390*x1394))+(((-0.00220324)*x1384))+(((-0.00099756)*x1392))+(((-0.00099756)*x1387))+(((0.00220324)*x1395))+((r22*x1391))+((x1384*x1399))+(((0.466)*x1388))+(((0.104192)*x1382))+(((-1.0)*x1386*x1394)))))+(IKabs(((-0.56400324)+(((-1.0)*x1417))+x1416)))+(IKabs(((-0.56399676)+(((-1.0)*x1417))+x1416)))+(IKabs(((-0.18800324)+(((4.0)*py))+(((-1.0)*x1394*x1395))+(((-0.00019196)*r11*x1383))+((x1390*x1393))+(((-0.104192)*x1388))+(((-0.00220324)*x1386))+(((-0.00099756)*x1396))+((x1386*x1399))+(((-0.00099756)*x1389))+(((0.00220324)*x1390))+((x1384*x1394))+(((0.466)*x1382))+((r12*x1391))+(((-1.0)*x1386*x1393)))))+(IKabs(((-0.44)+(((-1.0)*x1415))+x1418))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x1419=((12.0)*pz);
IkReal x1420=((4.0)*pz);
IkReal x1421=(r21*sj5);
IkReal x1422=((0.00057588)*cj4);
IkReal x1423=((0.312576)*sj4);
IkReal x1424=(cj5*r10);
IkReal x1425=((1.398)*sj4);
IkReal x1426=(r11*sj5);
IkReal x1427=(cj4*r22);
IkReal x1428=(r22*sj4);
IkReal x1429=(cj5*r21);
IkReal x1430=((0.466)*sj4);
IkReal x1431=(cj5*r20);
IkReal x1432=(r20*sj5);
IkReal x1433=((0.00019196)*cj4);
IkReal x1434=((0.104192)*sj4);
IkReal x1435=(cj4*r12);
IkReal x1436=((0.312576)*x1435);
IkReal x1437=((0.00057588)*x1428);
IkReal x1438=((1.398)*x1427);
IkReal x1439=((0.00660972)*x1421);
IkReal x1440=((0.00220324)*x1421);
IkReal x1441=((0.104192)*x1435);
IkReal x1442=((0.466)*x1427);
IkReal x1443=((0.00019196)*x1428);
IkReal x1444=(x1422*x1431);
IkReal x1445=(x1423*x1426);
IkReal x1446=(x1421*x1425);
IkReal x1447=(x1426*x1434);
IkReal x1448=(x1421*x1430);
IkReal x1449=(x1431*x1433);
IkReal x1450=(((x1423*x1424))+(((0.00299268)*x1432))+((x1425*x1431))+(((0.00660972)*x1431))+((x1421*x1422))+(((0.00299268)*x1429)));
IkReal x1451=((((0.00099756)*x1432))+(((0.00220324)*x1431))+((x1430*x1431))+((x1421*x1433))+((x1424*x1434))+(((0.00099756)*x1429)));
IkReal x1452=(x1419+x1436+x1437+x1438+x1439+x1446+x1445+x1444);
IkReal x1453=(x1420+x1447+x1443+x1442+x1441+x1440+x1449+x1448);
op[0]=((0.44)+(((-1.0)*x1451))+x1453);
op[1]=-6.48e-6;
op[2]=((0.44)+(((-1.0)*x1450))+x1452);
op[3]=-1.296e-5;
op[4]=((-0.44)+(((-1.0)*x1450))+x1452);
op[5]=-6.48e-6;
op[6]=((-0.44)+(((-1.0)*x1451))+x1453);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1454=((4.0)*py);
IkReal x1455=((12.0)*py);
IkReal x1456=(r12*sj4);
IkReal x1457=(r10*sj5);
IkReal x1458=(cj5*r10);
IkReal x1459=(sj4*sj5);
IkReal x1460=(cj4*r12);
IkReal x1461=(cj4*r22);
IkReal x1462=(r11*sj5);
IkReal x1463=(cj5*r11);
IkReal x1464=((0.466)*x1460);
IkReal x1465=((0.00057588)*x1456);
IkReal x1466=((0.00660972)*x1462);
IkReal x1467=((1.398)*x1460);
IkReal x1468=((0.00019196)*x1456);
IkReal x1469=((0.00220324)*x1462);
IkReal x1470=((0.00220324)*x1458);
IkReal x1471=((0.00099756)*x1457);
IkReal x1472=((0.00099756)*x1463);
IkReal x1473=((0.104192)*x1461);
IkReal x1474=(cj4*x1462);
IkReal x1475=(cj5*r20*sj4);
IkReal x1476=((0.00019196)*cj4*x1458);
IkReal x1477=((0.466)*r11*x1459);
IkReal x1478=((0.312576)*x1475);
IkReal x1479=((0.00057588)*cj4*x1458);
IkReal x1480=((1.398)*r11*x1459);
IkReal x1481=((0.104192)*x1475);
IkReal x1482=((0.466)*sj4*x1458);
IkReal x1483=((0.00019196)*x1474);
IkReal x1484=((0.104192)*r21*x1459);
IkReal x1485=(x1469+x1468+x1464+x1454+x1476+x1477+x1481);
IkReal x1486=(x1465+x1467+x1466+x1455+x1478+x1479+x1480);
IkReal x1487=((((0.312576)*r21*x1459))+(((1.398)*sj4*x1458))+(((0.00299268)*x1457))+(((0.312576)*x1461))+(((0.00660972)*x1458))+(((0.00299268)*x1463))+(((0.00057588)*x1474)));
IkReal x1488=(x1472+x1473+x1470+x1471+x1483+x1482+x1484);
j1evalpoly[0]=((-0.18799676)+(((htj1*htj1)*(((-0.56399676)+(((-1.0)*x1487))+x1486))))+(((htj1*htj1*htj1*htj1)*(((-0.56400324)+(((-1.0)*x1487))+x1486))))+(((-1.0)*x1488))+(((-0.88)*htj1))+(((-1.76)*(htj1*htj1*htj1)))+x1485+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((-0.18800324)+(((-1.0)*x1488))+x1485))))+(((-0.88)*(htj1*htj1*htj1*htj1*htj1))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1489=(cj4*sj1);
IkReal x1490=(cj1*cj4);
IkReal x1491=((1.0)*sj4);
IkReal x1492=(cj1*sj5);
IkReal x1493=(cj5*sj1);
IkReal x1494=(cj1*cj5);
IkReal x1495=(sj1*sj4*sj5);
if( IKabs((((r21*sj4*x1492))+((r12*x1489))+((r11*x1495))+(((-1.0)*r20*x1491*x1494))+((r22*x1490))+(((-1.0)*r10*x1491*x1493)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*x1495))+(((-1.0)*r11*x1491*x1492))+(((-1.0)*r20*x1491*x1493))+((r10*sj4*x1494))+((r22*x1489))+(((-1.0)*r12*x1490)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*sj4*x1492))+((r12*x1489))+((r11*x1495))+(((-1.0)*r20*x1491*x1494))+((r22*x1490))+(((-1.0)*r10*x1491*x1493))))+IKsqr((((r21*x1495))+(((-1.0)*r11*x1491*x1492))+(((-1.0)*r20*x1491*x1493))+((r10*sj4*x1494))+((r22*x1489))+(((-1.0)*r12*x1490))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r21*sj4*x1492))+((r12*x1489))+((r11*x1495))+(((-1.0)*r20*x1491*x1494))+((r22*x1490))+(((-1.0)*r10*x1491*x1493))), (((r21*x1495))+(((-1.0)*r11*x1491*x1492))+(((-1.0)*r20*x1491*x1493))+((r10*sj4*x1494))+((r22*x1489))+(((-1.0)*r12*x1490))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1496=IKsin(j2);
IkReal x1497=IKcos(j2);
IkReal x1498=((0.1165)*sj1);
IkReal x1499=(cj4*sj5);
IkReal x1500=((1.0)*cj3);
IkReal x1501=(r12*sj4);
IkReal x1502=(cj4*cj5);
IkReal x1503=((0.00055081)*sj5);
IkReal x1504=((0.00024939)*sj5);
IkReal x1505=(cj5*r11);
IkReal x1506=(cj5*r21);
IkReal x1507=(cj5*sj4);
IkReal x1508=((1.0)*cj4);
IkReal x1509=((0.00055081)*cj5);
IkReal x1510=(sj3*sj5);
IkReal x1511=(r22*sj4);
IkReal x1512=(sj1*x1497);
IkReal x1513=(cj1*x1496);
IkReal x1514=(cj1*x1497);
IkReal x1515=(sj1*x1496);
IkReal x1516=((1.0)*sj4*sj5);
IkReal x1517=(x1513+x1512);
evalcond[0]=((((-1.0)*r22*x1508))+((r20*x1507))+x1517+(((-1.0)*r21*x1516)));
evalcond[1]=((((-1.0)*x1514))+((r10*x1507))+x1515+(((-1.0)*r11*x1516))+(((-1.0)*r12*x1508)));
evalcond[2]=(((sj3*x1505))+((r10*x1510))+(((-1.0)*r10*x1500*x1502))+x1517+((cj3*r11*x1499))+(((-1.0)*x1500*x1501)));
evalcond[3]=(((sj3*x1506))+(((-1.0)*x1515))+((r20*x1510))+(((-1.0)*r20*x1500*x1502))+x1514+((cj3*r21*x1499))+(((-1.0)*x1500*x1511)));
evalcond[4]=((((-0.1165)*x1513))+(((-4.799e-5)*x1511))+(((8.1e-7)*sj1))+((r20*x1509))+((r20*x1504))+(((0.00024939)*x1506))+(((0.11)*cj1))+(((-0.026048)*x1515))+(((-1.0)*x1497*x1498))+(((-1.0)*pz))+(((-4.799e-5)*r20*x1502))+(((-1.0)*r21*x1503))+(((0.026048)*x1514))+(((4.799e-5)*r21*x1499)));
evalcond[5]=((0.047)+(((-4.799e-5)*x1501))+((r10*x1509))+((r10*x1504))+(((0.00024939)*x1505))+(((4.799e-5)*r11*x1499))+(((-1.0)*x1496*x1498))+(((-1.0)*py))+(((-8.1e-7)*cj1))+(((0.11)*sj1))+(((-4.799e-5)*r10*x1502))+(((-1.0)*r11*x1503))+(((0.026048)*x1513))+(((0.026048)*x1512))+(((0.1165)*x1514)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x1518=((1.0)*cj5);
IkReal x1519=((1.0)*sj5);
IkReal x1520=(((r11*sj4*sj5))+((cj4*r12))+(((-1.0)*r10*sj4*x1518)));
j3eval[0]=x1520;
j3eval[1]=((IKabs(((((-1.0)*r20*x1519))+(((-1.0)*r21*x1518)))))+(IKabs((((r22*sj4))+((cj4*cj5*r20))+(((-1.0)*cj4*r21*x1519))))));
j3eval[2]=IKsign(x1520);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x1521=((1.0)*r11);
IkReal x1522=((1.0)*sj5);
IkReal x1523=(((cj5*r20*sj4))+(((-1.0)*r21*sj4*x1522))+(((-1.0)*cj4*r22)));
j3eval[0]=x1523;
j3eval[1]=((IKabs(((((-1.0)*cj5*x1521))+(((-1.0)*r10*x1522)))))+(IKabs((((cj4*cj5*r10))+(((-1.0)*cj4*sj5*x1521))+((r12*sj4))))));
j3eval[2]=IKsign(x1523);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x1524=cj4*cj4;
IkReal x1525=cj5*cj5;
IkReal x1526=r01*r01;
IkReal x1527=r02*r02;
IkReal x1528=r00*r00;
IkReal x1529=(cj5*r00);
IkReal x1530=(r01*sj5);
IkReal x1531=(r02*sj4);
IkReal x1532=((2.0)*cj4);
IkReal x1533=((1.0)*x1524);
IkReal x1534=(x1525*x1528);
IkReal x1535=(x1525*x1526);
IkReal x1536=(((x1524*x1527))+(((-1.0)*x1535))+((x1530*x1531*x1532))+((x1524*x1535))+(((-1.0)*x1529*x1531*x1532))+x1534+(((-1.0)*x1533*x1534))+(((2.0)*x1524*x1529*x1530))+(((-1.0)*x1526*x1533))+(((-1.0)*x1528))+(((-1.0)*x1527))+(((-2.0)*x1529*x1530)));
j3eval[0]=x1536;
j3eval[1]=IKsign(x1536);
j3eval[2]=((IKabs(((((-1.0)*cj4*x1529))+(((-1.0)*x1531))+((cj4*x1530)))))+(IKabs(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1537=cj4*cj4;
IkReal x1538=cj5*cj5;
IkReal x1539=r01*r01;
IkReal x1540=r02*r02;
IkReal x1541=r00*r00;
IkReal x1542=((1.0)*cj5);
IkReal x1543=(cj4*r00);
IkReal x1544=(r02*sj4);
IkReal x1545=((2.0)*cj5);
IkReal x1546=(r00*sj5);
IkReal x1547=((1.0)*x1538);
IkReal x1548=(cj4*r01*sj5);
IkReal x1549=(x1537*x1539);
CheckValue<IkReal> x1550 = IKatan2WithCheck(IkReal(((((-1.0)*x1544))+x1548+(((-1.0)*x1542*x1543)))),IkReal(((((-1.0)*x1546))+(((-1.0)*r01*x1542)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1550.valid){
continue;
}
CheckValue<IkReal> x1551=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1537*x1541*x1547))+(((-1.0)*x1549))+(((-1.0)*x1540))+(((-1.0)*x1541))+(((2.0)*x1544*x1548))+((x1538*x1541))+((x1538*x1549))+((x1537*x1540))+((r01*x1537*x1545*x1546))+(((-1.0)*x1543*x1544*x1545))+(((-1.0)*x1539*x1547))+(((-1.0)*r01*x1545*x1546)))),-1);
if(!x1551.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1550.value)+(((1.5707963267949)*(x1551.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x1552=IKsin(j3);
IkReal x1553=IKcos(j3);
IkReal x1554=(r02*sj4);
IkReal x1555=(cj4*cj5);
IkReal x1556=(cj4*sj5);
IkReal x1557=(cj5*r01);
IkReal x1558=(r00*sj5);
IkReal x1559=((1.0)*x1553);
IkReal x1560=((1.0)*x1552);
evalcond[0]=(((x1552*x1557))+((x1552*x1558))+(((-1.0)*r00*x1555*x1559))+(((-1.0)*x1554*x1559))+((r01*x1553*x1556)));
evalcond[1]=(((r21*x1552*x1556))+(((-1.0)*r20*sj5*x1559))+(((-1.0)*r20*x1555*x1560))+(((-1.0)*r22*sj4*x1560))+(((-1.0)*cj5*r21*x1559)));
evalcond[2]=(((r11*x1552*x1556))+(((-1.0)*r12*sj4*x1560))+(((-1.0)*r10*sj5*x1559))+(((-1.0)*cj5*r11*x1559))+(((-1.0)*r10*x1555*x1560)));
evalcond[3]=((1.0)+(((-1.0)*x1558*x1559))+(((-1.0)*r00*x1555*x1560))+(((-1.0)*x1557*x1559))+(((-1.0)*x1554*x1560))+((r01*x1552*x1556)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
j1eval[0]=((1.0)+(((19290.1234567901)*(IKabs(((0.44)+(((0.312576)*cj4*r12))+(((-1.398)*r21*sj4*sj5))+(((-1.398)*cj4*r22))+(((-12.0)*pz))+(((-0.312576)*cj5*r10*sj4))+(((-0.00660972)*r21*sj5))+(((-0.00057588)*r22*sj4))+(((-0.00057588)*cj4*cj5*r20))+(((0.312576)*r11*sj4*sj5))+(((0.00299268)*r20*sj5))+(((0.00299268)*cj5*r21))+(((1.398)*cj5*r20*sj4))+(((0.00057588)*cj4*r21*sj5))+(((0.00660972)*cj5*r20)))))))+(((19290.1234567901)*(IKabs(((-0.44)+(((0.312576)*cj4*r12))+(((-1.398)*r21*sj4*sj5))+(((-1.398)*cj4*r22))+(((-12.0)*pz))+(((-0.312576)*cj5*r10*sj4))+(((-0.00660972)*r21*sj5))+(((-0.00057588)*r22*sj4))+(((-0.00057588)*cj4*cj5*r20))+(((0.312576)*r11*sj4*sj5))+(((0.00299268)*r20*sj5))+(((0.00299268)*cj5*r21))+(((1.398)*cj5*r20*sj4))+(((0.00057588)*cj4*r21*sj5))+(((0.00660972)*cj5*r20)))))))+(((19290.1234567901)*(IKabs(((-0.44)+(((0.466)*cj5*r20*sj4))+(((0.104192)*r11*sj4*sj5))+(((-0.104192)*cj5*r10*sj4))+(((0.104192)*cj4*r12))+(((0.00019196)*cj4*r21*sj5))+(((-0.00220324)*r21*sj5))+(((-0.00019196)*cj4*cj5*r20))+(((0.00220324)*cj5*r20))+(((-0.466)*cj4*r22))+(((-0.466)*r21*sj4*sj5))+(((-4.0)*pz))+(((0.00099756)*cj5*r21))+(((0.00099756)*r20*sj5))+(((-0.00019196)*r22*sj4)))))))+(((19290.1234567901)*(IKabs(((-0.44)+(((0.00057588)*cj4*cj5*r20))+(((-1.398)*cj5*r20*sj4))+(((-0.00299268)*cj5*r21))+(((12.0)*pz))+(((-0.00660972)*cj5*r20))+(((-0.00057588)*cj4*r21*sj5))+(((0.312576)*r20*sj3*sj5))+(((0.312576)*cj5*r21*sj3))+(((-0.312576)*cj3*cj4*cj5*r20))+(((0.00057588)*r22*sj4))+(((1.398)*cj4*r22))+(((-0.00299268)*r20*sj5))+(((0.312576)*cj3*cj4*r21*sj5))+(((0.00660972)*r21*sj5))+(((1.398)*r21*sj4*sj5))+(((-0.312576)*cj3*r22*sj4)))))))+(((19290.1234567901)*(IKabs(((0.44)+(((0.00220324)*r21*sj5))+(((-0.00220324)*cj5*r20))+(((4.0)*pz))+(((0.104192)*cj3*cj4*r21*sj5))+(((-0.00099756)*r20*sj5))+(((0.466)*cj4*r22))+(((0.104192)*cj5*r21*sj3))+(((0.466)*r21*sj4*sj5))+(((-0.104192)*cj3*r22*sj4))+(((-0.00099756)*cj5*r21))+(((-0.466)*cj5*r20*sj4))+(((0.00019196)*cj4*cj5*r20))+(((-0.00019196)*cj4*r21*sj5))+(((0.00019196)*r22*sj4))+(((0.104192)*r20*sj3*sj5))+(((-0.104192)*cj3*cj4*cj5*r20)))))))+(((19290.1234567901)*(IKabs(((0.44)+(((0.00057588)*cj4*cj5*r20))+(((-1.398)*cj5*r20*sj4))+(((-0.00299268)*cj5*r21))+(((12.0)*pz))+(((-0.00660972)*cj5*r20))+(((-0.00057588)*cj4*r21*sj5))+(((0.312576)*r20*sj3*sj5))+(((0.312576)*cj5*r21*sj3))+(((-0.312576)*cj3*cj4*cj5*r20))+(((0.00057588)*r22*sj4))+(((1.398)*cj4*r22))+(((-0.00299268)*r20*sj5))+(((0.312576)*cj3*cj4*r21*sj5))+(((0.00660972)*r21*sj5))+(((1.398)*r21*sj4*sj5))+(((-0.312576)*cj3*r22*sj4))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x1561=(r21*sj5);
IkReal x1562=((0.00057588)*cj4);
IkReal x1563=((0.312576)*sj4);
IkReal x1564=(cj5*r10);
IkReal x1565=((1.398)*sj4);
IkReal x1566=(r11*sj5);
IkReal x1567=(cj4*r22);
IkReal x1568=(r22*sj4);
IkReal x1569=(cj5*r21);
IkReal x1570=((0.466)*sj4);
IkReal x1571=(cj5*r20);
IkReal x1572=(r20*sj5);
IkReal x1573=((0.00019196)*cj4);
IkReal x1574=((0.104192)*sj4);
IkReal x1575=(cj4*r12);
IkReal x1576=((0.312576)*x1575);
IkReal x1577=((0.00299268)*x1572);
IkReal x1578=((0.00299268)*x1569);
IkReal x1579=((0.00660972)*x1571);
IkReal x1580=((0.104192)*x1575);
IkReal x1581=((0.00220324)*x1571);
IkReal x1582=((0.00099756)*x1569);
IkReal x1583=((0.00099756)*x1572);
IkReal x1584=(x1563*x1566);
IkReal x1585=(x1565*x1571);
IkReal x1586=(x1561*x1562);
IkReal x1587=(x1570*x1571);
IkReal x1588=(x1566*x1574);
IkReal x1589=(x1561*x1573);
IkReal x1590=((((12.0)*pz))+((x1561*x1565))+((x1562*x1571))+(((0.00057588)*x1568))+((x1563*x1564))+(((1.398)*x1567))+(((0.00660972)*x1561)));
IkReal x1591=(((x1571*x1573))+(((4.0)*pz))+(((0.00019196)*x1568))+(((0.466)*x1567))+(((0.00220324)*x1561))+((x1561*x1570))+((x1564*x1574)));
IkReal x1592=(x1579+x1578+x1577+x1576+x1586+x1584+x1585);
IkReal x1593=(x1588+x1589+x1582+x1583+x1580+x1581+x1587);
op[0]=((-0.44)+(((-1.0)*x1591))+x1593);
op[1]=6.48e-6;
op[2]=((-0.44)+(((-1.0)*x1590))+x1592);
op[3]=1.296e-5;
op[4]=((0.44)+(((-1.0)*x1590))+x1592);
op[5]=6.48e-6;
op[6]=((0.44)+(((-1.0)*x1591))+x1593);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1594=((4.0)*pz);
IkReal x1595=((12.0)*pz);
IkReal x1596=(r21*sj5);
IkReal x1597=((0.00057588)*cj4);
IkReal x1598=((0.312576)*cj5);
IkReal x1599=(cj3*cj4);
IkReal x1600=((1.398)*sj4);
IkReal x1601=(cj5*r21);
IkReal x1602=(r22*sj4);
IkReal x1603=(cj5*r20);
IkReal x1604=((0.466)*sj4);
IkReal x1605=(r20*sj5);
IkReal x1606=(cj4*r22);
IkReal x1607=((0.00019196)*cj4);
IkReal x1608=((0.104192)*sj3);
IkReal x1609=((0.00220324)*x1596);
IkReal x1610=((0.466)*x1606);
IkReal x1611=((0.00019196)*x1602);
IkReal x1612=((0.00057588)*x1602);
IkReal x1613=((1.398)*x1606);
IkReal x1614=((0.00660972)*x1596);
IkReal x1615=((0.00220324)*x1603);
IkReal x1616=((0.00099756)*x1601);
IkReal x1617=((0.00099756)*x1605);
IkReal x1618=(x1601*x1608);
IkReal x1619=(x1596*x1604);
IkReal x1620=(x1603*x1607);
IkReal x1621=(x1597*x1603);
IkReal x1622=((0.312576)*sj3*x1605);
IkReal x1623=(r21*sj3*x1598);
IkReal x1624=(x1596*x1600);
IkReal x1625=(x1605*x1608);
IkReal x1626=(x1603*x1604);
IkReal x1627=(x1596*x1607);
IkReal x1628=((0.104192)*cj3*x1602);
IkReal x1629=((0.104192)*x1596*x1599);
IkReal x1630=((0.312576)*x1596*x1599);
IkReal x1631=((0.104192)*x1599*x1603);
IkReal x1632=(((x1596*x1597))+(((0.312576)*cj3*x1602))+((x1600*x1603))+(((0.00299268)*x1601))+(((0.00299268)*x1605))+(((0.00660972)*x1603))+((r20*x1598*x1599)));
IkReal x1633=(x1627+x1626+x1628+x1616+x1617+x1615+x1631);
IkReal x1634=(x1623+x1622+x1621+x1624+x1614+x1612+x1613+x1630+x1595);
IkReal x1635=(x1620+x1625+x1629+x1618+x1619+x1610+x1611+x1609+x1594);
j1evalpoly[0]=((-0.44)+(((-6.48e-6)*htj1))+x1635+(((-6.48e-6)*(htj1*htj1*htj1*htj1*htj1)))+(((-1.0)*x1633))+(((-1.296e-5)*(htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1)*(((0.44)+x1634+(((-1.0)*x1632))))))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.44)+x1635+(((-1.0)*x1633))))))+(((htj1*htj1)*(((-0.44)+x1634+(((-1.0)*x1632)))))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1636=(cj4*r22);
IkReal x1637=(sj1*sj4);
IkReal x1638=(cj5*r10);
IkReal x1639=(r21*sj5);
IkReal x1640=(cj4*r12);
IkReal x1641=(r11*sj5);
IkReal x1642=(cj1*sj4);
IkReal x1643=((1.0)*cj5*r20);
if( IKabs((((x1637*x1638))+((cj1*x1636))+(((-1.0)*x1642*x1643))+(((-1.0)*x1637*x1641))+((x1639*x1642))+(((-1.0)*sj1*x1640)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1637*x1639))+((sj1*x1636))+(((-1.0)*x1638*x1642))+((cj1*x1640))+((x1641*x1642))+(((-1.0)*x1637*x1643)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1637*x1638))+((cj1*x1636))+(((-1.0)*x1642*x1643))+(((-1.0)*x1637*x1641))+((x1639*x1642))+(((-1.0)*sj1*x1640))))+IKsqr((((x1637*x1639))+((sj1*x1636))+(((-1.0)*x1638*x1642))+((cj1*x1640))+((x1641*x1642))+(((-1.0)*x1637*x1643))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x1637*x1638))+((cj1*x1636))+(((-1.0)*x1642*x1643))+(((-1.0)*x1637*x1641))+((x1639*x1642))+(((-1.0)*sj1*x1640))), (((x1637*x1639))+((sj1*x1636))+(((-1.0)*x1638*x1642))+((cj1*x1640))+((x1641*x1642))+(((-1.0)*x1637*x1643))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1644=IKcos(j2);
IkReal x1645=IKsin(j2);
IkReal x1646=(cj4*sj5);
IkReal x1647=((1.0)*cj3);
IkReal x1648=(r12*sj4);
IkReal x1649=(cj4*cj5);
IkReal x1650=((0.00055081)*sj5);
IkReal x1651=((0.00024939)*sj5);
IkReal x1652=(cj5*r11);
IkReal x1653=(cj5*r21);
IkReal x1654=(cj5*sj4);
IkReal x1655=((1.0)*cj4);
IkReal x1656=((0.00055081)*cj5);
IkReal x1657=(sj3*sj5);
IkReal x1658=(r22*sj4);
IkReal x1659=(cj1*x1644);
IkReal x1660=(sj1*x1644);
IkReal x1661=(cj1*x1645);
IkReal x1662=(sj1*x1645);
IkReal x1663=((1.0)*sj4*sj5);
IkReal x1664=((1.0)*x1662);
evalcond[0]=((((-1.0)*r22*x1655))+x1661+x1660+((r20*x1654))+(((-1.0)*r21*x1663)));
evalcond[1]=(((r10*x1654))+x1659+(((-1.0)*r12*x1655))+(((-1.0)*r11*x1663))+(((-1.0)*x1664)));
evalcond[2]=(x1659+(((-1.0)*x1647*x1658))+((r20*x1657))+((sj3*x1653))+(((-1.0)*x1664))+(((-1.0)*r20*x1647*x1649))+((cj3*r21*x1646)));
evalcond[3]=((((-1.0)*x1647*x1648))+((r10*x1657))+(((-1.0)*x1661))+(((-1.0)*x1660))+((cj3*r11*x1646))+((sj3*x1652))+(((-1.0)*r10*x1647*x1649)));
evalcond[4]=((((4.799e-5)*r21*x1646))+(((-4.799e-5)*r20*x1649))+(((8.1e-7)*sj1))+(((-4.799e-5)*x1658))+((r20*x1656))+((r20*x1651))+(((-1.0)*r21*x1650))+(((-0.1165)*x1661))+(((-0.1165)*x1660))+(((0.11)*cj1))+(((-1.0)*pz))+(((-0.026048)*x1662))+(((0.026048)*x1659))+(((0.00024939)*x1653)));
evalcond[5]=((-0.047)+(((-4.799e-5)*x1648))+((r10*x1656))+((r10*x1651))+(((-0.11)*sj1))+(((0.1165)*x1662))+(((8.1e-7)*cj1))+(((-1.0)*r11*x1650))+(((4.799e-5)*r11*x1646))+(((-0.1165)*x1659))+(((-1.0)*py))+(((-4.799e-5)*r10*x1649))+(((-0.026048)*x1661))+(((-0.026048)*x1660))+(((0.00024939)*x1652)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1665=((1.0)*r11);
IkReal x1666=((1.0)*sj5);
CheckValue<IkReal> x1667 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x1665))+(((-1.0)*r10*x1666)))),IkReal(((((-1.0)*cj4*sj5*x1665))+((cj4*cj5*r10))+((r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1667.valid){
continue;
}
CheckValue<IkReal> x1668=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*sj4*x1666))+((cj5*r20*sj4))+(((-1.0)*cj4*r22)))),-1);
if(!x1668.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1667.value)+(((1.5707963267949)*(x1668.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x1669=IKsin(j3);
IkReal x1670=IKcos(j3);
IkReal x1671=(r02*sj4);
IkReal x1672=(cj4*cj5);
IkReal x1673=(cj4*sj5);
IkReal x1674=(cj5*r01);
IkReal x1675=(r00*sj5);
IkReal x1676=((1.0)*x1670);
IkReal x1677=((1.0)*x1669);
evalcond[0]=(((r01*x1670*x1673))+((x1669*x1675))+((x1669*x1674))+(((-1.0)*x1671*x1676))+(((-1.0)*r00*x1672*x1676)));
evalcond[1]=(((r21*x1669*x1673))+(((-1.0)*r22*sj4*x1677))+(((-1.0)*r20*x1672*x1677))+(((-1.0)*cj5*r21*x1676))+(((-1.0)*r20*sj5*x1676)));
evalcond[2]=((((-1.0)*r12*sj4*x1677))+((r11*x1669*x1673))+(((-1.0)*r10*x1672*x1677))+(((-1.0)*r10*sj5*x1676))+(((-1.0)*cj5*r11*x1676)));
evalcond[3]=((1.0)+((r01*x1669*x1673))+(((-1.0)*x1671*x1677))+(((-1.0)*x1674*x1676))+(((-1.0)*r00*x1672*x1677))+(((-1.0)*x1675*x1676)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
j1eval[0]=((1.0)+(((19290.1234567901)*(IKabs(((0.44)+(((0.312576)*cj4*r12))+(((-1.398)*r21*sj4*sj5))+(((-1.398)*cj4*r22))+(((-12.0)*pz))+(((-0.312576)*cj5*r10*sj4))+(((-0.00660972)*r21*sj5))+(((-0.00057588)*r22*sj4))+(((-0.00057588)*cj4*cj5*r20))+(((0.312576)*r11*sj4*sj5))+(((0.00299268)*r20*sj5))+(((0.00299268)*cj5*r21))+(((1.398)*cj5*r20*sj4))+(((0.00057588)*cj4*r21*sj5))+(((0.00660972)*cj5*r20)))))))+(((19290.1234567901)*(IKabs(((-0.44)+(((0.312576)*cj4*r12))+(((-1.398)*r21*sj4*sj5))+(((-1.398)*cj4*r22))+(((-12.0)*pz))+(((-0.312576)*cj5*r10*sj4))+(((-0.00660972)*r21*sj5))+(((-0.00057588)*r22*sj4))+(((-0.00057588)*cj4*cj5*r20))+(((0.312576)*r11*sj4*sj5))+(((0.00299268)*r20*sj5))+(((0.00299268)*cj5*r21))+(((1.398)*cj5*r20*sj4))+(((0.00057588)*cj4*r21*sj5))+(((0.00660972)*cj5*r20)))))))+(((19290.1234567901)*(IKabs(((-0.44)+(((0.466)*cj5*r20*sj4))+(((0.104192)*r11*sj4*sj5))+(((-0.104192)*cj5*r10*sj4))+(((0.104192)*cj4*r12))+(((0.00019196)*cj4*r21*sj5))+(((-0.00220324)*r21*sj5))+(((-0.00019196)*cj4*cj5*r20))+(((0.00220324)*cj5*r20))+(((-0.466)*cj4*r22))+(((-0.466)*r21*sj4*sj5))+(((-4.0)*pz))+(((0.00099756)*cj5*r21))+(((0.00099756)*r20*sj5))+(((-0.00019196)*r22*sj4)))))))+(((19290.1234567901)*(IKabs(((-0.44)+(((0.00057588)*cj4*cj5*r20))+(((-1.398)*cj5*r20*sj4))+(((-0.00299268)*cj5*r21))+(((12.0)*pz))+(((-0.00660972)*cj5*r20))+(((-0.00057588)*cj4*r21*sj5))+(((0.312576)*r20*sj3*sj5))+(((0.312576)*cj5*r21*sj3))+(((-0.312576)*cj3*cj4*cj5*r20))+(((0.00057588)*r22*sj4))+(((1.398)*cj4*r22))+(((-0.00299268)*r20*sj5))+(((0.312576)*cj3*cj4*r21*sj5))+(((0.00660972)*r21*sj5))+(((1.398)*r21*sj4*sj5))+(((-0.312576)*cj3*r22*sj4)))))))+(((19290.1234567901)*(IKabs(((0.44)+(((0.00220324)*r21*sj5))+(((-0.00220324)*cj5*r20))+(((4.0)*pz))+(((0.104192)*cj3*cj4*r21*sj5))+(((-0.00099756)*r20*sj5))+(((0.466)*cj4*r22))+(((0.104192)*cj5*r21*sj3))+(((0.466)*r21*sj4*sj5))+(((-0.104192)*cj3*r22*sj4))+(((-0.00099756)*cj5*r21))+(((-0.466)*cj5*r20*sj4))+(((0.00019196)*cj4*cj5*r20))+(((-0.00019196)*cj4*r21*sj5))+(((0.00019196)*r22*sj4))+(((0.104192)*r20*sj3*sj5))+(((-0.104192)*cj3*cj4*cj5*r20)))))))+(((19290.1234567901)*(IKabs(((0.44)+(((0.00057588)*cj4*cj5*r20))+(((-1.398)*cj5*r20*sj4))+(((-0.00299268)*cj5*r21))+(((12.0)*pz))+(((-0.00660972)*cj5*r20))+(((-0.00057588)*cj4*r21*sj5))+(((0.312576)*r20*sj3*sj5))+(((0.312576)*cj5*r21*sj3))+(((-0.312576)*cj3*cj4*cj5*r20))+(((0.00057588)*r22*sj4))+(((1.398)*cj4*r22))+(((-0.00299268)*r20*sj5))+(((0.312576)*cj3*cj4*r21*sj5))+(((0.00660972)*r21*sj5))+(((1.398)*r21*sj4*sj5))+(((-0.312576)*cj3*r22*sj4))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x1678=(r21*sj5);
IkReal x1679=((0.00057588)*cj4);
IkReal x1680=((0.312576)*sj4);
IkReal x1681=(cj5*r10);
IkReal x1682=((1.398)*sj4);
IkReal x1683=(r11*sj5);
IkReal x1684=(cj4*r22);
IkReal x1685=(r22*sj4);
IkReal x1686=(cj5*r21);
IkReal x1687=((0.466)*sj4);
IkReal x1688=(cj5*r20);
IkReal x1689=(r20*sj5);
IkReal x1690=((0.00019196)*cj4);
IkReal x1691=((0.104192)*sj4);
IkReal x1692=(cj4*r12);
IkReal x1693=((0.312576)*x1692);
IkReal x1694=((0.00299268)*x1689);
IkReal x1695=((0.00299268)*x1686);
IkReal x1696=((0.00660972)*x1688);
IkReal x1697=((0.104192)*x1692);
IkReal x1698=((0.00220324)*x1688);
IkReal x1699=((0.00099756)*x1686);
IkReal x1700=((0.00099756)*x1689);
IkReal x1701=(x1680*x1683);
IkReal x1702=(x1682*x1688);
IkReal x1703=(x1678*x1679);
IkReal x1704=(x1687*x1688);
IkReal x1705=(x1683*x1691);
IkReal x1706=(x1678*x1690);
IkReal x1707=(((x1680*x1681))+(((12.0)*pz))+(((0.00660972)*x1678))+(((1.398)*x1684))+((x1679*x1688))+(((0.00057588)*x1685))+((x1678*x1682)));
IkReal x1708=((((4.0)*pz))+(((0.466)*x1684))+((x1688*x1690))+(((0.00220324)*x1678))+(((0.00019196)*x1685))+((x1678*x1687))+((x1681*x1691)));
IkReal x1709=(x1701+x1702+x1703+x1696+x1694+x1695+x1693);
IkReal x1710=(x1700+x1704+x1705+x1706+x1697+x1698+x1699);
op[0]=((-0.44)+x1710+(((-1.0)*x1708)));
op[1]=6.48e-6;
op[2]=((-0.44)+x1709+(((-1.0)*x1707)));
op[3]=1.296e-5;
op[4]=((0.44)+x1709+(((-1.0)*x1707)));
op[5]=6.48e-6;
op[6]=((0.44)+x1710+(((-1.0)*x1708)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1711=((4.0)*pz);
IkReal x1712=((12.0)*pz);
IkReal x1713=(r21*sj5);
IkReal x1714=((0.00057588)*cj4);
IkReal x1715=((0.312576)*cj5);
IkReal x1716=(cj3*cj4);
IkReal x1717=((1.398)*sj4);
IkReal x1718=(cj5*r21);
IkReal x1719=(r22*sj4);
IkReal x1720=(cj5*r20);
IkReal x1721=((0.466)*sj4);
IkReal x1722=(r20*sj5);
IkReal x1723=(cj4*r22);
IkReal x1724=((0.00019196)*cj4);
IkReal x1725=((0.104192)*sj3);
IkReal x1726=((0.00220324)*x1713);
IkReal x1727=((0.466)*x1723);
IkReal x1728=((0.00019196)*x1719);
IkReal x1729=((0.00057588)*x1719);
IkReal x1730=((1.398)*x1723);
IkReal x1731=((0.00660972)*x1713);
IkReal x1732=((0.00220324)*x1720);
IkReal x1733=((0.00099756)*x1718);
IkReal x1734=((0.00099756)*x1722);
IkReal x1735=(x1718*x1725);
IkReal x1736=(x1713*x1721);
IkReal x1737=(x1720*x1724);
IkReal x1738=(x1714*x1720);
IkReal x1739=((0.312576)*sj3*x1722);
IkReal x1740=(r21*sj3*x1715);
IkReal x1741=(x1713*x1717);
IkReal x1742=(x1722*x1725);
IkReal x1743=(x1720*x1721);
IkReal x1744=(x1713*x1724);
IkReal x1745=((0.104192)*cj3*x1719);
IkReal x1746=((0.104192)*x1713*x1716);
IkReal x1747=((0.312576)*x1713*x1716);
IkReal x1748=((0.104192)*x1716*x1720);
IkReal x1749=((((0.00299268)*x1722))+(((0.312576)*cj3*x1719))+((x1713*x1714))+(((0.00660972)*x1720))+((r20*x1715*x1716))+((x1717*x1720))+(((0.00299268)*x1718)));
IkReal x1750=(x1733+x1732+x1734+x1748+x1744+x1745+x1743);
IkReal x1751=(x1729+x1739+x1738+x1731+x1730+x1712+x1747+x1740+x1741);
IkReal x1752=(x1728+x1726+x1727+x1735+x1737+x1736+x1711+x1746+x1742);
j1evalpoly[0]=((-0.44)+(((-6.48e-6)*htj1))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.44)+x1752+(((-1.0)*x1750))))))+x1752+(((htj1*htj1)*(((-0.44)+x1751+(((-1.0)*x1749))))))+(((-6.48e-6)*(htj1*htj1*htj1*htj1*htj1)))+(((-1.296e-5)*(htj1*htj1*htj1)))+(((-1.0)*x1750))+(((htj1*htj1*htj1*htj1)*(((0.44)+x1751+(((-1.0)*x1749)))))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1753=(cj4*r22);
IkReal x1754=(sj1*sj4);
IkReal x1755=(cj5*r10);
IkReal x1756=(r21*sj5);
IkReal x1757=(cj4*r12);
IkReal x1758=(r11*sj5);
IkReal x1759=(cj1*sj4);
IkReal x1760=((1.0)*cj5*r20);
if( IKabs((((x1754*x1755))+(((-1.0)*x1759*x1760))+((cj1*x1753))+(((-1.0)*sj1*x1757))+(((-1.0)*x1754*x1758))+((x1756*x1759)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1758*x1759))+(((-1.0)*x1754*x1760))+((x1754*x1756))+(((-1.0)*x1755*x1759))+((cj1*x1757))+((sj1*x1753)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1754*x1755))+(((-1.0)*x1759*x1760))+((cj1*x1753))+(((-1.0)*sj1*x1757))+(((-1.0)*x1754*x1758))+((x1756*x1759))))+IKsqr((((x1758*x1759))+(((-1.0)*x1754*x1760))+((x1754*x1756))+(((-1.0)*x1755*x1759))+((cj1*x1757))+((sj1*x1753))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x1754*x1755))+(((-1.0)*x1759*x1760))+((cj1*x1753))+(((-1.0)*sj1*x1757))+(((-1.0)*x1754*x1758))+((x1756*x1759))), (((x1758*x1759))+(((-1.0)*x1754*x1760))+((x1754*x1756))+(((-1.0)*x1755*x1759))+((cj1*x1757))+((sj1*x1753))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1761=IKcos(j2);
IkReal x1762=IKsin(j2);
IkReal x1763=(cj4*sj5);
IkReal x1764=((1.0)*cj3);
IkReal x1765=(r12*sj4);
IkReal x1766=(cj4*cj5);
IkReal x1767=((0.00055081)*sj5);
IkReal x1768=((0.00024939)*sj5);
IkReal x1769=(cj5*r11);
IkReal x1770=(cj5*r21);
IkReal x1771=(cj5*sj4);
IkReal x1772=((1.0)*cj4);
IkReal x1773=((0.00055081)*cj5);
IkReal x1774=(sj3*sj5);
IkReal x1775=(r22*sj4);
IkReal x1776=(cj1*x1761);
IkReal x1777=(sj1*x1761);
IkReal x1778=(cj1*x1762);
IkReal x1779=(sj1*x1762);
IkReal x1780=((1.0)*sj4*sj5);
IkReal x1781=((1.0)*x1779);
evalcond[0]=(x1777+x1778+((r20*x1771))+(((-1.0)*r21*x1780))+(((-1.0)*r22*x1772)));
evalcond[1]=((((-1.0)*x1781))+x1776+(((-1.0)*r11*x1780))+((r10*x1771))+(((-1.0)*r12*x1772)));
evalcond[2]=((((-1.0)*x1781))+x1776+((cj3*r21*x1763))+((r20*x1774))+(((-1.0)*x1764*x1775))+((sj3*x1770))+(((-1.0)*r20*x1764*x1766)));
evalcond[3]=((((-1.0)*r10*x1764*x1766))+(((-1.0)*x1777))+(((-1.0)*x1778))+((sj3*x1769))+((cj3*r11*x1763))+((r10*x1774))+(((-1.0)*x1764*x1765)));
evalcond[4]=((((-4.799e-5)*x1775))+(((-0.026048)*x1779))+((r20*x1768))+(((-1.0)*r21*x1767))+(((8.1e-7)*sj1))+(((-0.1165)*x1777))+(((-0.1165)*x1778))+(((4.799e-5)*r21*x1763))+(((0.11)*cj1))+((r20*x1773))+(((-1.0)*pz))+(((-4.799e-5)*r20*x1766))+(((0.00024939)*x1770))+(((0.026048)*x1776)));
evalcond[5]=((-0.047)+(((-0.026048)*x1777))+(((-0.026048)*x1778))+(((0.1165)*x1779))+(((-0.11)*sj1))+(((0.00024939)*x1769))+(((8.1e-7)*cj1))+(((4.799e-5)*r11*x1763))+(((-0.1165)*x1776))+(((-1.0)*r11*x1767))+((r10*x1773))+(((-1.0)*py))+((r10*x1768))+(((-4.799e-5)*x1765))+(((-4.799e-5)*r10*x1766)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1782=((1.0)*r21);
CheckValue<IkReal> x1783=IKPowWithIntegerCheck(IKsign((((r11*sj4*sj5))+((cj4*r12))+(((-1.0)*cj5*r10*sj4)))),-1);
if(!x1783.valid){
continue;
}
CheckValue<IkReal> x1784 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x1782))+(((-1.0)*r20*sj5)))),IkReal(((((-1.0)*cj4*sj5*x1782))+((r22*sj4))+((cj4*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1784.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1783.value)))+(x1784.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x1785=IKsin(j3);
IkReal x1786=IKcos(j3);
IkReal x1787=(r02*sj4);
IkReal x1788=(cj4*cj5);
IkReal x1789=(cj4*sj5);
IkReal x1790=(cj5*r01);
IkReal x1791=(r00*sj5);
IkReal x1792=((1.0)*x1786);
IkReal x1793=((1.0)*x1785);
evalcond[0]=((((-1.0)*x1787*x1792))+(((-1.0)*r00*x1788*x1792))+((r01*x1786*x1789))+((x1785*x1791))+((x1785*x1790)));
evalcond[1]=((((-1.0)*r20*sj5*x1792))+((r21*x1785*x1789))+(((-1.0)*r20*x1788*x1793))+(((-1.0)*cj5*r21*x1792))+(((-1.0)*r22*sj4*x1793)));
evalcond[2]=(((r11*x1785*x1789))+(((-1.0)*r12*sj4*x1793))+(((-1.0)*r10*x1788*x1793))+(((-1.0)*r10*sj5*x1792))+(((-1.0)*cj5*r11*x1792)));
evalcond[3]=((1.0)+(((-1.0)*x1787*x1793))+(((-1.0)*x1790*x1792))+(((-1.0)*r00*x1788*x1793))+((r01*x1785*x1789))+(((-1.0)*x1791*x1792)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
j1eval[0]=((1.0)+(((19290.1234567901)*(IKabs(((0.44)+(((0.312576)*cj4*r12))+(((-1.398)*r21*sj4*sj5))+(((-1.398)*cj4*r22))+(((-12.0)*pz))+(((-0.312576)*cj5*r10*sj4))+(((-0.00660972)*r21*sj5))+(((-0.00057588)*r22*sj4))+(((-0.00057588)*cj4*cj5*r20))+(((0.312576)*r11*sj4*sj5))+(((0.00299268)*r20*sj5))+(((0.00299268)*cj5*r21))+(((1.398)*cj5*r20*sj4))+(((0.00057588)*cj4*r21*sj5))+(((0.00660972)*cj5*r20)))))))+(((19290.1234567901)*(IKabs(((-0.44)+(((0.312576)*cj4*r12))+(((-1.398)*r21*sj4*sj5))+(((-1.398)*cj4*r22))+(((-12.0)*pz))+(((-0.312576)*cj5*r10*sj4))+(((-0.00660972)*r21*sj5))+(((-0.00057588)*r22*sj4))+(((-0.00057588)*cj4*cj5*r20))+(((0.312576)*r11*sj4*sj5))+(((0.00299268)*r20*sj5))+(((0.00299268)*cj5*r21))+(((1.398)*cj5*r20*sj4))+(((0.00057588)*cj4*r21*sj5))+(((0.00660972)*cj5*r20)))))))+(((19290.1234567901)*(IKabs(((-0.44)+(((0.466)*cj5*r20*sj4))+(((0.104192)*r11*sj4*sj5))+(((-0.104192)*cj5*r10*sj4))+(((0.104192)*cj4*r12))+(((0.00019196)*cj4*r21*sj5))+(((-0.00220324)*r21*sj5))+(((-0.00019196)*cj4*cj5*r20))+(((0.00220324)*cj5*r20))+(((-0.466)*cj4*r22))+(((-0.466)*r21*sj4*sj5))+(((-4.0)*pz))+(((0.00099756)*cj5*r21))+(((0.00099756)*r20*sj5))+(((-0.00019196)*r22*sj4)))))))+(((19290.1234567901)*(IKabs(((-0.44)+(((0.00057588)*cj4*cj5*r20))+(((-1.398)*cj5*r20*sj4))+(((-0.00299268)*cj5*r21))+(((12.0)*pz))+(((-0.00660972)*cj5*r20))+(((-0.00057588)*cj4*r21*sj5))+(((0.312576)*r20*sj3*sj5))+(((0.312576)*cj5*r21*sj3))+(((-0.312576)*cj3*cj4*cj5*r20))+(((0.00057588)*r22*sj4))+(((1.398)*cj4*r22))+(((-0.00299268)*r20*sj5))+(((0.312576)*cj3*cj4*r21*sj5))+(((0.00660972)*r21*sj5))+(((1.398)*r21*sj4*sj5))+(((-0.312576)*cj3*r22*sj4)))))))+(((19290.1234567901)*(IKabs(((0.44)+(((0.00220324)*r21*sj5))+(((-0.00220324)*cj5*r20))+(((4.0)*pz))+(((0.104192)*cj3*cj4*r21*sj5))+(((-0.00099756)*r20*sj5))+(((0.466)*cj4*r22))+(((0.104192)*cj5*r21*sj3))+(((0.466)*r21*sj4*sj5))+(((-0.104192)*cj3*r22*sj4))+(((-0.00099756)*cj5*r21))+(((-0.466)*cj5*r20*sj4))+(((0.00019196)*cj4*cj5*r20))+(((-0.00019196)*cj4*r21*sj5))+(((0.00019196)*r22*sj4))+(((0.104192)*r20*sj3*sj5))+(((-0.104192)*cj3*cj4*cj5*r20)))))))+(((19290.1234567901)*(IKabs(((0.44)+(((0.00057588)*cj4*cj5*r20))+(((-1.398)*cj5*r20*sj4))+(((-0.00299268)*cj5*r21))+(((12.0)*pz))+(((-0.00660972)*cj5*r20))+(((-0.00057588)*cj4*r21*sj5))+(((0.312576)*r20*sj3*sj5))+(((0.312576)*cj5*r21*sj3))+(((-0.312576)*cj3*cj4*cj5*r20))+(((0.00057588)*r22*sj4))+(((1.398)*cj4*r22))+(((-0.00299268)*r20*sj5))+(((0.312576)*cj3*cj4*r21*sj5))+(((0.00660972)*r21*sj5))+(((1.398)*r21*sj4*sj5))+(((-0.312576)*cj3*r22*sj4))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x1794=(r21*sj5);
IkReal x1795=((0.00057588)*cj4);
IkReal x1796=((0.312576)*sj4);
IkReal x1797=(cj5*r10);
IkReal x1798=((1.398)*sj4);
IkReal x1799=(r11*sj5);
IkReal x1800=(cj4*r22);
IkReal x1801=(r22*sj4);
IkReal x1802=(cj5*r21);
IkReal x1803=((0.466)*sj4);
IkReal x1804=(cj5*r20);
IkReal x1805=(r20*sj5);
IkReal x1806=((0.00019196)*cj4);
IkReal x1807=((0.104192)*sj4);
IkReal x1808=(cj4*r12);
IkReal x1809=((0.312576)*x1808);
IkReal x1810=((0.00299268)*x1805);
IkReal x1811=((0.00299268)*x1802);
IkReal x1812=((0.00660972)*x1804);
IkReal x1813=((0.104192)*x1808);
IkReal x1814=((0.00220324)*x1804);
IkReal x1815=((0.00099756)*x1802);
IkReal x1816=((0.00099756)*x1805);
IkReal x1817=(x1796*x1799);
IkReal x1818=(x1798*x1804);
IkReal x1819=(x1794*x1795);
IkReal x1820=(x1803*x1804);
IkReal x1821=(x1799*x1807);
IkReal x1822=(x1794*x1806);
IkReal x1823=((((1.398)*x1800))+(((12.0)*pz))+((x1795*x1804))+(((0.00660972)*x1794))+((x1796*x1797))+((x1794*x1798))+(((0.00057588)*x1801)));
IkReal x1824=((((0.00220324)*x1794))+(((4.0)*pz))+((x1794*x1803))+(((0.466)*x1800))+((x1797*x1807))+((x1804*x1806))+(((0.00019196)*x1801)));
IkReal x1825=(x1817+x1810+x1811+x1812+x1818+x1819+x1809);
IkReal x1826=(x1821+x1820+x1822+x1814+x1815+x1816+x1813);
op[0]=((-0.44)+(((-1.0)*x1824))+x1826);
op[1]=6.48e-6;
op[2]=((-0.44)+(((-1.0)*x1823))+x1825);
op[3]=1.296e-5;
op[4]=((0.44)+(((-1.0)*x1823))+x1825);
op[5]=6.48e-6;
op[6]=((0.44)+(((-1.0)*x1824))+x1826);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1827=((4.0)*pz);
IkReal x1828=((12.0)*pz);
IkReal x1829=(r21*sj5);
IkReal x1830=((0.00057588)*cj4);
IkReal x1831=((0.312576)*cj5);
IkReal x1832=(cj3*cj4);
IkReal x1833=((1.398)*sj4);
IkReal x1834=(cj5*r21);
IkReal x1835=(r22*sj4);
IkReal x1836=(cj5*r20);
IkReal x1837=((0.466)*sj4);
IkReal x1838=(r20*sj5);
IkReal x1839=(cj4*r22);
IkReal x1840=((0.00019196)*cj4);
IkReal x1841=((0.104192)*sj3);
IkReal x1842=((0.00220324)*x1829);
IkReal x1843=((0.466)*x1839);
IkReal x1844=((0.00019196)*x1835);
IkReal x1845=((0.00057588)*x1835);
IkReal x1846=((1.398)*x1839);
IkReal x1847=((0.00660972)*x1829);
IkReal x1848=((0.00220324)*x1836);
IkReal x1849=((0.00099756)*x1834);
IkReal x1850=((0.00099756)*x1838);
IkReal x1851=(x1834*x1841);
IkReal x1852=(x1829*x1837);
IkReal x1853=(x1836*x1840);
IkReal x1854=(x1830*x1836);
IkReal x1855=((0.312576)*sj3*x1838);
IkReal x1856=(r21*sj3*x1831);
IkReal x1857=(x1829*x1833);
IkReal x1858=(x1838*x1841);
IkReal x1859=(x1836*x1837);
IkReal x1860=(x1829*x1840);
IkReal x1861=((0.104192)*cj3*x1835);
IkReal x1862=((0.104192)*x1829*x1832);
IkReal x1863=((0.312576)*x1829*x1832);
IkReal x1864=((0.104192)*x1832*x1836);
IkReal x1865=((((0.312576)*cj3*x1835))+((x1829*x1830))+(((0.00660972)*x1836))+((r20*x1831*x1832))+(((0.00299268)*x1834))+(((0.00299268)*x1838))+((x1833*x1836)));
IkReal x1866=(x1861+x1860+x1864+x1859+x1850+x1849+x1848);
IkReal x1867=(x1863+x1828+x1854+x1855+x1856+x1857+x1847+x1846+x1845);
IkReal x1868=(x1862+x1827+x1858+x1851+x1852+x1853+x1843+x1842+x1844);
j1evalpoly[0]=((-0.44)+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.44)+x1868+(((-1.0)*x1866))))))+(((-6.48e-6)*htj1))+(((-6.48e-6)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1)*(((0.44)+x1867+(((-1.0)*x1865))))))+(((-1.296e-5)*(htj1*htj1*htj1)))+x1868+(((htj1*htj1)*(((-0.44)+x1867+(((-1.0)*x1865))))))+(((-1.0)*x1866)));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1869=(cj4*r22);
IkReal x1870=(sj1*sj4);
IkReal x1871=(cj5*r10);
IkReal x1872=(r21*sj5);
IkReal x1873=(cj4*r12);
IkReal x1874=(r11*sj5);
IkReal x1875=(cj1*sj4);
IkReal x1876=((1.0)*cj5*r20);
if( IKabs((((cj1*x1869))+(((-1.0)*sj1*x1873))+(((-1.0)*x1870*x1874))+((x1872*x1875))+((x1870*x1871))+(((-1.0)*x1875*x1876)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1871*x1875))+((x1874*x1875))+(((-1.0)*x1870*x1876))+((cj1*x1873))+((sj1*x1869))+((x1870*x1872)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x1869))+(((-1.0)*sj1*x1873))+(((-1.0)*x1870*x1874))+((x1872*x1875))+((x1870*x1871))+(((-1.0)*x1875*x1876))))+IKsqr(((((-1.0)*x1871*x1875))+((x1874*x1875))+(((-1.0)*x1870*x1876))+((cj1*x1873))+((sj1*x1869))+((x1870*x1872))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x1869))+(((-1.0)*sj1*x1873))+(((-1.0)*x1870*x1874))+((x1872*x1875))+((x1870*x1871))+(((-1.0)*x1875*x1876))), ((((-1.0)*x1871*x1875))+((x1874*x1875))+(((-1.0)*x1870*x1876))+((cj1*x1873))+((sj1*x1869))+((x1870*x1872))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1877=IKcos(j2);
IkReal x1878=IKsin(j2);
IkReal x1879=(cj4*sj5);
IkReal x1880=((1.0)*cj3);
IkReal x1881=(r12*sj4);
IkReal x1882=(cj4*cj5);
IkReal x1883=((0.00055081)*sj5);
IkReal x1884=((0.00024939)*sj5);
IkReal x1885=(cj5*r11);
IkReal x1886=(cj5*r21);
IkReal x1887=(cj5*sj4);
IkReal x1888=((1.0)*cj4);
IkReal x1889=((0.00055081)*cj5);
IkReal x1890=(sj3*sj5);
IkReal x1891=(r22*sj4);
IkReal x1892=(cj1*x1877);
IkReal x1893=(sj1*x1877);
IkReal x1894=(cj1*x1878);
IkReal x1895=(sj1*x1878);
IkReal x1896=((1.0)*sj4*sj5);
IkReal x1897=((1.0)*x1895);
evalcond[0]=(((r20*x1887))+(((-1.0)*r22*x1888))+(((-1.0)*r21*x1896))+x1894+x1893);
evalcond[1]=((((-1.0)*r12*x1888))+((r10*x1887))+(((-1.0)*r11*x1896))+x1892+(((-1.0)*x1897)));
evalcond[2]=((((-1.0)*x1880*x1891))+((r20*x1890))+(((-1.0)*r20*x1880*x1882))+x1892+((cj3*r21*x1879))+(((-1.0)*x1897))+((sj3*x1886)));
evalcond[3]=((((-1.0)*x1880*x1881))+((cj3*r11*x1879))+(((-1.0)*r10*x1880*x1882))+((r10*x1890))+(((-1.0)*x1893))+(((-1.0)*x1894))+((sj3*x1885)));
evalcond[4]=((((-0.026048)*x1895))+(((8.1e-7)*sj1))+((r20*x1889))+((r20*x1884))+(((0.11)*cj1))+(((-4.799e-5)*x1891))+(((0.026048)*x1892))+(((-1.0)*pz))+(((-0.1165)*x1894))+(((-0.1165)*x1893))+(((4.799e-5)*r21*x1879))+(((0.00024939)*x1886))+(((-4.799e-5)*r20*x1882))+(((-1.0)*r21*x1883)));
evalcond[5]=((-0.047)+(((-0.026048)*x1893))+(((-0.026048)*x1894))+(((-0.11)*sj1))+(((4.799e-5)*r11*x1879))+(((-4.799e-5)*x1881))+(((8.1e-7)*cj1))+(((0.1165)*x1895))+(((-1.0)*r11*x1883))+((r10*x1889))+((r10*x1884))+(((-1.0)*py))+(((-0.1165)*x1892))+(((0.00024939)*x1885))+(((-4.799e-5)*r10*x1882)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2, j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1898=((1.0)*sj0);
IkReal x1899=(cj4*cj5);
IkReal x1900=(cj0*r00);
IkReal x1901=((1.0)*cj5);
IkReal x1902=(cj4*sj5);
IkReal x1903=(cj0*r01);
CheckValue<IkReal> x1904 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r11*x1898))+(((-1.0)*sj5*x1900))+(((-1.0)*x1901*x1903))+(((-1.0)*r10*sj5*x1898)))),IkReal(((((-1.0)*r11*x1898*x1902))+(((-1.0)*x1902*x1903))+((r12*sj0*sj4))+((r10*sj0*x1899))+((x1899*x1900))+((cj0*r02*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1904.valid){
continue;
}
CheckValue<IkReal> x1905=IKPowWithIntegerCheck(IKsign((((r21*sj4*sj5))+((cj4*r22))+(((-1.0)*r20*sj4*x1901)))),-1);
if(!x1905.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1904.value)+(((1.5707963267949)*(x1905.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x1906=IKsin(j3);
IkReal x1907=IKcos(j3);
IkReal x1908=((1.0)*cj5);
IkReal x1909=(cj4*x1906);
IkReal x1910=((1.0)*sj5*x1907);
IkReal x1911=((1.0)*sj4*x1906);
evalcond[0]=((((-1.0)*r22*x1911))+((r21*sj5*x1909))+(((-1.0)*r20*x1908*x1909))+(((-1.0)*r20*x1910))+(((-1.0)*r21*x1907*x1908)));
evalcond[1]=(cj0+(((-1.0)*r11*x1907*x1908))+(((-1.0)*r12*x1911))+(((-1.0)*r10*x1910))+(((-1.0)*r10*x1908*x1909))+((r11*sj5*x1909)));
evalcond[2]=((((-1.0)*r00*x1910))+(((-1.0)*sj0))+(((-1.0)*r02*x1911))+((r01*sj5*x1909))+(((-1.0)*r00*x1908*x1909))+(((-1.0)*r01*x1907*x1908)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
j1eval[0]=((1.0)+(((38580.2469135802)*(IKabs(((0.44)+(((0.00220324)*r21*sj5))+(((-0.00220324)*cj5*r20))+(((4.0)*pz))+(((0.104192)*cj3*cj4*r21*sj5))+(((-0.00099756)*r20*sj5))+(((0.466)*cj4*r22))+(((0.104192)*cj5*r21*sj3))+(((0.466)*r21*sj4*sj5))+(((-0.104192)*cj3*r22*sj4))+(((-0.00099756)*cj5*r21))+(((-0.466)*cj5*r20*sj4))+(((0.00019196)*cj4*cj5*r20))+(((-0.00019196)*cj4*r21*sj5))+(((0.00019196)*r22*sj4))+(((0.104192)*r20*sj3*sj5))+(((-0.104192)*cj3*cj4*cj5*r20)))))))+(((38580.2469135802)*(IKabs(((((-0.00057588)*cj0*cj4*r21*sj5))+(((-0.00660972)*cj0*cj5*r20))+(((-0.312576)*cj5*r00*sj4))+(((-1.398)*cj0*cj5*r20*sj4))+(((0.00057588)*cj0*cj4*cj5*r20))+(((0.312576)*r01*sj4*sj5))+(((-0.00299268)*cj0*cj5*r21))+(((0.44)*cj0))+(((-0.00299268)*cj0*r20*sj5))+(((1.398)*cj0*cj4*r22))+(((0.00057588)*cj0*r22*sj4))+(((0.00660972)*cj0*r21*sj5))+(((12.0)*cj0*pz))+(((1.398)*cj0*r21*sj4*sj5))+(((0.312576)*cj4*r02)))))))+(((38580.2469135802)*(IKabs(((-0.44)+(((0.00057588)*cj4*cj5*r20))+(((-1.398)*cj5*r20*sj4))+(((-0.00299268)*cj5*r21))+(((12.0)*pz))+(((-0.00660972)*cj5*r20))+(((-0.00057588)*cj4*r21*sj5))+(((0.312576)*r20*sj3*sj5))+(((0.312576)*cj5*r21*sj3))+(((-0.312576)*cj3*cj4*cj5*r20))+(((0.00057588)*r22*sj4))+(((1.398)*cj4*r22))+(((-0.00299268)*r20*sj5))+(((0.312576)*cj3*cj4*r21*sj5))+(((0.00660972)*r21*sj5))+(((1.398)*r21*sj4*sj5))+(((-0.312576)*cj3*r22*sj4)))))))+(((38580.2469135802)*(IKabs(((((-0.00099756)*cj0*cj5*r21))+(((-0.00220324)*cj0*cj5*r20))+(((4.0)*cj0*pz))+(((0.00019196)*cj0*cj4*cj5*r20))+(((0.466)*cj0*r21*sj4*sj5))+(((0.44)*cj0))+(((0.466)*cj0*cj4*r22))+(((-0.00099756)*cj0*r20*sj5))+(((0.104192)*cj4*r02))+(((-0.104192)*cj5*r00*sj4))+(((0.00019196)*cj0*r22*sj4))+(((0.00220324)*cj0*r21*sj5))+(((0.104192)*r01*sj4*sj5))+(((-0.00019196)*cj0*cj4*r21*sj5))+(((-0.466)*cj0*cj5*r20*sj4)))))))+(IKabs(cj0))+(((38580.2469135802)*(IKabs(((((-0.00057588)*cj0*cj4*r21*sj5))+(((-0.00660972)*cj0*cj5*r20))+(((-0.312576)*cj5*r00*sj4))+(((-1.398)*cj0*cj5*r20*sj4))+(((0.00057588)*cj0*cj4*cj5*r20))+(((-0.44)*cj0))+(((0.312576)*r01*sj4*sj5))+(((-0.00299268)*cj0*cj5*r21))+(((-0.00299268)*cj0*r20*sj5))+(((1.398)*cj0*cj4*r22))+(((0.00057588)*cj0*r22*sj4))+(((0.00660972)*cj0*r21*sj5))+(((12.0)*cj0*pz))+(((1.398)*cj0*r21*sj4*sj5))+(((0.312576)*cj4*r02)))))))+(((38580.2469135802)*(IKabs(((0.44)+(((0.00057588)*cj4*cj5*r20))+(((-1.398)*cj5*r20*sj4))+(((-0.00299268)*cj5*r21))+(((12.0)*pz))+(((-0.00660972)*cj5*r20))+(((-0.00057588)*cj4*r21*sj5))+(((0.312576)*r20*sj3*sj5))+(((0.312576)*cj5*r21*sj3))+(((-0.312576)*cj3*cj4*cj5*r20))+(((0.00057588)*r22*sj4))+(((1.398)*cj4*r22))+(((-0.00299268)*r20*sj5))+(((0.312576)*cj3*cj4*r21*sj5))+(((0.00660972)*r21*sj5))+(((1.398)*r21*sj4*sj5))+(((-0.312576)*cj3*r22*sj4))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x1912=((12.0)*pz);
IkReal x1913=((4.0)*pz);
IkReal x1914=(r21*sj5);
IkReal x1915=((0.00057588)*cj4);
IkReal x1916=((0.312576)*cj5);
IkReal x1917=(cj3*cj4);
IkReal x1918=((1.398)*sj4);
IkReal x1919=(cj4*r22);
IkReal x1920=(r21*sj3);
IkReal x1921=(r22*sj4);
IkReal x1922=(cj5*r21);
IkReal x1923=(cj5*r20);
IkReal x1924=((0.466)*sj4);
IkReal x1925=(r20*sj5);
IkReal x1926=((0.00019196)*cj4);
IkReal x1927=((0.00057588)*x1921);
IkReal x1928=((1.398)*x1919);
IkReal x1929=((0.00660972)*x1914);
IkReal x1930=((0.00220324)*x1914);
IkReal x1931=((0.466)*x1919);
IkReal x1932=((0.00019196)*x1921);
IkReal x1933=(x1915*x1923);
IkReal x1934=((0.312576)*sj3*x1925);
IkReal x1935=(x1916*x1920);
IkReal x1936=(x1914*x1918);
IkReal x1937=((0.104192)*cj5*x1920);
IkReal x1938=(x1914*x1924);
IkReal x1939=(x1923*x1926);
IkReal x1940=((0.104192)*sj3*x1925);
IkReal x1941=((0.312576)*x1914*x1917);
IkReal x1942=((0.104192)*x1914*x1917);
IkReal x1943=(((x1918*x1923))+((x1914*x1915))+(((0.312576)*cj3*x1921))+(((0.00660972)*x1923))+((r20*x1916*x1917))+(((0.00299268)*x1925))+(((0.00299268)*x1922)));
IkReal x1944=((((0.00220324)*x1923))+(((0.00099756)*x1925))+(((0.00099756)*x1922))+(((0.104192)*x1917*x1923))+((x1923*x1924))+(((0.104192)*cj3*x1921))+((x1914*x1926)));
IkReal x1945=(x1927+x1928+x1929+x1933+x1936+x1935+x1934+x1912+x1941);
IkReal x1946=(x1932+x1931+x1930+x1937+x1939+x1938+x1913+x1942+x1940);
op[0]=((0.44)+(((-1.0)*x1944))+x1946);
op[1]=-6.48e-6;
op[2]=((0.44)+(((-1.0)*x1943))+x1945);
op[3]=-1.296e-5;
op[4]=((-0.44)+(((-1.0)*x1943))+x1945);
op[5]=-6.48e-6;
op[6]=((-0.44)+(((-1.0)*x1944))+x1946);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1947=((0.44)*cj0);
IkReal x1948=(cj0*sj5);
IkReal x1949=(cj4*r21);
IkReal x1950=(cj4*r02);
IkReal x1951=(r21*sj4);
IkReal x1952=((0.00019196)*cj0);
IkReal x1953=(r22*sj4);
IkReal x1954=((0.466)*cj0);
IkReal x1955=(cj4*r22);
IkReal x1956=(cj0*cj5);
IkReal x1957=((6.48e-6)*cj0);
IkReal x1958=((0.00057588)*cj0);
IkReal x1959=(r20*sj4);
IkReal x1960=(cj0*pz);
IkReal x1961=((4.0)*x1960);
IkReal x1962=((0.104192)*x1950);
IkReal x1963=((12.0)*x1960);
IkReal x1964=((0.312576)*x1950);
IkReal x1965=(r01*sj4*sj5);
IkReal x1966=(cj5*r00*sj4);
IkReal x1967=(cj4*cj5*r20);
IkReal x1968=(x1954*x1955);
IkReal x1969=(x1952*x1953);
IkReal x1970=((0.312576)*x1965);
IkReal x1971=((1.398)*cj0*x1955);
IkReal x1972=(x1953*x1958);
IkReal x1973=((0.00660972)*r21*x1948);
IkReal x1974=((0.312576)*x1966);
IkReal x1975=((0.00299268)*r20*x1948);
IkReal x1976=((0.00660972)*r20*x1956);
IkReal x1977=((0.00299268)*r21*x1956);
IkReal x1978=((0.00220324)*r21*x1948);
IkReal x1979=((0.104192)*x1965);
IkReal x1980=((0.00099756)*r21*x1956);
IkReal x1981=((0.104192)*x1966);
IkReal x1982=((0.00220324)*r20*x1956);
IkReal x1983=((0.00099756)*r20*x1948);
IkReal x1984=(x1952*x1967);
IkReal x1985=((0.466)*x1948*x1951);
IkReal x1986=((0.00057588)*cj4*r20*x1956);
IkReal x1987=((1.398)*x1948*x1951);
IkReal x1988=((0.00057588)*x1948*x1949);
IkReal x1989=((1.398)*x1956*x1959);
IkReal x1990=((0.00019196)*x1948*x1949);
IkReal x1991=(cj5*x1954*x1959);
IkReal x1992=(x1982+x1983+x1980+x1981+x1991+x1990);
IkReal x1993=(x1988+x1989+x1977+x1976+x1975+x1974);
IkReal x1994=(x1984+x1985+x1968+x1969+x1961+x1962+x1979+x1978);
IkReal x1995=(x1986+x1987+x1964+x1963+x1973+x1972+x1971+x1970);
j1evalpoly[0]=((((-1.0)*x1957*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*((x1994+x1947+(((-1.0)*x1992))))))+(((htj1*htj1*htj1*htj1)*((x1995+x1947+(((-1.0)*x1993))))))+(((-1.296e-5)*cj0*(htj1*htj1*htj1)))+(((-1.0)*x1947))+(((-1.0)*htj1*x1957))+x1994+(((htj1*htj1)*(((((-1.0)*x1947))+x1995+(((-1.0)*x1993))))))+(((-1.0)*x1992)));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1996=(r22*sj1);
IkReal x1997=((1.0)*sj4);
IkReal x1998=(cj1*r22);
IkReal x1999=(cj1*r21);
IkReal x2000=(cj5*sj3);
IkReal x2001=(cj3*cj4);
IkReal x2002=(r21*sj1*sj5);
IkReal x2003=(cj5*r20*sj1);
IkReal x2004=(r20*sj3*sj5);
IkReal x2005=(cj1*cj5*r20);
if( IKabs((((r21*sj1*x2000))+((cj4*x1998))+(((-1.0)*x2001*x2003))+((sj1*x2004))+(((-1.0)*cj3*x1996*x1997))+(((-1.0)*x1997*x2005))+((x2001*x2002))+((sj4*sj5*x1999)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj5*x1999*x2001))+(((-1.0)*x1999*x2000))+((cj4*x1996))+((cj3*sj4*x1998))+(((-1.0)*x1997*x2003))+((x2001*x2005))+((sj4*x2002))+(((-1.0)*cj1*x2004)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*sj1*x2000))+((cj4*x1998))+(((-1.0)*x2001*x2003))+((sj1*x2004))+(((-1.0)*cj3*x1996*x1997))+(((-1.0)*x1997*x2005))+((x2001*x2002))+((sj4*sj5*x1999))))+IKsqr(((((-1.0)*sj5*x1999*x2001))+(((-1.0)*x1999*x2000))+((cj4*x1996))+((cj3*sj4*x1998))+(((-1.0)*x1997*x2003))+((x2001*x2005))+((sj4*x2002))+(((-1.0)*cj1*x2004))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r21*sj1*x2000))+((cj4*x1998))+(((-1.0)*x2001*x2003))+((sj1*x2004))+(((-1.0)*cj3*x1996*x1997))+(((-1.0)*x1997*x2005))+((x2001*x2002))+((sj4*sj5*x1999))), ((((-1.0)*sj5*x1999*x2001))+(((-1.0)*x1999*x2000))+((cj4*x1996))+((cj3*sj4*x1998))+(((-1.0)*x1997*x2003))+((x2001*x2005))+((sj4*x2002))+(((-1.0)*cj1*x2004))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2006=IKsin(j2);
IkReal x2007=IKcos(j2);
IkReal x2008=((0.00024939)*cj5);
IkReal x2009=((0.026048)*cj0);
IkReal x2010=(cj4*sj5);
IkReal x2011=((4.799e-5)*sj4);
IkReal x2012=(cj5*r00);
IkReal x2013=(cj5*sj3);
IkReal x2014=((0.11)*sj1);
IkReal x2015=((0.00055081)*sj5);
IkReal x2016=((0.026048)*sj0);
IkReal x2017=((0.00024939)*sj5);
IkReal x2018=((1.0)*cj4);
IkReal x2019=((8.1e-7)*cj1);
IkReal x2020=(sj3*sj5);
IkReal x2021=(cj5*r10);
IkReal x2022=((4.799e-5)*cj4);
IkReal x2023=((0.1165)*sj0);
IkReal x2024=(cj5*r20);
IkReal x2025=((0.1165)*cj0);
IkReal x2026=(cj1*x2007);
IkReal x2027=(cj1*x2006);
IkReal x2028=(sj1*x2007);
IkReal x2029=((1.0)*cj3*sj4);
IkReal x2030=((1.0)*sj4*sj5);
IkReal x2031=(sj1*x2006);
IkReal x2032=(cj3*cj5*x2018);
evalcond[0]=(x2027+x2028+((sj4*x2024))+(((-1.0)*r21*x2030))+(((-1.0)*r22*x2018)));
evalcond[1]=(((sj4*x2012))+(((-1.0)*r01*x2030))+(((-1.0)*cj0*x2026))+((cj0*x2031))+(((-1.0)*r02*x2018)));
evalcond[2]=((((-1.0)*r11*x2030))+(((-1.0)*sj0*x2026))+(((-1.0)*r12*x2018))+((sj0*x2031))+((sj4*x2021)));
evalcond[3]=((((-1.0)*r22*x2029))+x2026+(((-1.0)*x2031))+((r21*x2013))+((cj3*r21*x2010))+((r20*x2020))+(((-1.0)*cj3*x2018*x2024)));
evalcond[4]=(((r00*x2020))+(((-1.0)*cj3*x2012*x2018))+(((-1.0)*r02*x2029))+((r01*x2013))+((cj0*x2027))+((cj0*x2028))+((cj3*r01*x2010)));
evalcond[5]=(((r10*x2020))+((sj0*x2028))+((sj0*x2027))+(((-1.0)*r12*x2029))+((cj3*r11*x2010))+(((-1.0)*cj3*x2018*x2021))+((r11*x2013)));
evalcond[6]=(((r21*x2008))+(((-1.0)*x2022*x2024))+(((-1.0)*r21*x2015))+((r20*x2017))+(((8.1e-7)*sj1))+(((-0.026048)*x2031))+(((4.799e-5)*r21*x2010))+(((-0.1165)*x2027))+(((-0.1165)*x2028))+(((0.11)*cj1))+(((-1.0)*pz))+(((0.026048)*x2026))+(((0.00055081)*x2024))+(((-1.0)*r22*x2011)));
evalcond[7]=(((r01*x2008))+(((5.0e-5)*sj0))+((r00*x2017))+((x2025*x2026))+((x2009*x2027))+((x2009*x2028))+(((-1.0)*px))+(((0.00055081)*x2012))+(((0.047)*cj0))+(((-1.0)*x2025*x2031))+(((4.799e-5)*r01*x2010))+((cj0*x2014))+(((-1.0)*r02*x2011))+(((-1.0)*x2012*x2022))+(((-1.0)*r01*x2015))+(((-1.0)*cj0*x2019)));
evalcond[8]=((((0.047)*sj0))+((r11*x2008))+(((-1.0)*x2021*x2022))+(((4.799e-5)*r11*x2010))+((sj0*x2014))+((r10*x2017))+(((-1.0)*x2023*x2031))+(((-5.0e-5)*cj0))+((x2023*x2026))+(((-1.0)*sj0*x2019))+(((-1.0)*py))+((x2016*x2027))+((x2016*x2028))+(((-1.0)*r12*x2011))+(((0.00055081)*x2021))+(((-1.0)*r11*x2015)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2033=((1.0)*sj0);
CheckValue<IkReal> x2034 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj5*x2033))+(((-1.0)*cj5*r21*x2033)))),IkReal(((((-1.0)*cj4*r21*sj5*x2033))+((cj4*cj5*r20*sj0))+((r22*sj0*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2034.valid){
continue;
}
CheckValue<IkReal> x2035=IKPowWithIntegerCheck(IKsign((((cj5*r10*sj4))+(((-1.0)*r11*sj4*sj5))+(((-1.0)*cj4*r12)))),-1);
if(!x2035.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x2034.value)+(((1.5707963267949)*(x2035.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x2036=IKsin(j3);
IkReal x2037=IKcos(j3);
IkReal x2038=((1.0)*cj5);
IkReal x2039=(cj4*x2036);
IkReal x2040=((1.0)*sj5*x2037);
IkReal x2041=((1.0)*sj4*x2036);
evalcond[0]=((((-1.0)*r20*x2038*x2039))+((r21*sj5*x2039))+(((-1.0)*r22*x2041))+(((-1.0)*r21*x2037*x2038))+(((-1.0)*r20*x2040)));
evalcond[1]=(cj0+(((-1.0)*r10*x2040))+(((-1.0)*r10*x2038*x2039))+(((-1.0)*r11*x2037*x2038))+((r11*sj5*x2039))+(((-1.0)*r12*x2041)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x2041))+(((-1.0)*r00*x2038*x2039))+(((-1.0)*r01*x2037*x2038))+((r01*sj5*x2039))+(((-1.0)*r00*x2040)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
j1eval[0]=((1.0)+(((38580.2469135802)*(IKabs(((0.44)+(((0.00220324)*r21*sj5))+(((-0.00220324)*cj5*r20))+(((4.0)*pz))+(((0.104192)*cj3*cj4*r21*sj5))+(((-0.00099756)*r20*sj5))+(((0.466)*cj4*r22))+(((0.104192)*cj5*r21*sj3))+(((0.466)*r21*sj4*sj5))+(((-0.104192)*cj3*r22*sj4))+(((-0.00099756)*cj5*r21))+(((-0.466)*cj5*r20*sj4))+(((0.00019196)*cj4*cj5*r20))+(((-0.00019196)*cj4*r21*sj5))+(((0.00019196)*r22*sj4))+(((0.104192)*r20*sj3*sj5))+(((-0.104192)*cj3*cj4*cj5*r20)))))))+(((38580.2469135802)*(IKabs(((((-0.00057588)*cj0*cj4*r21*sj5))+(((-0.00660972)*cj0*cj5*r20))+(((-0.312576)*cj5*r00*sj4))+(((-1.398)*cj0*cj5*r20*sj4))+(((0.00057588)*cj0*cj4*cj5*r20))+(((0.312576)*r01*sj4*sj5))+(((-0.00299268)*cj0*cj5*r21))+(((0.44)*cj0))+(((-0.00299268)*cj0*r20*sj5))+(((1.398)*cj0*cj4*r22))+(((0.00057588)*cj0*r22*sj4))+(((0.00660972)*cj0*r21*sj5))+(((12.0)*cj0*pz))+(((1.398)*cj0*r21*sj4*sj5))+(((0.312576)*cj4*r02)))))))+(((38580.2469135802)*(IKabs(((-0.44)+(((0.00057588)*cj4*cj5*r20))+(((-1.398)*cj5*r20*sj4))+(((-0.00299268)*cj5*r21))+(((12.0)*pz))+(((-0.00660972)*cj5*r20))+(((-0.00057588)*cj4*r21*sj5))+(((0.312576)*r20*sj3*sj5))+(((0.312576)*cj5*r21*sj3))+(((-0.312576)*cj3*cj4*cj5*r20))+(((0.00057588)*r22*sj4))+(((1.398)*cj4*r22))+(((-0.00299268)*r20*sj5))+(((0.312576)*cj3*cj4*r21*sj5))+(((0.00660972)*r21*sj5))+(((1.398)*r21*sj4*sj5))+(((-0.312576)*cj3*r22*sj4)))))))+(((38580.2469135802)*(IKabs(((((-0.00099756)*cj0*cj5*r21))+(((-0.00220324)*cj0*cj5*r20))+(((4.0)*cj0*pz))+(((0.00019196)*cj0*cj4*cj5*r20))+(((0.466)*cj0*r21*sj4*sj5))+(((0.44)*cj0))+(((0.466)*cj0*cj4*r22))+(((-0.00099756)*cj0*r20*sj5))+(((0.104192)*cj4*r02))+(((-0.104192)*cj5*r00*sj4))+(((0.00019196)*cj0*r22*sj4))+(((0.00220324)*cj0*r21*sj5))+(((0.104192)*r01*sj4*sj5))+(((-0.00019196)*cj0*cj4*r21*sj5))+(((-0.466)*cj0*cj5*r20*sj4)))))))+(IKabs(cj0))+(((38580.2469135802)*(IKabs(((((-0.00057588)*cj0*cj4*r21*sj5))+(((-0.00660972)*cj0*cj5*r20))+(((-0.312576)*cj5*r00*sj4))+(((-1.398)*cj0*cj5*r20*sj4))+(((0.00057588)*cj0*cj4*cj5*r20))+(((-0.44)*cj0))+(((0.312576)*r01*sj4*sj5))+(((-0.00299268)*cj0*cj5*r21))+(((-0.00299268)*cj0*r20*sj5))+(((1.398)*cj0*cj4*r22))+(((0.00057588)*cj0*r22*sj4))+(((0.00660972)*cj0*r21*sj5))+(((12.0)*cj0*pz))+(((1.398)*cj0*r21*sj4*sj5))+(((0.312576)*cj4*r02)))))))+(((38580.2469135802)*(IKabs(((0.44)+(((0.00057588)*cj4*cj5*r20))+(((-1.398)*cj5*r20*sj4))+(((-0.00299268)*cj5*r21))+(((12.0)*pz))+(((-0.00660972)*cj5*r20))+(((-0.00057588)*cj4*r21*sj5))+(((0.312576)*r20*sj3*sj5))+(((0.312576)*cj5*r21*sj3))+(((-0.312576)*cj3*cj4*cj5*r20))+(((0.00057588)*r22*sj4))+(((1.398)*cj4*r22))+(((-0.00299268)*r20*sj5))+(((0.312576)*cj3*cj4*r21*sj5))+(((0.00660972)*r21*sj5))+(((1.398)*r21*sj4*sj5))+(((-0.312576)*cj3*r22*sj4))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x2042=((12.0)*pz);
IkReal x2043=((4.0)*pz);
IkReal x2044=(r21*sj5);
IkReal x2045=((0.00057588)*cj4);
IkReal x2046=((0.312576)*cj5);
IkReal x2047=(cj3*cj4);
IkReal x2048=((1.398)*sj4);
IkReal x2049=(cj4*r22);
IkReal x2050=(r21*sj3);
IkReal x2051=(r22*sj4);
IkReal x2052=(cj5*r21);
IkReal x2053=(cj5*r20);
IkReal x2054=((0.466)*sj4);
IkReal x2055=(r20*sj5);
IkReal x2056=((0.00019196)*cj4);
IkReal x2057=((0.00057588)*x2051);
IkReal x2058=((1.398)*x2049);
IkReal x2059=((0.00660972)*x2044);
IkReal x2060=((0.00220324)*x2044);
IkReal x2061=((0.466)*x2049);
IkReal x2062=((0.00019196)*x2051);
IkReal x2063=(x2045*x2053);
IkReal x2064=((0.312576)*sj3*x2055);
IkReal x2065=(x2046*x2050);
IkReal x2066=(x2044*x2048);
IkReal x2067=((0.104192)*cj5*x2050);
IkReal x2068=(x2044*x2054);
IkReal x2069=(x2053*x2056);
IkReal x2070=((0.104192)*sj3*x2055);
IkReal x2071=((0.312576)*x2044*x2047);
IkReal x2072=((0.104192)*x2044*x2047);
IkReal x2073=((((0.00660972)*x2053))+(((0.00299268)*x2055))+(((0.00299268)*x2052))+((r20*x2046*x2047))+((x2048*x2053))+(((0.312576)*cj3*x2051))+((x2044*x2045)));
IkReal x2074=(((x2053*x2054))+(((0.00220324)*x2053))+(((0.00099756)*x2055))+(((0.00099756)*x2052))+((x2044*x2056))+(((0.104192)*cj3*x2051))+(((0.104192)*x2047*x2053)));
IkReal x2075=(x2063+x2064+x2065+x2066+x2071+x2042+x2057+x2059+x2058);
IkReal x2076=(x2068+x2069+x2060+x2061+x2062+x2067+x2072+x2070+x2043);
op[0]=((0.44)+x2076+(((-1.0)*x2074)));
op[1]=-6.48e-6;
op[2]=((0.44)+x2075+(((-1.0)*x2073)));
op[3]=-1.296e-5;
op[4]=((-0.44)+x2075+(((-1.0)*x2073)));
op[5]=-6.48e-6;
op[6]=((-0.44)+x2076+(((-1.0)*x2074)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x2077=((0.44)*cj0);
IkReal x2078=(cj0*sj5);
IkReal x2079=(cj4*r21);
IkReal x2080=(cj4*r02);
IkReal x2081=(r21*sj4);
IkReal x2082=((0.00019196)*cj0);
IkReal x2083=(r22*sj4);
IkReal x2084=((0.466)*cj0);
IkReal x2085=(cj4*r22);
IkReal x2086=(cj0*cj5);
IkReal x2087=((6.48e-6)*cj0);
IkReal x2088=((0.00057588)*cj0);
IkReal x2089=(r20*sj4);
IkReal x2090=(cj0*pz);
IkReal x2091=((4.0)*x2090);
IkReal x2092=((0.104192)*x2080);
IkReal x2093=((12.0)*x2090);
IkReal x2094=((0.312576)*x2080);
IkReal x2095=(r01*sj4*sj5);
IkReal x2096=(cj5*r00*sj4);
IkReal x2097=(cj4*cj5*r20);
IkReal x2098=(x2084*x2085);
IkReal x2099=(x2082*x2083);
IkReal x2100=((0.312576)*x2095);
IkReal x2101=((1.398)*cj0*x2085);
IkReal x2102=(x2083*x2088);
IkReal x2103=((0.00660972)*r21*x2078);
IkReal x2104=((0.312576)*x2096);
IkReal x2105=((0.00299268)*r20*x2078);
IkReal x2106=((0.00660972)*r20*x2086);
IkReal x2107=((0.00299268)*r21*x2086);
IkReal x2108=((0.00220324)*r21*x2078);
IkReal x2109=((0.104192)*x2095);
IkReal x2110=((0.00099756)*r21*x2086);
IkReal x2111=((0.104192)*x2096);
IkReal x2112=((0.00220324)*r20*x2086);
IkReal x2113=((0.00099756)*r20*x2078);
IkReal x2114=(x2082*x2097);
IkReal x2115=((0.466)*x2078*x2081);
IkReal x2116=((0.00057588)*cj4*r20*x2086);
IkReal x2117=((1.398)*x2078*x2081);
IkReal x2118=((0.00057588)*x2078*x2079);
IkReal x2119=((1.398)*x2086*x2089);
IkReal x2120=((0.00019196)*x2078*x2079);
IkReal x2121=(cj5*x2084*x2089);
IkReal x2122=(x2121+x2120+x2110+x2111+x2112+x2113);
IkReal x2123=(x2118+x2119+x2107+x2106+x2105+x2104);
IkReal x2124=(x2091+x2092+x2099+x2098+x2114+x2115+x2109+x2108);
IkReal x2125=(x2094+x2093+x2116+x2117+x2103+x2102+x2101+x2100);
j1evalpoly[0]=((((-1.0)*x2087*(htj1*htj1*htj1*htj1*htj1)))+(((-1.0)*htj1*x2087))+(((-1.296e-5)*cj0*(htj1*htj1*htj1)))+x2124+(((-1.0)*x2077))+(((-1.0)*x2122))+(((htj1*htj1*htj1*htj1*htj1*htj1)*((x2077+x2124+(((-1.0)*x2122))))))+(((htj1*htj1)*((x2125+(((-1.0)*x2077))+(((-1.0)*x2123))))))+(((htj1*htj1*htj1*htj1)*((x2077+x2125+(((-1.0)*x2123)))))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2126=(r22*sj1);
IkReal x2127=((1.0)*sj4);
IkReal x2128=(cj1*r22);
IkReal x2129=(cj1*r21);
IkReal x2130=(cj5*sj3);
IkReal x2131=(cj3*cj4);
IkReal x2132=(r21*sj1*sj5);
IkReal x2133=(cj5*r20*sj1);
IkReal x2134=(r20*sj3*sj5);
IkReal x2135=(cj1*cj5*r20);
if( IKabs((((x2131*x2132))+(((-1.0)*cj3*x2126*x2127))+((sj4*sj5*x2129))+(((-1.0)*x2127*x2135))+(((-1.0)*x2131*x2133))+((r21*sj1*x2130))+((cj4*x2128))+((sj1*x2134)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj5*x2129*x2131))+((x2131*x2135))+((sj4*x2132))+(((-1.0)*x2127*x2133))+(((-1.0)*x2129*x2130))+((cj3*sj4*x2128))+((cj4*x2126))+(((-1.0)*cj1*x2134)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2131*x2132))+(((-1.0)*cj3*x2126*x2127))+((sj4*sj5*x2129))+(((-1.0)*x2127*x2135))+(((-1.0)*x2131*x2133))+((r21*sj1*x2130))+((cj4*x2128))+((sj1*x2134))))+IKsqr(((((-1.0)*sj5*x2129*x2131))+((x2131*x2135))+((sj4*x2132))+(((-1.0)*x2127*x2133))+(((-1.0)*x2129*x2130))+((cj3*sj4*x2128))+((cj4*x2126))+(((-1.0)*cj1*x2134))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x2131*x2132))+(((-1.0)*cj3*x2126*x2127))+((sj4*sj5*x2129))+(((-1.0)*x2127*x2135))+(((-1.0)*x2131*x2133))+((r21*sj1*x2130))+((cj4*x2128))+((sj1*x2134))), ((((-1.0)*sj5*x2129*x2131))+((x2131*x2135))+((sj4*x2132))+(((-1.0)*x2127*x2133))+(((-1.0)*x2129*x2130))+((cj3*sj4*x2128))+((cj4*x2126))+(((-1.0)*cj1*x2134))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2136=IKsin(j2);
IkReal x2137=IKcos(j2);
IkReal x2138=((0.00024939)*cj5);
IkReal x2139=((0.026048)*cj0);
IkReal x2140=(cj4*sj5);
IkReal x2141=((4.799e-5)*sj4);
IkReal x2142=(cj5*r00);
IkReal x2143=(cj5*sj3);
IkReal x2144=((0.11)*sj1);
IkReal x2145=((0.00055081)*sj5);
IkReal x2146=((0.026048)*sj0);
IkReal x2147=((0.00024939)*sj5);
IkReal x2148=((1.0)*cj4);
IkReal x2149=((8.1e-7)*cj1);
IkReal x2150=(sj3*sj5);
IkReal x2151=(cj5*r10);
IkReal x2152=((4.799e-5)*cj4);
IkReal x2153=((0.1165)*sj0);
IkReal x2154=(cj5*r20);
IkReal x2155=((0.1165)*cj0);
IkReal x2156=(cj1*x2137);
IkReal x2157=(cj1*x2136);
IkReal x2158=(sj1*x2137);
IkReal x2159=((1.0)*cj3*sj4);
IkReal x2160=((1.0)*sj4*sj5);
IkReal x2161=(sj1*x2136);
IkReal x2162=(cj3*cj5*x2148);
evalcond[0]=((((-1.0)*r21*x2160))+x2157+x2158+((sj4*x2154))+(((-1.0)*r22*x2148)));
evalcond[1]=((((-1.0)*r01*x2160))+(((-1.0)*r02*x2148))+((cj0*x2161))+(((-1.0)*cj0*x2156))+((sj4*x2142)));
evalcond[2]=(((sj0*x2161))+(((-1.0)*r12*x2148))+((sj4*x2151))+(((-1.0)*r11*x2160))+(((-1.0)*sj0*x2156)));
evalcond[3]=(((r20*x2150))+x2156+(((-1.0)*cj3*x2148*x2154))+((cj3*r21*x2140))+((r21*x2143))+(((-1.0)*r22*x2159))+(((-1.0)*x2161)));
evalcond[4]=((((-1.0)*r02*x2159))+((cj3*r01*x2140))+((cj0*x2157))+((cj0*x2158))+(((-1.0)*cj3*x2142*x2148))+((r00*x2150))+((r01*x2143)));
evalcond[5]=(((r11*x2143))+(((-1.0)*r12*x2159))+((sj0*x2157))+((sj0*x2158))+(((-1.0)*cj3*x2148*x2151))+((r10*x2150))+((cj3*r11*x2140)));
evalcond[6]=(((r21*x2138))+(((0.026048)*x2156))+(((-0.1165)*x2157))+(((-0.1165)*x2158))+(((8.1e-7)*sj1))+((r20*x2147))+(((-0.026048)*x2161))+(((-1.0)*x2152*x2154))+(((0.11)*cj1))+(((0.00055081)*x2154))+(((-1.0)*pz))+(((-1.0)*r22*x2141))+(((-1.0)*r21*x2145))+(((4.799e-5)*r21*x2140)));
evalcond[7]=((((-1.0)*cj0*x2149))+(((-1.0)*x2155*x2161))+((x2139*x2158))+((x2139*x2157))+(((-1.0)*r01*x2145))+(((-1.0)*x2142*x2152))+(((5.0e-5)*sj0))+(((-1.0)*r02*x2141))+((x2155*x2156))+(((4.799e-5)*r01*x2140))+((cj0*x2144))+(((0.00055081)*x2142))+((r01*x2138))+(((-1.0)*px))+(((0.047)*cj0))+((r00*x2147)));
evalcond[8]=((((0.047)*sj0))+((x2146*x2157))+((x2146*x2158))+(((-1.0)*x2153*x2161))+((r11*x2138))+(((-5.0e-5)*cj0))+(((0.00055081)*x2151))+((sj0*x2144))+(((-1.0)*r11*x2145))+(((-1.0)*py))+(((-1.0)*r12*x2141))+((r10*x2147))+(((4.799e-5)*r11*x2140))+((x2153*x2156))+(((-1.0)*x2151*x2152))+(((-1.0)*sj0*x2149)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2163=((1.0)*cj0);
CheckValue<IkReal> x2164 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj5*x2163))+(((-1.0)*cj5*r21*x2163)))),IkReal((((cj0*cj4*cj5*r20))+(((-1.0)*cj4*r21*sj5*x2163))+((cj0*r22*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2164.valid){
continue;
}
CheckValue<IkReal> x2165=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*r02))+((cj5*r00*sj4))+(((-1.0)*r01*sj4*sj5)))),-1);
if(!x2165.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x2164.value)+(((1.5707963267949)*(x2165.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x2166=IKsin(j3);
IkReal x2167=IKcos(j3);
IkReal x2168=((1.0)*cj5);
IkReal x2169=(cj4*x2166);
IkReal x2170=((1.0)*sj5*x2167);
IkReal x2171=((1.0)*sj4*x2166);
evalcond[0]=((((-1.0)*r21*x2167*x2168))+(((-1.0)*r20*x2170))+((r21*sj5*x2169))+(((-1.0)*r20*x2168*x2169))+(((-1.0)*r22*x2171)));
evalcond[1]=((((-1.0)*r11*x2167*x2168))+cj0+(((-1.0)*r10*x2168*x2169))+((r11*sj5*x2169))+(((-1.0)*r10*x2170))+(((-1.0)*r12*x2171)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x2168*x2169))+(((-1.0)*r01*x2167*x2168))+(((-1.0)*r02*x2171))+(((-1.0)*r00*x2170))+((r01*sj5*x2169)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
j1eval[0]=((1.0)+(((38580.2469135802)*(IKabs(((0.44)+(((0.00220324)*r21*sj5))+(((-0.00220324)*cj5*r20))+(((4.0)*pz))+(((0.104192)*cj3*cj4*r21*sj5))+(((-0.00099756)*r20*sj5))+(((0.466)*cj4*r22))+(((0.104192)*cj5*r21*sj3))+(((0.466)*r21*sj4*sj5))+(((-0.104192)*cj3*r22*sj4))+(((-0.00099756)*cj5*r21))+(((-0.466)*cj5*r20*sj4))+(((0.00019196)*cj4*cj5*r20))+(((-0.00019196)*cj4*r21*sj5))+(((0.00019196)*r22*sj4))+(((0.104192)*r20*sj3*sj5))+(((-0.104192)*cj3*cj4*cj5*r20)))))))+(((38580.2469135802)*(IKabs(((((-0.00057588)*cj0*cj4*r21*sj5))+(((-0.00660972)*cj0*cj5*r20))+(((-0.312576)*cj5*r00*sj4))+(((-1.398)*cj0*cj5*r20*sj4))+(((0.00057588)*cj0*cj4*cj5*r20))+(((0.312576)*r01*sj4*sj5))+(((-0.00299268)*cj0*cj5*r21))+(((0.44)*cj0))+(((-0.00299268)*cj0*r20*sj5))+(((1.398)*cj0*cj4*r22))+(((0.00057588)*cj0*r22*sj4))+(((0.00660972)*cj0*r21*sj5))+(((12.0)*cj0*pz))+(((1.398)*cj0*r21*sj4*sj5))+(((0.312576)*cj4*r02)))))))+(((38580.2469135802)*(IKabs(((-0.44)+(((0.00057588)*cj4*cj5*r20))+(((-1.398)*cj5*r20*sj4))+(((-0.00299268)*cj5*r21))+(((12.0)*pz))+(((-0.00660972)*cj5*r20))+(((-0.00057588)*cj4*r21*sj5))+(((0.312576)*r20*sj3*sj5))+(((0.312576)*cj5*r21*sj3))+(((-0.312576)*cj3*cj4*cj5*r20))+(((0.00057588)*r22*sj4))+(((1.398)*cj4*r22))+(((-0.00299268)*r20*sj5))+(((0.312576)*cj3*cj4*r21*sj5))+(((0.00660972)*r21*sj5))+(((1.398)*r21*sj4*sj5))+(((-0.312576)*cj3*r22*sj4)))))))+(((38580.2469135802)*(IKabs(((((-0.00099756)*cj0*cj5*r21))+(((-0.00220324)*cj0*cj5*r20))+(((4.0)*cj0*pz))+(((0.00019196)*cj0*cj4*cj5*r20))+(((0.466)*cj0*r21*sj4*sj5))+(((0.44)*cj0))+(((0.466)*cj0*cj4*r22))+(((-0.00099756)*cj0*r20*sj5))+(((0.104192)*cj4*r02))+(((-0.104192)*cj5*r00*sj4))+(((0.00019196)*cj0*r22*sj4))+(((0.00220324)*cj0*r21*sj5))+(((0.104192)*r01*sj4*sj5))+(((-0.00019196)*cj0*cj4*r21*sj5))+(((-0.466)*cj0*cj5*r20*sj4)))))))+(IKabs(cj0))+(((38580.2469135802)*(IKabs(((((-0.00057588)*cj0*cj4*r21*sj5))+(((-0.00660972)*cj0*cj5*r20))+(((-0.312576)*cj5*r00*sj4))+(((-1.398)*cj0*cj5*r20*sj4))+(((0.00057588)*cj0*cj4*cj5*r20))+(((-0.44)*cj0))+(((0.312576)*r01*sj4*sj5))+(((-0.00299268)*cj0*cj5*r21))+(((-0.00299268)*cj0*r20*sj5))+(((1.398)*cj0*cj4*r22))+(((0.00057588)*cj0*r22*sj4))+(((0.00660972)*cj0*r21*sj5))+(((12.0)*cj0*pz))+(((1.398)*cj0*r21*sj4*sj5))+(((0.312576)*cj4*r02)))))))+(((38580.2469135802)*(IKabs(((0.44)+(((0.00057588)*cj4*cj5*r20))+(((-1.398)*cj5*r20*sj4))+(((-0.00299268)*cj5*r21))+(((12.0)*pz))+(((-0.00660972)*cj5*r20))+(((-0.00057588)*cj4*r21*sj5))+(((0.312576)*r20*sj3*sj5))+(((0.312576)*cj5*r21*sj3))+(((-0.312576)*cj3*cj4*cj5*r20))+(((0.00057588)*r22*sj4))+(((1.398)*cj4*r22))+(((-0.00299268)*r20*sj5))+(((0.312576)*cj3*cj4*r21*sj5))+(((0.00660972)*r21*sj5))+(((1.398)*r21*sj4*sj5))+(((-0.312576)*cj3*r22*sj4))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x2172=((12.0)*pz);
IkReal x2173=((4.0)*pz);
IkReal x2174=(r21*sj5);
IkReal x2175=((0.00057588)*cj4);
IkReal x2176=((0.312576)*cj5);
IkReal x2177=(cj3*cj4);
IkReal x2178=((1.398)*sj4);
IkReal x2179=(cj4*r22);
IkReal x2180=(r21*sj3);
IkReal x2181=(r22*sj4);
IkReal x2182=(cj5*r21);
IkReal x2183=(cj5*r20);
IkReal x2184=((0.466)*sj4);
IkReal x2185=(r20*sj5);
IkReal x2186=((0.00019196)*cj4);
IkReal x2187=((0.00057588)*x2181);
IkReal x2188=((1.398)*x2179);
IkReal x2189=((0.00660972)*x2174);
IkReal x2190=((0.00220324)*x2174);
IkReal x2191=((0.466)*x2179);
IkReal x2192=((0.00019196)*x2181);
IkReal x2193=(x2175*x2183);
IkReal x2194=((0.312576)*sj3*x2185);
IkReal x2195=(x2176*x2180);
IkReal x2196=(x2174*x2178);
IkReal x2197=((0.104192)*cj5*x2180);
IkReal x2198=(x2174*x2184);
IkReal x2199=(x2183*x2186);
IkReal x2200=((0.104192)*sj3*x2185);
IkReal x2201=((0.312576)*x2174*x2177);
IkReal x2202=((0.104192)*x2174*x2177);
IkReal x2203=(((r20*x2176*x2177))+(((0.00660972)*x2183))+((x2174*x2175))+((x2178*x2183))+(((0.00299268)*x2182))+(((0.00299268)*x2185))+(((0.312576)*cj3*x2181)));
IkReal x2204=((((0.00220324)*x2183))+(((0.104192)*x2177*x2183))+((x2183*x2184))+(((0.00099756)*x2185))+(((0.00099756)*x2182))+((x2174*x2186))+(((0.104192)*cj3*x2181)));
IkReal x2205=(x2201+x2172+x2193+x2194+x2195+x2196+x2187+x2189+x2188);
IkReal x2206=(x2200+x2202+x2173+x2190+x2191+x2192+x2197+x2198+x2199);
op[0]=((0.44)+x2206+(((-1.0)*x2204)));
op[1]=-6.48e-6;
op[2]=((0.44)+x2205+(((-1.0)*x2203)));
op[3]=-1.296e-5;
op[4]=((-0.44)+x2205+(((-1.0)*x2203)));
op[5]=-6.48e-6;
op[6]=((-0.44)+x2206+(((-1.0)*x2204)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x2207=((0.44)*cj0);
IkReal x2208=(cj0*sj5);
IkReal x2209=(cj4*r21);
IkReal x2210=(cj4*r02);
IkReal x2211=(r21*sj4);
IkReal x2212=((0.00019196)*cj0);
IkReal x2213=(r22*sj4);
IkReal x2214=((0.466)*cj0);
IkReal x2215=(cj4*r22);
IkReal x2216=(cj0*cj5);
IkReal x2217=((6.48e-6)*cj0);
IkReal x2218=((0.00057588)*cj0);
IkReal x2219=(r20*sj4);
IkReal x2220=(cj0*pz);
IkReal x2221=((4.0)*x2220);
IkReal x2222=((0.104192)*x2210);
IkReal x2223=((12.0)*x2220);
IkReal x2224=((0.312576)*x2210);
IkReal x2225=(r01*sj4*sj5);
IkReal x2226=(cj5*r00*sj4);
IkReal x2227=(cj4*cj5*r20);
IkReal x2228=(x2214*x2215);
IkReal x2229=(x2212*x2213);
IkReal x2230=((0.312576)*x2225);
IkReal x2231=((1.398)*cj0*x2215);
IkReal x2232=(x2213*x2218);
IkReal x2233=((0.00660972)*r21*x2208);
IkReal x2234=((0.312576)*x2226);
IkReal x2235=((0.00299268)*r20*x2208);
IkReal x2236=((0.00660972)*r20*x2216);
IkReal x2237=((0.00299268)*r21*x2216);
IkReal x2238=((0.00220324)*r21*x2208);
IkReal x2239=((0.104192)*x2225);
IkReal x2240=((0.00099756)*r21*x2216);
IkReal x2241=((0.104192)*x2226);
IkReal x2242=((0.00220324)*r20*x2216);
IkReal x2243=((0.00099756)*r20*x2208);
IkReal x2244=(x2212*x2227);
IkReal x2245=((0.466)*x2208*x2211);
IkReal x2246=((0.00057588)*cj4*r20*x2216);
IkReal x2247=((1.398)*x2208*x2211);
IkReal x2248=((0.00057588)*x2208*x2209);
IkReal x2249=((1.398)*x2216*x2219);
IkReal x2250=((0.00019196)*x2208*x2209);
IkReal x2251=(cj5*x2214*x2219);
IkReal x2252=(x2240+x2241+x2242+x2243+x2251+x2250);
IkReal x2253=(x2235+x2234+x2237+x2236+x2248+x2249);
IkReal x2254=(x2228+x2229+x2222+x2221+x2239+x2238+x2244+x2245);
IkReal x2255=(x2224+x2223+x2231+x2230+x2233+x2232+x2246+x2247);
j1evalpoly[0]=(x2254+(((htj1*htj1*htj1*htj1)*((x2207+x2255+(((-1.0)*x2253))))))+(((-1.296e-5)*cj0*(htj1*htj1*htj1)))+(((-1.0)*x2207))+(((-1.0)*htj1*x2217))+(((-1.0)*x2252))+(((-1.0)*x2217*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*((x2207+x2254+(((-1.0)*x2252))))))+(((htj1*htj1)*((x2255+(((-1.0)*x2207))+(((-1.0)*x2253)))))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2256=(r22*sj1);
IkReal x2257=((1.0)*sj4);
IkReal x2258=(cj1*r22);
IkReal x2259=(cj1*r21);
IkReal x2260=(cj5*sj3);
IkReal x2261=(cj3*cj4);
IkReal x2262=(r21*sj1*sj5);
IkReal x2263=(cj5*r20*sj1);
IkReal x2264=(r20*sj3*sj5);
IkReal x2265=(cj1*cj5*r20);
if( IKabs((((sj1*x2264))+(((-1.0)*cj3*x2256*x2257))+((r21*sj1*x2260))+((x2261*x2262))+(((-1.0)*x2257*x2265))+((cj4*x2258))+((sj4*sj5*x2259))+(((-1.0)*x2261*x2263)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj4*x2262))+(((-1.0)*cj1*x2264))+((cj3*sj4*x2258))+(((-1.0)*x2259*x2260))+((x2261*x2265))+(((-1.0)*x2257*x2263))+(((-1.0)*sj5*x2259*x2261))+((cj4*x2256)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x2264))+(((-1.0)*cj3*x2256*x2257))+((r21*sj1*x2260))+((x2261*x2262))+(((-1.0)*x2257*x2265))+((cj4*x2258))+((sj4*sj5*x2259))+(((-1.0)*x2261*x2263))))+IKsqr((((sj4*x2262))+(((-1.0)*cj1*x2264))+((cj3*sj4*x2258))+(((-1.0)*x2259*x2260))+((x2261*x2265))+(((-1.0)*x2257*x2263))+(((-1.0)*sj5*x2259*x2261))+((cj4*x2256))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x2264))+(((-1.0)*cj3*x2256*x2257))+((r21*sj1*x2260))+((x2261*x2262))+(((-1.0)*x2257*x2265))+((cj4*x2258))+((sj4*sj5*x2259))+(((-1.0)*x2261*x2263))), (((sj4*x2262))+(((-1.0)*cj1*x2264))+((cj3*sj4*x2258))+(((-1.0)*x2259*x2260))+((x2261*x2265))+(((-1.0)*x2257*x2263))+(((-1.0)*sj5*x2259*x2261))+((cj4*x2256))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2266=IKsin(j2);
IkReal x2267=IKcos(j2);
IkReal x2268=((0.00024939)*cj5);
IkReal x2269=((0.026048)*cj0);
IkReal x2270=(cj4*sj5);
IkReal x2271=((4.799e-5)*sj4);
IkReal x2272=(cj5*r00);
IkReal x2273=(cj5*sj3);
IkReal x2274=((0.11)*sj1);
IkReal x2275=((0.00055081)*sj5);
IkReal x2276=((0.026048)*sj0);
IkReal x2277=((0.00024939)*sj5);
IkReal x2278=((1.0)*cj4);
IkReal x2279=((8.1e-7)*cj1);
IkReal x2280=(sj3*sj5);
IkReal x2281=(cj5*r10);
IkReal x2282=((4.799e-5)*cj4);
IkReal x2283=((0.1165)*sj0);
IkReal x2284=(cj5*r20);
IkReal x2285=((0.1165)*cj0);
IkReal x2286=(cj1*x2267);
IkReal x2287=(cj1*x2266);
IkReal x2288=(sj1*x2267);
IkReal x2289=((1.0)*cj3*sj4);
IkReal x2290=((1.0)*sj4*sj5);
IkReal x2291=(sj1*x2266);
IkReal x2292=(cj3*cj5*x2278);
evalcond[0]=(x2288+x2287+(((-1.0)*r22*x2278))+((sj4*x2284))+(((-1.0)*r21*x2290)));
evalcond[1]=(((sj4*x2272))+((cj0*x2291))+(((-1.0)*cj0*x2286))+(((-1.0)*r01*x2290))+(((-1.0)*r02*x2278)));
evalcond[2]=(((sj0*x2291))+((sj4*x2281))+(((-1.0)*r11*x2290))+(((-1.0)*r12*x2278))+(((-1.0)*sj0*x2286)));
evalcond[3]=(((r21*x2273))+x2286+((r20*x2280))+(((-1.0)*x2291))+(((-1.0)*r22*x2289))+((cj3*r21*x2270))+(((-1.0)*cj3*x2278*x2284)));
evalcond[4]=(((cj0*x2288))+((cj0*x2287))+((r01*x2273))+(((-1.0)*r02*x2289))+(((-1.0)*cj3*x2272*x2278))+((cj3*r01*x2270))+((r00*x2280)));
evalcond[5]=(((r10*x2280))+(((-1.0)*r12*x2289))+((sj0*x2288))+((sj0*x2287))+((r11*x2273))+((cj3*r11*x2270))+(((-1.0)*cj3*x2278*x2281)));
evalcond[6]=((((-1.0)*x2282*x2284))+(((8.1e-7)*sj1))+((r21*x2268))+(((-1.0)*r21*x2275))+(((4.799e-5)*r21*x2270))+(((0.11)*cj1))+(((-1.0)*pz))+(((-1.0)*r22*x2271))+(((0.026048)*x2286))+(((0.00055081)*x2284))+((r20*x2277))+(((-0.1165)*x2288))+(((-0.1165)*x2287))+(((-0.026048)*x2291)));
evalcond[7]=((((4.799e-5)*r01*x2270))+((r01*x2268))+((r00*x2277))+(((5.0e-5)*sj0))+(((-1.0)*x2285*x2291))+(((-1.0)*x2272*x2282))+(((0.00055081)*x2272))+(((-1.0)*r01*x2275))+((cj0*x2274))+(((-1.0)*px))+(((0.047)*cj0))+(((-1.0)*r02*x2271))+(((-1.0)*cj0*x2279))+((x2285*x2286))+((x2269*x2288))+((x2269*x2287)));
evalcond[8]=((((0.047)*sj0))+((sj0*x2274))+(((-1.0)*sj0*x2279))+(((-1.0)*x2283*x2291))+(((-5.0e-5)*cj0))+(((4.799e-5)*r11*x2270))+((r11*x2268))+(((-1.0)*py))+(((-1.0)*x2281*x2282))+((r10*x2277))+((x2283*x2286))+(((0.00055081)*x2281))+(((-1.0)*r11*x2275))+(((-1.0)*r12*x2271))+((x2276*x2288))+((x2276*x2287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "8b346b367cc45bb714a8ea990f3f7259"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
